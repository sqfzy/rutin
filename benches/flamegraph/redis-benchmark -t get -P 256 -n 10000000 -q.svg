<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1110" onload="init(evt)" viewBox="0 0 1200 1110" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1110" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1093.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1093.00"> </text><svg id="frames" x="10" width="1180" total_samples="4026"><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="0.0000%" y="1029" width="0.0248%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1039.50"></text></g><g><title>rutin::server::listener::Listener::run::_{{closure}}::_{{closure}} (1 samples, 0.02%)</title><rect x="0.0000%" y="1013" width="0.0248%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1023.50"></text></g><g><title>rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}} (1 samples, 0.02%)</title><rect x="0.0000%" y="997" width="0.0248%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1007.50"></text></g><g><title>rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}}::_{{closure}} (1 samples, 0.02%)</title><rect x="0.0000%" y="981" width="0.0248%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="991.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.02%)</title><rect x="0.0248%" y="341" width="0.0248%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.2748%" y="351.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::powf (1 samples, 0.02%)</title><rect x="0.0745%" y="325" width="0.0248%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="1"/><text x="0.3245%" y="335.50"></text></g><g><title>pow (1 samples, 0.02%)</title><rect x="0.0745%" y="309" width="0.0248%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="1"/><text x="0.3245%" y="319.50"></text></g><g><title>[libm.so.6] (1 samples, 0.02%)</title><rect x="0.0745%" y="293" width="0.0248%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="1"/><text x="0.3245%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::end_processing_scheduled_tasks (7 samples, 0.17%)</title><rect x="0.0497%" y="341" width="0.1739%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="7"/><text x="0.2997%" y="351.50"></text></g><g><title>tokio::runtime::metrics::batch::MetricsBatch::end_processing_scheduled_tasks (5 samples, 0.12%)</title><rect x="0.0994%" y="325" width="0.1242%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="5"/><text x="0.3494%" y="335.50"></text></g><g><title>std::time::Instant::elapsed (5 samples, 0.12%)</title><rect x="0.0994%" y="309" width="0.1242%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="5"/><text x="0.3494%" y="319.50"></text></g><g><title>std::time::Instant::now (5 samples, 0.12%)</title><rect x="0.0994%" y="293" width="0.1242%" height="15" fill="rgb(240,193,28)" fg:x="4" fg:w="5"/><text x="0.3494%" y="303.50"></text></g><g><title>std::sys::pal::unix::time::Instant::now (5 samples, 0.12%)</title><rect x="0.0994%" y="277" width="0.1242%" height="15" fill="rgb(216,20,37)" fg:x="4" fg:w="5"/><text x="0.3494%" y="287.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (5 samples, 0.12%)</title><rect x="0.0994%" y="261" width="0.1242%" height="15" fill="rgb(206,188,39)" fg:x="4" fg:w="5"/><text x="0.3494%" y="271.50"></text></g><g><title>clock_gettime (4 samples, 0.10%)</title><rect x="0.1242%" y="245" width="0.0994%" height="15" fill="rgb(217,207,13)" fg:x="5" fg:w="4"/><text x="0.3742%" y="255.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.02%)</title><rect x="0.1987%" y="229" width="0.0248%" height="15" fill="rgb(231,73,38)" fg:x="8" fg:w="1"/><text x="0.4487%" y="239.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.02%)</title><rect x="0.2235%" y="325" width="0.0248%" height="15" fill="rgb(225,20,46)" fg:x="9" fg:w="1"/><text x="0.4735%" y="335.50"></text></g><g><title>std::sys::pal::unix::time::Instant::now (1 samples, 0.02%)</title><rect x="0.2235%" y="309" width="0.0248%" height="15" fill="rgb(210,31,41)" fg:x="9" fg:w="1"/><text x="0.4735%" y="319.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.02%)</title><rect x="0.2235%" y="293" width="0.0248%" height="15" fill="rgb(221,200,47)" fg:x="9" fg:w="1"/><text x="0.4735%" y="303.50"></text></g><g><title>clock_gettime (1 samples, 0.02%)</title><rect x="0.2235%" y="277" width="0.0248%" height="15" fill="rgb(226,26,5)" fg:x="9" fg:w="1"/><text x="0.4735%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::start_processing_scheduled_tasks (4 samples, 0.10%)</title><rect x="0.2235%" y="341" width="0.0994%" height="15" fill="rgb(249,33,26)" fg:x="9" fg:w="4"/><text x="0.4735%" y="351.50"></text></g><g><title>tokio::runtime::metrics::batch::MetricsBatch::start_processing_scheduled_tasks (3 samples, 0.07%)</title><rect x="0.2484%" y="325" width="0.0745%" height="15" fill="rgb(235,183,28)" fg:x="10" fg:w="3"/><text x="0.4984%" y="335.50"></text></g><g><title>std::time::Instant::now (3 samples, 0.07%)</title><rect x="0.2484%" y="309" width="0.0745%" height="15" fill="rgb(221,5,38)" fg:x="10" fg:w="3"/><text x="0.4984%" y="319.50"></text></g><g><title>std::sys::pal::unix::time::Instant::now (3 samples, 0.07%)</title><rect x="0.2484%" y="293" width="0.0745%" height="15" fill="rgb(247,18,42)" fg:x="10" fg:w="3"/><text x="0.4984%" y="303.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (3 samples, 0.07%)</title><rect x="0.2484%" y="277" width="0.0745%" height="15" fill="rgb(241,131,45)" fg:x="10" fg:w="3"/><text x="0.4984%" y="287.50"></text></g><g><title>clock_gettime (3 samples, 0.07%)</title><rect x="0.2484%" y="261" width="0.0745%" height="15" fill="rgb(249,31,29)" fg:x="10" fg:w="3"/><text x="0.4984%" y="271.50"></text></g><g><title>__vdso_clock_gettime (3 samples, 0.07%)</title><rect x="0.2484%" y="245" width="0.0745%" height="15" fill="rgb(225,111,53)" fg:x="10" fg:w="3"/><text x="0.4984%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="0.3229%" y="325" width="0.0248%" height="15" fill="rgb(238,160,17)" fg:x="13" fg:w="1"/><text x="0.5729%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (1 samples, 0.02%)</title><rect x="0.3229%" y="309" width="0.0248%" height="15" fill="rgb(214,148,48)" fg:x="13" fg:w="1"/><text x="0.5729%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.02%)</title><rect x="0.3229%" y="293" width="0.0248%" height="15" fill="rgb(232,36,49)" fg:x="13" fg:w="1"/><text x="0.5729%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tokio::runtime::scheduler::multi_thread::park::Parker&gt;&gt; (1 samples, 0.02%)</title><rect x="0.3726%" y="309" width="0.0248%" height="15" fill="rgb(209,103,24)" fg:x="15" fg:w="1"/><text x="0.6226%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_condvar (2 samples, 0.05%)</title><rect x="0.3974%" y="277" width="0.0497%" height="15" fill="rgb(229,88,8)" fg:x="16" fg:w="2"/><text x="0.6474%" y="287.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (2 samples, 0.05%)</title><rect x="0.3974%" y="261" width="0.0497%" height="15" fill="rgb(213,181,19)" fg:x="16" fg:w="2"/><text x="0.6474%" y="271.50"></text></g><g><title>parking_lot::condvar::Condvar::wait (2 samples, 0.05%)</title><rect x="0.3974%" y="245" width="0.0497%" height="15" fill="rgb(254,191,54)" fg:x="16" fg:w="2"/><text x="0.6474%" y="255.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (2 samples, 0.05%)</title><rect x="0.3974%" y="229" width="0.0497%" height="15" fill="rgb(241,83,37)" fg:x="16" fg:w="2"/><text x="0.6474%" y="239.50"></text></g><g><title>parking_lot_core::parking_lot::park (2 samples, 0.05%)</title><rect x="0.3974%" y="213" width="0.0497%" height="15" fill="rgb(233,36,39)" fg:x="16" fg:w="2"/><text x="0.6474%" y="223.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (2 samples, 0.05%)</title><rect x="0.3974%" y="197" width="0.0497%" height="15" fill="rgb(226,3,54)" fg:x="16" fg:w="2"/><text x="0.6474%" y="207.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (2 samples, 0.05%)</title><rect x="0.3974%" y="181" width="0.0497%" height="15" fill="rgb(245,192,40)" fg:x="16" fg:w="2"/><text x="0.6474%" y="191.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (2 samples, 0.05%)</title><rect x="0.3974%" y="165" width="0.0497%" height="15" fill="rgb(238,167,29)" fg:x="16" fg:w="2"/><text x="0.6474%" y="175.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (1 samples, 0.02%)</title><rect x="0.4223%" y="149" width="0.0248%" height="15" fill="rgb(232,182,51)" fg:x="17" fg:w="1"/><text x="0.6723%" y="159.50"></text></g><g><title>syscall (1 samples, 0.02%)</title><rect x="0.4223%" y="133" width="0.0248%" height="15" fill="rgb(231,60,39)" fg:x="17" fg:w="1"/><text x="0.6723%" y="143.50"></text></g><g><title>tokio::runtime::task::core::Header::get_tracing_id (3 samples, 0.07%)</title><rect x="0.4471%" y="165" width="0.0745%" height="15" fill="rgb(208,69,12)" fg:x="18" fg:w="3"/><text x="0.6971%" y="175.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (3 samples, 0.07%)</title><rect x="0.4471%" y="149" width="0.0745%" height="15" fill="rgb(235,93,37)" fg:x="18" fg:w="3"/><text x="0.6971%" y="159.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.02%)</title><rect x="0.5216%" y="69" width="0.0248%" height="15" fill="rgb(213,116,39)" fg:x="21" fg:w="1"/><text x="0.7716%" y="79.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.02%)</title><rect x="0.5216%" y="53" width="0.0248%" height="15" fill="rgb(222,207,29)" fg:x="21" fg:w="1"/><text x="0.7716%" y="63.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.02%)</title><rect x="0.5216%" y="37" width="0.0248%" height="15" fill="rgb(206,96,30)" fg:x="21" fg:w="1"/><text x="0.7716%" y="47.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (7 samples, 0.17%)</title><rect x="0.3974%" y="309" width="0.1739%" height="15" fill="rgb(218,138,4)" fg:x="16" fg:w="7"/><text x="0.6474%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park (7 samples, 0.17%)</title><rect x="0.3974%" y="293" width="0.1739%" height="15" fill="rgb(250,191,14)" fg:x="16" fg:w="7"/><text x="0.6474%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_driver (5 samples, 0.12%)</title><rect x="0.4471%" y="277" width="0.1242%" height="15" fill="rgb(239,60,40)" fg:x="18" fg:w="5"/><text x="0.6971%" y="287.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (5 samples, 0.12%)</title><rect x="0.4471%" y="261" width="0.1242%" height="15" fill="rgb(206,27,48)" fg:x="18" fg:w="5"/><text x="0.6971%" y="271.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (5 samples, 0.12%)</title><rect x="0.4471%" y="245" width="0.1242%" height="15" fill="rgb(225,35,8)" fg:x="18" fg:w="5"/><text x="0.6971%" y="255.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (5 samples, 0.12%)</title><rect x="0.4471%" y="229" width="0.1242%" height="15" fill="rgb(250,213,24)" fg:x="18" fg:w="5"/><text x="0.6971%" y="239.50"></text></g><g><title>tokio::util::wake_list::WakeList::wake_all (5 samples, 0.12%)</title><rect x="0.4471%" y="213" width="0.1242%" height="15" fill="rgb(247,123,22)" fg:x="18" fg:w="5"/><text x="0.6971%" y="223.50"></text></g><g><title>core::task::wake::Waker::wake (5 samples, 0.12%)</title><rect x="0.4471%" y="197" width="0.1242%" height="15" fill="rgb(231,138,38)" fg:x="18" fg:w="5"/><text x="0.6971%" y="207.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (5 samples, 0.12%)</title><rect x="0.4471%" y="181" width="0.1242%" height="15" fill="rgb(231,145,46)" fg:x="18" fg:w="5"/><text x="0.6971%" y="191.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (2 samples, 0.05%)</title><rect x="0.5216%" y="165" width="0.0497%" height="15" fill="rgb(251,118,11)" fg:x="21" fg:w="2"/><text x="0.7716%" y="175.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (2 samples, 0.05%)</title><rect x="0.5216%" y="149" width="0.0497%" height="15" fill="rgb(217,147,25)" fg:x="21" fg:w="2"/><text x="0.7716%" y="159.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (2 samples, 0.05%)</title><rect x="0.5216%" y="133" width="0.0497%" height="15" fill="rgb(247,81,37)" fg:x="21" fg:w="2"/><text x="0.7716%" y="143.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::with_current (2 samples, 0.05%)</title><rect x="0.5216%" y="117" width="0.0497%" height="15" fill="rgb(209,12,38)" fg:x="21" fg:w="2"/><text x="0.7716%" y="127.50"></text></g><g><title>tokio::runtime::context::with_scheduler (2 samples, 0.05%)</title><rect x="0.5216%" y="101" width="0.0497%" height="15" fill="rgb(227,1,9)" fg:x="21" fg:w="2"/><text x="0.7716%" y="111.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::_{{closure}} (2 samples, 0.05%)</title><rect x="0.5216%" y="85" width="0.0497%" height="15" fill="rgb(248,47,43)" fg:x="21" fg:w="2"/><text x="0.7716%" y="95.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (1 samples, 0.02%)</title><rect x="0.5464%" y="69" width="0.0248%" height="15" fill="rgb(221,10,30)" fg:x="22" fg:w="1"/><text x="0.7964%" y="79.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Local&lt;T&gt;::push_back_or_overflow (1 samples, 0.02%)</title><rect x="0.5464%" y="53" width="0.0248%" height="15" fill="rgb(210,229,1)" fg:x="22" fg:w="1"/><text x="0.7964%" y="63.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (10 samples, 0.25%)</title><rect x="0.3477%" y="325" width="0.2484%" height="15" fill="rgb(222,148,37)" fg:x="14" fg:w="10"/><text x="0.5977%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::should_notify_others (1 samples, 0.02%)</title><rect x="0.5713%" y="309" width="0.0248%" height="15" fill="rgb(234,67,33)" fg:x="23" fg:w="1"/><text x="0.8213%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park (12 samples, 0.30%)</title><rect x="0.3229%" y="341" width="0.2981%" height="15" fill="rgb(247,98,35)" fg:x="13" fg:w="12"/><text x="0.5729%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_to_parked (1 samples, 0.02%)</title><rect x="0.5961%" y="325" width="0.0248%" height="15" fill="rgb(247,138,52)" fg:x="24" fg:w="1"/><text x="0.8461%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::transition_worker_to_parked (1 samples, 0.02%)</title><rect x="0.5961%" y="309" width="0.0248%" height="15" fill="rgb(213,79,30)" fg:x="24" fg:w="1"/><text x="0.8461%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (1 samples, 0.02%)</title><rect x="0.5961%" y="293" width="0.0248%" height="15" fill="rgb(246,177,23)" fg:x="24" fg:w="1"/><text x="0.8461%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (1 samples, 0.02%)</title><rect x="0.5961%" y="277" width="0.0248%" height="15" fill="rgb(230,62,27)" fg:x="24" fg:w="1"/><text x="0.8461%" y="287.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="0.5961%" y="261" width="0.0248%" height="15" fill="rgb(216,154,8)" fg:x="24" fg:w="1"/><text x="0.8461%" y="271.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (1 samples, 0.02%)</title><rect x="0.5961%" y="245" width="0.0248%" height="15" fill="rgb(244,35,45)" fg:x="24" fg:w="1"/><text x="0.8461%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (1 samples, 0.02%)</title><rect x="0.5961%" y="229" width="0.0248%" height="15" fill="rgb(251,115,12)" fg:x="24" fg:w="1"/><text x="0.8461%" y="239.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.02%)</title><rect x="0.6210%" y="277" width="0.0248%" height="15" fill="rgb(240,54,50)" fg:x="25" fg:w="1"/><text x="0.8710%" y="287.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.02%)</title><rect x="0.6210%" y="261" width="0.0248%" height="15" fill="rgb(233,84,52)" fg:x="25" fg:w="1"/><text x="0.8710%" y="271.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.02%)</title><rect x="0.6210%" y="245" width="0.0248%" height="15" fill="rgb(207,117,47)" fg:x="25" fg:w="1"/><text x="0.8710%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::reset_lifo_enabled (2 samples, 0.05%)</title><rect x="0.6458%" y="277" width="0.0497%" height="15" fill="rgb(249,43,39)" fg:x="26" fg:w="2"/><text x="0.8958%" y="287.50"></text></g><g><title>tokio::runtime::coop::budget (6 samples, 0.15%)</title><rect x="0.6210%" y="325" width="0.1490%" height="15" fill="rgb(209,38,44)" fg:x="25" fg:w="6"/><text x="0.8710%" y="335.50"></text></g><g><title>tokio::runtime::coop::with_budget (6 samples, 0.15%)</title><rect x="0.6210%" y="309" width="0.1490%" height="15" fill="rgb(236,212,23)" fg:x="25" fg:w="6"/><text x="0.8710%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::_{{closure}} (6 samples, 0.15%)</title><rect x="0.6210%" y="293" width="0.1490%" height="15" fill="rgb(242,79,21)" fg:x="25" fg:w="6"/><text x="0.8710%" y="303.50"></text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (3 samples, 0.07%)</title><rect x="0.6955%" y="277" width="0.0745%" height="15" fill="rgb(211,96,35)" fg:x="28" fg:w="3"/><text x="0.9455%" y="287.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (3 samples, 0.07%)</title><rect x="0.6955%" y="261" width="0.0745%" height="15" fill="rgb(253,215,40)" fg:x="28" fg:w="3"/><text x="0.9455%" y="271.50"></text></g><g><title>tokio::runtime::task::raw::poll (3 samples, 0.07%)</title><rect x="0.6955%" y="245" width="0.0745%" height="15" fill="rgb(211,81,21)" fg:x="28" fg:w="3"/><text x="0.9455%" y="255.50"></text></g><g><title>parking_lot_core::parking_lot::get_hashtable (1 samples, 0.02%)</title><rect x="0.7700%" y="245" width="0.0248%" height="15" fill="rgb(208,190,38)" fg:x="31" fg:w="1"/><text x="1.0200%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (8 samples, 0.20%)</title><rect x="0.6210%" y="341" width="0.1987%" height="15" fill="rgb(235,213,38)" fg:x="25" fg:w="8"/><text x="0.8710%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_from_searching (2 samples, 0.05%)</title><rect x="0.7700%" y="325" width="0.0497%" height="15" fill="rgb(237,122,38)" fg:x="31" fg:w="2"/><text x="1.0200%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::transition_worker_from_searching (2 samples, 0.05%)</title><rect x="0.7700%" y="309" width="0.0497%" height="15" fill="rgb(244,218,35)" fg:x="31" fg:w="2"/><text x="1.0200%" y="319.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (2 samples, 0.05%)</title><rect x="0.7700%" y="293" width="0.0497%" height="15" fill="rgb(240,68,47)" fg:x="31" fg:w="2"/><text x="1.0200%" y="303.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (2 samples, 0.05%)</title><rect x="0.7700%" y="277" width="0.0497%" height="15" fill="rgb(210,16,53)" fg:x="31" fg:w="2"/><text x="1.0200%" y="287.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (2 samples, 0.05%)</title><rect x="0.7700%" y="261" width="0.0497%" height="15" fill="rgb(235,124,12)" fg:x="31" fg:w="2"/><text x="1.0200%" y="271.50"></text></g><g><title>parking_lot_core::parking_lot::hash (1 samples, 0.02%)</title><rect x="0.7948%" y="245" width="0.0248%" height="15" fill="rgb(224,169,11)" fg:x="32" fg:w="1"/><text x="1.0448%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_task (1 samples, 0.02%)</title><rect x="0.8197%" y="341" width="0.0248%" height="15" fill="rgb(250,166,2)" fg:x="33" fg:w="1"/><text x="1.0697%" y="351.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="0.8693%" y="309" width="0.0248%" height="15" fill="rgb(242,216,29)" fg:x="35" fg:w="1"/><text x="1.1193%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (1 samples, 0.02%)</title><rect x="0.8693%" y="293" width="0.0248%" height="15" fill="rgb(230,116,27)" fg:x="35" fg:w="1"/><text x="1.1193%" y="303.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.02%)</title><rect x="0.8693%" y="277" width="0.0248%" height="15" fill="rgb(228,99,48)" fg:x="35" fg:w="1"/><text x="1.1193%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicU64::compare_exchange (1 samples, 0.02%)</title><rect x="0.9190%" y="293" width="0.0248%" height="15" fill="rgb(253,11,6)" fg:x="37" fg:w="1"/><text x="1.1690%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.02%)</title><rect x="0.9190%" y="277" width="0.0248%" height="15" fill="rgb(247,143,39)" fg:x="37" fg:w="1"/><text x="1.1690%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicU64::load (1 samples, 0.02%)</title><rect x="0.9439%" y="293" width="0.0248%" height="15" fill="rgb(236,97,10)" fg:x="38" fg:w="1"/><text x="1.1939%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="0.9439%" y="277" width="0.0248%" height="15" fill="rgb(233,208,19)" fg:x="38" fg:w="1"/><text x="1.1939%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into2 (4 samples, 0.10%)</title><rect x="0.8942%" y="309" width="0.0994%" height="15" fill="rgb(216,164,2)" fg:x="36" fg:w="4"/><text x="1.1442%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::unpack (1 samples, 0.02%)</title><rect x="0.9687%" y="293" width="0.0248%" height="15" fill="rgb(220,129,5)" fg:x="39" fg:w="1"/><text x="1.2187%" y="303.50"></text></g><g><title>[libc.so.6] (40 samples, 0.99%)</title><rect x="0.0248%" y="1029" width="0.9935%" height="15" fill="rgb(242,17,10)" fg:x="1" fg:w="40"/><text x="0.2748%" y="1039.50"></text></g><g><title>[libc.so.6] (40 samples, 0.99%)</title><rect x="0.0248%" y="1013" width="0.9935%" height="15" fill="rgb(242,107,0)" fg:x="1" fg:w="40"/><text x="0.2748%" y="1023.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (40 samples, 0.99%)</title><rect x="0.0248%" y="997" width="0.9935%" height="15" fill="rgb(251,28,31)" fg:x="1" fg:w="40"/><text x="0.2748%" y="1007.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (40 samples, 0.99%)</title><rect x="0.0248%" y="981" width="0.9935%" height="15" fill="rgb(233,223,10)" fg:x="1" fg:w="40"/><text x="0.2748%" y="991.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (40 samples, 0.99%)</title><rect x="0.0248%" y="965" width="0.9935%" height="15" fill="rgb(215,21,27)" fg:x="1" fg:w="40"/><text x="0.2748%" y="975.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (40 samples, 0.99%)</title><rect x="0.0248%" y="949" width="0.9935%" height="15" fill="rgb(232,23,21)" fg:x="1" fg:w="40"/><text x="0.2748%" y="959.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (40 samples, 0.99%)</title><rect x="0.0248%" y="933" width="0.9935%" height="15" fill="rgb(244,5,23)" fg:x="1" fg:w="40"/><text x="0.2748%" y="943.50"></text></g><g><title>std::panic::catch_unwind (40 samples, 0.99%)</title><rect x="0.0248%" y="917" width="0.9935%" height="15" fill="rgb(226,81,46)" fg:x="1" fg:w="40"/><text x="0.2748%" y="927.50"></text></g><g><title>std::panicking::try (40 samples, 0.99%)</title><rect x="0.0248%" y="901" width="0.9935%" height="15" fill="rgb(247,70,30)" fg:x="1" fg:w="40"/><text x="0.2748%" y="911.50"></text></g><g><title>std::panicking::try::do_call (40 samples, 0.99%)</title><rect x="0.0248%" y="885" width="0.9935%" height="15" fill="rgb(212,68,19)" fg:x="1" fg:w="40"/><text x="0.2748%" y="895.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (40 samples, 0.99%)</title><rect x="0.0248%" y="869" width="0.9935%" height="15" fill="rgb(240,187,13)" fg:x="1" fg:w="40"/><text x="0.2748%" y="879.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (40 samples, 0.99%)</title><rect x="0.0248%" y="853" width="0.9935%" height="15" fill="rgb(223,113,26)" fg:x="1" fg:w="40"/><text x="0.2748%" y="863.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (40 samples, 0.99%)</title><rect x="0.0248%" y="837" width="0.9935%" height="15" fill="rgb(206,192,2)" fg:x="1" fg:w="40"/><text x="0.2748%" y="847.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::_{{closure}} (40 samples, 0.99%)</title><rect x="0.0248%" y="821" width="0.9935%" height="15" fill="rgb(241,108,4)" fg:x="1" fg:w="40"/><text x="0.2748%" y="831.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (40 samples, 0.99%)</title><rect x="0.0248%" y="805" width="0.9935%" height="15" fill="rgb(247,173,49)" fg:x="1" fg:w="40"/><text x="0.2748%" y="815.50"></text></g><g><title>tokio::runtime::blocking::pool::Task::run (40 samples, 0.99%)</title><rect x="0.0248%" y="789" width="0.9935%" height="15" fill="rgb(224,114,35)" fg:x="1" fg:w="40"/><text x="0.2748%" y="799.50"></text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (40 samples, 0.99%)</title><rect x="0.0248%" y="773" width="0.9935%" height="15" fill="rgb(245,159,27)" fg:x="1" fg:w="40"/><text x="0.2748%" y="783.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (40 samples, 0.99%)</title><rect x="0.0248%" y="757" width="0.9935%" height="15" fill="rgb(245,172,44)" fg:x="1" fg:w="40"/><text x="0.2748%" y="767.50"></text></g><g><title>tokio::runtime::task::raw::poll (40 samples, 0.99%)</title><rect x="0.0248%" y="741" width="0.9935%" height="15" fill="rgb(236,23,11)" fg:x="1" fg:w="40"/><text x="0.2748%" y="751.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (40 samples, 0.99%)</title><rect x="0.0248%" y="725" width="0.9935%" height="15" fill="rgb(205,117,38)" fg:x="1" fg:w="40"/><text x="0.2748%" y="735.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (40 samples, 0.99%)</title><rect x="0.0248%" y="709" width="0.9935%" height="15" fill="rgb(237,72,25)" fg:x="1" fg:w="40"/><text x="0.2748%" y="719.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (40 samples, 0.99%)</title><rect x="0.0248%" y="693" width="0.9935%" height="15" fill="rgb(244,70,9)" fg:x="1" fg:w="40"/><text x="0.2748%" y="703.50"></text></g><g><title>std::panic::catch_unwind (40 samples, 0.99%)</title><rect x="0.0248%" y="677" width="0.9935%" height="15" fill="rgb(217,125,39)" fg:x="1" fg:w="40"/><text x="0.2748%" y="687.50"></text></g><g><title>std::panicking::try (40 samples, 0.99%)</title><rect x="0.0248%" y="661" width="0.9935%" height="15" fill="rgb(235,36,10)" fg:x="1" fg:w="40"/><text x="0.2748%" y="671.50"></text></g><g><title>std::panicking::try::do_call (40 samples, 0.99%)</title><rect x="0.0248%" y="645" width="0.9935%" height="15" fill="rgb(251,123,47)" fg:x="1" fg:w="40"/><text x="0.2748%" y="655.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (40 samples, 0.99%)</title><rect x="0.0248%" y="629" width="0.9935%" height="15" fill="rgb(221,13,13)" fg:x="1" fg:w="40"/><text x="0.2748%" y="639.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (40 samples, 0.99%)</title><rect x="0.0248%" y="613" width="0.9935%" height="15" fill="rgb(238,131,9)" fg:x="1" fg:w="40"/><text x="0.2748%" y="623.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (40 samples, 0.99%)</title><rect x="0.0248%" y="597" width="0.9935%" height="15" fill="rgb(211,50,8)" fg:x="1" fg:w="40"/><text x="0.2748%" y="607.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (40 samples, 0.99%)</title><rect x="0.0248%" y="581" width="0.9935%" height="15" fill="rgb(245,182,24)" fg:x="1" fg:w="40"/><text x="0.2748%" y="591.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (40 samples, 0.99%)</title><rect x="0.0248%" y="565" width="0.9935%" height="15" fill="rgb(242,14,37)" fg:x="1" fg:w="40"/><text x="0.2748%" y="575.50"></text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (40 samples, 0.99%)</title><rect x="0.0248%" y="549" width="0.9935%" height="15" fill="rgb(246,228,12)" fg:x="1" fg:w="40"/><text x="0.2748%" y="559.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (40 samples, 0.99%)</title><rect x="0.0248%" y="533" width="0.9935%" height="15" fill="rgb(213,55,15)" fg:x="1" fg:w="40"/><text x="0.2748%" y="543.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::_{{closure}} (40 samples, 0.99%)</title><rect x="0.0248%" y="517" width="0.9935%" height="15" fill="rgb(209,9,3)" fg:x="1" fg:w="40"/><text x="0.2748%" y="527.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (40 samples, 0.99%)</title><rect x="0.0248%" y="501" width="0.9935%" height="15" fill="rgb(230,59,30)" fg:x="1" fg:w="40"/><text x="0.2748%" y="511.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (40 samples, 0.99%)</title><rect x="0.0248%" y="485" width="0.9935%" height="15" fill="rgb(209,121,21)" fg:x="1" fg:w="40"/><text x="0.2748%" y="495.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}} (40 samples, 0.99%)</title><rect x="0.0248%" y="469" width="0.9935%" height="15" fill="rgb(220,109,13)" fg:x="1" fg:w="40"/><text x="0.2748%" y="479.50"></text></g><g><title>tokio::runtime::context::set_scheduler (40 samples, 0.99%)</title><rect x="0.0248%" y="453" width="0.9935%" height="15" fill="rgb(232,18,1)" fg:x="1" fg:w="40"/><text x="0.2748%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (40 samples, 0.99%)</title><rect x="0.0248%" y="437" width="0.9935%" height="15" fill="rgb(215,41,42)" fg:x="1" fg:w="40"/><text x="0.2748%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (40 samples, 0.99%)</title><rect x="0.0248%" y="421" width="0.9935%" height="15" fill="rgb(224,123,36)" fg:x="1" fg:w="40"/><text x="0.2748%" y="431.50"></text></g><g><title>tokio::runtime::context::set_scheduler::_{{closure}} (40 samples, 0.99%)</title><rect x="0.0248%" y="405" width="0.9935%" height="15" fill="rgb(240,125,3)" fg:x="1" fg:w="40"/><text x="0.2748%" y="415.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (40 samples, 0.99%)</title><rect x="0.0248%" y="389" width="0.9935%" height="15" fill="rgb(205,98,50)" fg:x="1" fg:w="40"/><text x="0.2748%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}::_{{closure}} (40 samples, 0.99%)</title><rect x="0.0248%" y="373" width="0.9935%" height="15" fill="rgb(205,185,37)" fg:x="1" fg:w="40"/><text x="0.2748%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (40 samples, 0.99%)</title><rect x="0.0248%" y="357" width="0.9935%" height="15" fill="rgb(238,207,15)" fg:x="1" fg:w="40"/><text x="0.2748%" y="367.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::steal_work (7 samples, 0.17%)</title><rect x="0.8445%" y="341" width="0.1739%" height="15" fill="rgb(213,199,42)" fg:x="34" fg:w="7"/><text x="1.0945%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (6 samples, 0.15%)</title><rect x="0.8693%" y="325" width="0.1490%" height="15" fill="rgb(235,201,11)" fg:x="35" fg:w="6"/><text x="1.1193%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::incr_steal_count (1 samples, 0.02%)</title><rect x="0.9935%" y="309" width="0.0248%" height="15" fill="rgb(207,46,11)" fg:x="40" fg:w="1"/><text x="1.2435%" y="319.50"></text></g><g><title>tokio::runtime::metrics::batch::MetricsBatch::incr_steal_count (1 samples, 0.02%)</title><rect x="0.9935%" y="293" width="0.0248%" height="15" fill="rgb(241,35,35)" fg:x="40" fg:w="1"/><text x="1.2435%" y="303.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.02%)</title><rect x="1.0184%" y="1029" width="0.0248%" height="15" fill="rgb(243,32,47)" fg:x="41" fg:w="1"/><text x="1.2684%" y="1039.50"></text></g><g><title>_mi_heap_malloc_zero (1 samples, 0.02%)</title><rect x="1.0184%" y="1013" width="0.0248%" height="15" fill="rgb(247,202,23)" fg:x="41" fg:w="1"/><text x="1.2684%" y="1023.50"></text></g><g><title>_mi_heap_malloc_zero_ex (1 samples, 0.02%)</title><rect x="1.0184%" y="997" width="0.0248%" height="15" fill="rgb(219,102,11)" fg:x="41" fg:w="1"/><text x="1.2684%" y="1007.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.02%)</title><rect x="1.0184%" y="981" width="0.0248%" height="15" fill="rgb(243,110,44)" fg:x="41" fg:w="1"/><text x="1.2684%" y="991.50"></text></g><g><title>[libc.so.6] (6 samples, 0.15%)</title><rect x="1.0681%" y="1013" width="0.1490%" height="15" fill="rgb(222,74,54)" fg:x="43" fg:w="6"/><text x="1.3181%" y="1023.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="1.5152%" y="869" width="0.0248%" height="15" fill="rgb(216,99,12)" fg:x="61" fg:w="1"/><text x="1.7652%" y="879.50"></text></g><g><title>futures_task::noop_waker::noop_clone (1 samples, 0.02%)</title><rect x="1.5152%" y="853" width="0.0248%" height="15" fill="rgb(226,22,26)" fg:x="61" fg:w="1"/><text x="1.7652%" y="863.50"></text></g><g><title>&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (2 samples, 0.05%)</title><rect x="1.5152%" y="997" width="0.0497%" height="15" fill="rgb(217,163,10)" fg:x="61" fg:w="2"/><text x="1.7652%" y="1007.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 0.05%)</title><rect x="1.5152%" y="981" width="0.0497%" height="15" fill="rgb(213,25,53)" fg:x="61" fg:w="2"/><text x="1.7652%" y="991.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 0.05%)</title><rect x="1.5152%" y="965" width="0.0497%" height="15" fill="rgb(252,105,26)" fg:x="61" fg:w="2"/><text x="1.7652%" y="975.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (2 samples, 0.05%)</title><rect x="1.5152%" y="949" width="0.0497%" height="15" fill="rgb(220,39,43)" fg:x="61" fg:w="2"/><text x="1.7652%" y="959.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (2 samples, 0.05%)</title><rect x="1.5152%" y="933" width="0.0497%" height="15" fill="rgb(229,68,48)" fg:x="61" fg:w="2"/><text x="1.7652%" y="943.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_read_ready (2 samples, 0.05%)</title><rect x="1.5152%" y="917" width="0.0497%" height="15" fill="rgb(252,8,32)" fg:x="61" fg:w="2"/><text x="1.7652%" y="927.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (2 samples, 0.05%)</title><rect x="1.5152%" y="901" width="0.0497%" height="15" fill="rgb(223,20,43)" fg:x="61" fg:w="2"/><text x="1.7652%" y="911.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (2 samples, 0.05%)</title><rect x="1.5152%" y="885" width="0.0497%" height="15" fill="rgb(229,81,49)" fg:x="61" fg:w="2"/><text x="1.7652%" y="895.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (1 samples, 0.02%)</title><rect x="1.5400%" y="869" width="0.0248%" height="15" fill="rgb(236,28,36)" fg:x="62" fg:w="1"/><text x="1.7900%" y="879.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (1 samples, 0.02%)</title><rect x="1.5400%" y="853" width="0.0248%" height="15" fill="rgb(249,185,26)" fg:x="62" fg:w="1"/><text x="1.7900%" y="863.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (1 samples, 0.02%)</title><rect x="1.5400%" y="837" width="0.0248%" height="15" fill="rgb(249,174,33)" fg:x="62" fg:w="1"/><text x="1.7900%" y="847.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (1 samples, 0.02%)</title><rect x="1.5400%" y="821" width="0.0248%" height="15" fill="rgb(233,201,37)" fg:x="62" fg:w="1"/><text x="1.7900%" y="831.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (1 samples, 0.02%)</title><rect x="1.5400%" y="805" width="0.0248%" height="15" fill="rgb(221,78,26)" fg:x="62" fg:w="1"/><text x="1.7900%" y="815.50"></text></g><g><title>&lt;tracing_core::metadata::Level as core::cmp::PartialOrd&lt;tracing_core::metadata::LevelFilter&gt;&gt;::le (1 samples, 0.02%)</title><rect x="1.5648%" y="997" width="0.0248%" height="15" fill="rgb(250,127,30)" fg:x="63" fg:w="1"/><text x="1.8148%" y="1007.50"></text></g><g><title>[libc.so.6] (154 samples, 3.83%)</title><rect x="1.5897%" y="997" width="3.8251%" height="15" fill="rgb(230,49,44)" fg:x="64" fg:w="154"/><text x="1.8397%" y="1007.50">[lib..</text></g><g><title>[libc.so.6] (72 samples, 1.79%)</title><rect x="5.6135%" y="981" width="1.7884%" height="15" fill="rgb(229,67,23)" fg:x="226" fg:w="72"/><text x="5.8635%" y="991.50">[..</text></g><g><title>core::ptr::drop_in_place&lt;rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}::{{closure}}&gt; (1 samples, 0.02%)</title><rect x="7.4019%" y="981" width="0.0248%" height="15" fill="rgb(249,83,47)" fg:x="298" fg:w="1"/><text x="7.6519%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::Span&gt; (2 samples, 0.05%)</title><rect x="7.4267%" y="981" width="0.0497%" height="15" fill="rgb(215,43,3)" fg:x="299" fg:w="2"/><text x="7.6767%" y="991.50"></text></g><g><title>&lt;tracing::span::Span as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="7.4267%" y="965" width="0.0497%" height="15" fill="rgb(238,154,13)" fg:x="299" fg:w="2"/><text x="7.6767%" y="975.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (1 samples, 0.02%)</title><rect x="10.5315%" y="869" width="0.0248%" height="15" fill="rgb(219,56,2)" fg:x="424" fg:w="1"/><text x="10.7815%" y="879.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (1 samples, 0.02%)</title><rect x="10.5315%" y="853" width="0.0248%" height="15" fill="rgb(233,0,4)" fg:x="424" fg:w="1"/><text x="10.7815%" y="863.50"></text></g><g><title>mio::sys::unix::stateless_io_source::IoSourceState::do_io (1 samples, 0.02%)</title><rect x="10.5315%" y="837" width="0.0248%" height="15" fill="rgb(235,30,7)" fg:x="424" fg:w="1"/><text x="10.7815%" y="847.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::_{{closure}} (1 samples, 0.02%)</title><rect x="10.5315%" y="821" width="0.0248%" height="15" fill="rgb(250,79,13)" fg:x="424" fg:w="1"/><text x="10.7815%" y="831.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (1 samples, 0.02%)</title><rect x="10.5315%" y="805" width="0.0248%" height="15" fill="rgb(211,146,34)" fg:x="424" fg:w="1"/><text x="10.7815%" y="815.50"></text></g><g><title>std::sys_common::net::TcpStream::read (1 samples, 0.02%)</title><rect x="10.5315%" y="789" width="0.0248%" height="15" fill="rgb(228,22,38)" fg:x="424" fg:w="1"/><text x="10.7815%" y="799.50"></text></g><g><title>std::sys::pal::unix::net::Socket::read (1 samples, 0.02%)</title><rect x="10.5315%" y="773" width="0.0248%" height="15" fill="rgb(235,168,5)" fg:x="424" fg:w="1"/><text x="10.7815%" y="783.50"></text></g><g><title>std::sys::pal::unix::net::Socket::recv_with_flags (1 samples, 0.02%)</title><rect x="10.5315%" y="757" width="0.0248%" height="15" fill="rgb(221,155,16)" fg:x="424" fg:w="1"/><text x="10.7815%" y="767.50"></text></g><g><title>recv (1 samples, 0.02%)</title><rect x="10.5315%" y="741" width="0.0248%" height="15" fill="rgb(215,215,53)" fg:x="424" fg:w="1"/><text x="10.7815%" y="751.50"></text></g><g><title>&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (2 samples, 0.05%)</title><rect x="10.5315%" y="949" width="0.0497%" height="15" fill="rgb(223,4,10)" fg:x="424" fg:w="2"/><text x="10.7815%" y="959.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 0.05%)</title><rect x="10.5315%" y="933" width="0.0497%" height="15" fill="rgb(234,103,6)" fg:x="424" fg:w="2"/><text x="10.7815%" y="943.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 0.05%)</title><rect x="10.5315%" y="917" width="0.0497%" height="15" fill="rgb(227,97,0)" fg:x="424" fg:w="2"/><text x="10.7815%" y="927.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (2 samples, 0.05%)</title><rect x="10.5315%" y="901" width="0.0497%" height="15" fill="rgb(234,150,53)" fg:x="424" fg:w="2"/><text x="10.7815%" y="911.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (2 samples, 0.05%)</title><rect x="10.5315%" y="885" width="0.0497%" height="15" fill="rgb(228,201,54)" fg:x="424" fg:w="2"/><text x="10.7815%" y="895.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_read_ready (1 samples, 0.02%)</title><rect x="10.5564%" y="869" width="0.0248%" height="15" fill="rgb(222,22,37)" fg:x="425" fg:w="1"/><text x="10.8064%" y="879.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.02%)</title><rect x="10.5564%" y="853" width="0.0248%" height="15" fill="rgb(237,53,32)" fg:x="425" fg:w="1"/><text x="10.8064%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::{{closure}}::{{closure}}::{{closure}}::_decode_async&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}&gt; (4 samples, 0.10%)</title><rect x="10.5812%" y="949" width="0.0994%" height="15" fill="rgb(233,25,53)" fg:x="426" fg:w="4"/><text x="10.8312%" y="959.50"></text></g><g><title>bytes::bytes_mut::BytesMut::kind (1 samples, 0.02%)</title><rect x="18.0576%" y="869" width="0.0248%" height="15" fill="rgb(210,40,34)" fg:x="727" fg:w="1"/><text x="18.3076%" y="879.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (3 samples, 0.07%)</title><rect x="18.0328%" y="885" width="0.0745%" height="15" fill="rgb(241,220,44)" fg:x="726" fg:w="3"/><text x="18.2828%" y="895.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (1 samples, 0.02%)</title><rect x="18.0825%" y="869" width="0.0248%" height="15" fill="rgb(235,28,35)" fg:x="728" fg:w="1"/><text x="18.3325%" y="879.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (8 samples, 0.20%)</title><rect x="18.0079%" y="901" width="0.1987%" height="15" fill="rgb(210,56,17)" fg:x="725" fg:w="8"/><text x="18.2579%" y="911.50"></text></g><g><title>core::fmt::Arguments::new_v1 (4 samples, 0.10%)</title><rect x="18.1073%" y="885" width="0.0994%" height="15" fill="rgb(224,130,29)" fg:x="729" fg:w="4"/><text x="18.3573%" y="895.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.10%)</title><rect x="18.2067%" y="901" width="0.0994%" height="15" fill="rgb(235,212,8)" fg:x="733" fg:w="4"/><text x="18.4567%" y="911.50"></text></g><g><title>[libc.so.6] (49 samples, 1.22%)</title><rect x="18.3060%" y="901" width="1.2171%" height="15" fill="rgb(223,33,50)" fg:x="737" fg:w="49"/><text x="18.5560%" y="911.50"></text></g><g><title>bytes::bytes::Bytes::with_vtable (13 samples, 0.32%)</title><rect x="19.7715%" y="885" width="0.3229%" height="15" fill="rgb(219,149,13)" fg:x="796" fg:w="13"/><text x="20.0215%" y="895.50"></text></g><g><title>bytes::bytes_mut::BytesMut::freeze (28 samples, 0.70%)</title><rect x="19.5231%" y="901" width="0.6955%" height="15" fill="rgb(250,156,29)" fg:x="786" fg:w="28"/><text x="19.7731%" y="911.50"></text></g><g><title>bytes::bytes_mut::BytesMut::kind (5 samples, 0.12%)</title><rect x="20.0944%" y="885" width="0.1242%" height="15" fill="rgb(216,193,19)" fg:x="809" fg:w="5"/><text x="20.3444%" y="895.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (3 samples, 0.07%)</title><rect x="20.4173%" y="869" width="0.0745%" height="15" fill="rgb(216,135,14)" fg:x="822" fg:w="3"/><text x="20.6673%" y="879.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (5 samples, 0.12%)</title><rect x="20.4173%" y="885" width="0.1242%" height="15" fill="rgb(241,47,5)" fg:x="822" fg:w="5"/><text x="20.6673%" y="895.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.05%)</title><rect x="20.4918%" y="869" width="0.0497%" height="15" fill="rgb(233,42,35)" fg:x="825" fg:w="2"/><text x="20.7418%" y="879.50"></text></g><g><title>_mi_page_malloc (5 samples, 0.12%)</title><rect x="20.5415%" y="741" width="0.1242%" height="15" fill="rgb(231,13,6)" fg:x="827" fg:w="5"/><text x="20.7915%" y="751.50"></text></g><g><title>_mi_page_malloc_zero (5 samples, 0.12%)</title><rect x="20.5415%" y="725" width="0.1242%" height="15" fill="rgb(207,181,40)" fg:x="827" fg:w="5"/><text x="20.7915%" y="735.50"></text></g><g><title>bytes::bytes_mut::BytesMut::promote_to_shared (6 samples, 0.15%)</title><rect x="20.5415%" y="869" width="0.1490%" height="15" fill="rgb(254,173,49)" fg:x="827" fg:w="6"/><text x="20.7915%" y="879.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (6 samples, 0.15%)</title><rect x="20.5415%" y="853" width="0.1490%" height="15" fill="rgb(221,1,38)" fg:x="827" fg:w="6"/><text x="20.7915%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (6 samples, 0.15%)</title><rect x="20.5415%" y="837" width="0.1490%" height="15" fill="rgb(206,124,46)" fg:x="827" fg:w="6"/><text x="20.7915%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.15%)</title><rect x="20.5415%" y="821" width="0.1490%" height="15" fill="rgb(249,21,11)" fg:x="827" fg:w="6"/><text x="20.7915%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.15%)</title><rect x="20.5415%" y="805" width="0.1490%" height="15" fill="rgb(222,201,40)" fg:x="827" fg:w="6"/><text x="20.7915%" y="815.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.15%)</title><rect x="20.5415%" y="789" width="0.1490%" height="15" fill="rgb(235,61,29)" fg:x="827" fg:w="6"/><text x="20.7915%" y="799.50"></text></g><g><title>__rust_alloc (6 samples, 0.15%)</title><rect x="20.5415%" y="773" width="0.1490%" height="15" fill="rgb(219,207,3)" fg:x="827" fg:w="6"/><text x="20.7915%" y="783.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (6 samples, 0.15%)</title><rect x="20.5415%" y="757" width="0.1490%" height="15" fill="rgb(222,56,46)" fg:x="827" fg:w="6"/><text x="20.7915%" y="767.50"></text></g><g><title>mi_heap_malloc_aligned_at (1 samples, 0.02%)</title><rect x="20.6657%" y="741" width="0.0248%" height="15" fill="rgb(239,76,54)" fg:x="832" fg:w="1"/><text x="20.9157%" y="751.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at (1 samples, 0.02%)</title><rect x="20.6657%" y="725" width="0.0248%" height="15" fill="rgb(231,124,27)" fg:x="832" fg:w="1"/><text x="20.9157%" y="735.50"></text></g><g><title>bytes::bytes_mut::increment_shared (45 samples, 1.12%)</title><rect x="20.6905%" y="869" width="1.1177%" height="15" fill="rgb(249,195,6)" fg:x="833" fg:w="45"/><text x="20.9405%" y="879.50"></text></g><g><title>bytes::bytes_mut::BytesMut::shallow_clone (53 samples, 1.32%)</title><rect x="20.5415%" y="885" width="1.3164%" height="15" fill="rgb(237,174,47)" fg:x="827" fg:w="53"/><text x="20.7915%" y="895.50"></text></g><g><title>core::ptr::read (2 samples, 0.05%)</title><rect x="21.8082%" y="869" width="0.0497%" height="15" fill="rgb(206,201,31)" fg:x="878" fg:w="2"/><text x="22.0582%" y="879.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (72 samples, 1.79%)</title><rect x="20.2186%" y="901" width="1.7884%" height="15" fill="rgb(231,57,52)" fg:x="814" fg:w="72"/><text x="20.4686%" y="911.50">b..</text></g><g><title>core::fmt::Arguments::new_v1 (6 samples, 0.15%)</title><rect x="21.8579%" y="885" width="0.1490%" height="15" fill="rgb(248,177,22)" fg:x="880" fg:w="6"/><text x="22.1079%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::BytesMut&gt; (49 samples, 1.22%)</title><rect x="22.0070%" y="901" width="1.2171%" height="15" fill="rgb(215,211,37)" fg:x="886" fg:w="49"/><text x="22.2570%" y="911.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (46 samples, 1.14%)</title><rect x="22.0815%" y="885" width="1.1426%" height="15" fill="rgb(241,128,51)" fg:x="889" fg:w="46"/><text x="22.3315%" y="895.50"></text></g><g><title>bytes::bytes_mut::release_shared (39 samples, 0.97%)</title><rect x="22.2553%" y="869" width="0.9687%" height="15" fill="rgb(227,165,31)" fg:x="896" fg:w="39"/><text x="22.5053%" y="879.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.05%)</title><rect x="23.2240%" y="901" width="0.0497%" height="15" fill="rgb(228,167,24)" fg:x="935" fg:w="2"/><text x="23.4740%" y="911.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.02%)</title><rect x="24.9131%" y="661" width="0.0248%" height="15" fill="rgb(228,143,12)" fg:x="1003" fg:w="1"/><text x="25.1631%" y="671.50"></text></g><g><title>_mi_page_malloc_zero (1 samples, 0.02%)</title><rect x="24.9131%" y="645" width="0.0248%" height="15" fill="rgb(249,149,8)" fg:x="1003" fg:w="1"/><text x="25.1631%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.05%)</title><rect x="24.9131%" y="805" width="0.0497%" height="15" fill="rgb(243,35,44)" fg:x="1003" fg:w="2"/><text x="25.1631%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.05%)</title><rect x="24.9131%" y="789" width="0.0497%" height="15" fill="rgb(246,89,9)" fg:x="1003" fg:w="2"/><text x="25.1631%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.05%)</title><rect x="24.9131%" y="773" width="0.0497%" height="15" fill="rgb(233,213,13)" fg:x="1003" fg:w="2"/><text x="25.1631%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (2 samples, 0.05%)</title><rect x="24.9131%" y="757" width="0.0497%" height="15" fill="rgb(233,141,41)" fg:x="1003" fg:w="2"/><text x="25.1631%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.05%)</title><rect x="24.9131%" y="741" width="0.0497%" height="15" fill="rgb(239,167,4)" fg:x="1003" fg:w="2"/><text x="25.1631%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.05%)</title><rect x="24.9131%" y="725" width="0.0497%" height="15" fill="rgb(209,217,16)" fg:x="1003" fg:w="2"/><text x="25.1631%" y="735.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.05%)</title><rect x="24.9131%" y="709" width="0.0497%" height="15" fill="rgb(219,88,35)" fg:x="1003" fg:w="2"/><text x="25.1631%" y="719.50"></text></g><g><title>__rust_alloc (2 samples, 0.05%)</title><rect x="24.9131%" y="693" width="0.0497%" height="15" fill="rgb(220,193,23)" fg:x="1003" fg:w="2"/><text x="25.1631%" y="703.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (2 samples, 0.05%)</title><rect x="24.9131%" y="677" width="0.0497%" height="15" fill="rgb(230,90,52)" fg:x="1003" fg:w="2"/><text x="25.1631%" y="687.50"></text></g><g><title>mi_heap_malloc_aligned_at (1 samples, 0.02%)</title><rect x="24.9379%" y="661" width="0.0248%" height="15" fill="rgb(252,106,19)" fg:x="1004" fg:w="1"/><text x="25.1879%" y="671.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at (1 samples, 0.02%)</title><rect x="24.9379%" y="645" width="0.0248%" height="15" fill="rgb(206,74,20)" fg:x="1004" fg:w="1"/><text x="25.1879%" y="655.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::chunk_mut (3 samples, 0.07%)</title><rect x="24.9131%" y="869" width="0.0745%" height="15" fill="rgb(230,138,44)" fg:x="1003" fg:w="3"/><text x="25.1631%" y="879.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::chunk_mut (3 samples, 0.07%)</title><rect x="24.9131%" y="853" width="0.0745%" height="15" fill="rgb(235,182,43)" fg:x="1003" fg:w="3"/><text x="25.1631%" y="863.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (3 samples, 0.07%)</title><rect x="24.9131%" y="837" width="0.0745%" height="15" fill="rgb(242,16,51)" fg:x="1003" fg:w="3"/><text x="25.1631%" y="847.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (3 samples, 0.07%)</title><rect x="24.9131%" y="821" width="0.0745%" height="15" fill="rgb(248,9,4)" fg:x="1003" fg:w="3"/><text x="25.1631%" y="831.50"></text></g><g><title>bytes::bytes_mut::release_shared (1 samples, 0.02%)</title><rect x="24.9627%" y="805" width="0.0248%" height="15" fill="rgb(210,31,22)" fg:x="1005" fg:w="1"/><text x="25.2127%" y="815.50"></text></g><g><title>&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (7 samples, 0.17%)</title><rect x="24.9131%" y="885" width="0.1739%" height="15" fill="rgb(239,54,39)" fg:x="1003" fg:w="7"/><text x="25.1631%" y="895.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (4 samples, 0.10%)</title><rect x="24.9876%" y="869" width="0.0994%" height="15" fill="rgb(230,99,41)" fg:x="1006" fg:w="4"/><text x="25.2376%" y="879.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (4 samples, 0.10%)</title><rect x="24.9876%" y="853" width="0.0994%" height="15" fill="rgb(253,106,12)" fg:x="1006" fg:w="4"/><text x="25.2376%" y="863.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (4 samples, 0.10%)</title><rect x="24.9876%" y="837" width="0.0994%" height="15" fill="rgb(213,46,41)" fg:x="1006" fg:w="4"/><text x="25.2376%" y="847.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (4 samples, 0.10%)</title><rect x="24.9876%" y="821" width="0.0994%" height="15" fill="rgb(215,133,35)" fg:x="1006" fg:w="4"/><text x="25.2376%" y="831.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (4 samples, 0.10%)</title><rect x="24.9876%" y="805" width="0.0994%" height="15" fill="rgb(213,28,5)" fg:x="1006" fg:w="4"/><text x="25.2376%" y="815.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (4 samples, 0.10%)</title><rect x="24.9876%" y="789" width="0.0994%" height="15" fill="rgb(215,77,49)" fg:x="1006" fg:w="4"/><text x="25.2376%" y="799.50"></text></g><g><title>mio::sys::unix::stateless_io_source::IoSourceState::do_io (4 samples, 0.10%)</title><rect x="24.9876%" y="773" width="0.0994%" height="15" fill="rgb(248,100,22)" fg:x="1006" fg:w="4"/><text x="25.2376%" y="783.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::_{{closure}} (4 samples, 0.10%)</title><rect x="24.9876%" y="757" width="0.0994%" height="15" fill="rgb(208,67,9)" fg:x="1006" fg:w="4"/><text x="25.2376%" y="767.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (4 samples, 0.10%)</title><rect x="24.9876%" y="741" width="0.0994%" height="15" fill="rgb(219,133,21)" fg:x="1006" fg:w="4"/><text x="25.2376%" y="751.50"></text></g><g><title>std::sys_common::net::TcpStream::read (4 samples, 0.10%)</title><rect x="24.9876%" y="725" width="0.0994%" height="15" fill="rgb(246,46,29)" fg:x="1006" fg:w="4"/><text x="25.2376%" y="735.50"></text></g><g><title>std::sys::pal::unix::net::Socket::read (4 samples, 0.10%)</title><rect x="24.9876%" y="709" width="0.0994%" height="15" fill="rgb(246,185,52)" fg:x="1006" fg:w="4"/><text x="25.2376%" y="719.50"></text></g><g><title>std::sys::pal::unix::net::Socket::recv_with_flags (4 samples, 0.10%)</title><rect x="24.9876%" y="693" width="0.0994%" height="15" fill="rgb(252,136,11)" fg:x="1006" fg:w="4"/><text x="25.2376%" y="703.50"></text></g><g><title>recv (4 samples, 0.10%)</title><rect x="24.9876%" y="677" width="0.0994%" height="15" fill="rgb(219,138,53)" fg:x="1006" fg:w="4"/><text x="25.2376%" y="687.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (1 samples, 0.02%)</title><rect x="26.2543%" y="869" width="0.0248%" height="15" fill="rgb(211,51,23)" fg:x="1057" fg:w="1"/><text x="26.5043%" y="879.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (1 samples, 0.02%)</title><rect x="26.2543%" y="853" width="0.0248%" height="15" fill="rgb(247,221,28)" fg:x="1057" fg:w="1"/><text x="26.5043%" y="863.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::deref::Deref&gt;::deref (2 samples, 0.05%)</title><rect x="26.2792%" y="869" width="0.0497%" height="15" fill="rgb(251,222,45)" fg:x="1058" fg:w="2"/><text x="26.5292%" y="879.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::convert::AsRef&lt;[u8]&gt;&gt;::as_ref (2 samples, 0.05%)</title><rect x="26.2792%" y="853" width="0.0497%" height="15" fill="rgb(217,162,53)" fg:x="1058" fg:w="2"/><text x="26.5292%" y="863.50"></text></g><g><title>bytes::bytes_mut::BytesMut::as_slice (2 samples, 0.05%)</title><rect x="26.2792%" y="837" width="0.0497%" height="15" fill="rgb(229,93,14)" fg:x="1058" fg:w="2"/><text x="26.5292%" y="847.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (1 samples, 0.02%)</title><rect x="26.4779%" y="837" width="0.0248%" height="15" fill="rgb(209,67,49)" fg:x="1066" fg:w="1"/><text x="26.7279%" y="847.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (4 samples, 0.10%)</title><rect x="26.4531%" y="853" width="0.0994%" height="15" fill="rgb(213,87,29)" fg:x="1065" fg:w="4"/><text x="26.7031%" y="863.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.05%)</title><rect x="26.5027%" y="837" width="0.0497%" height="15" fill="rgb(205,151,52)" fg:x="1067" fg:w="2"/><text x="26.7527%" y="847.50"></text></g><g><title>bytes::bytes_mut::BytesMut::len (1 samples, 0.02%)</title><rect x="26.5524%" y="853" width="0.0248%" height="15" fill="rgb(253,215,39)" fg:x="1069" fg:w="1"/><text x="26.8024%" y="863.50"></text></g><g><title>bytes::bytes_mut::BytesMut::shallow_clone (50 samples, 1.24%)</title><rect x="26.5772%" y="853" width="1.2419%" height="15" fill="rgb(221,220,41)" fg:x="1070" fg:w="50"/><text x="26.8272%" y="863.50"></text></g><g><title>bytes::bytes_mut::increment_shared (50 samples, 1.24%)</title><rect x="26.5772%" y="837" width="1.2419%" height="15" fill="rgb(218,133,21)" fg:x="1070" fg:w="50"/><text x="26.8272%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.02%)</title><rect x="27.7943%" y="821" width="0.0248%" height="15" fill="rgb(221,193,43)" fg:x="1119" fg:w="1"/><text x="28.0443%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.02%)</title><rect x="27.7943%" y="805" width="0.0248%" height="15" fill="rgb(240,128,52)" fg:x="1119" fg:w="1"/><text x="28.0443%" y="815.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (64 samples, 1.59%)</title><rect x="26.3289%" y="869" width="1.5897%" height="15" fill="rgb(253,114,12)" fg:x="1060" fg:w="64"/><text x="26.5789%" y="879.50"></text></g><g><title>core::fmt::Arguments::new_v1 (4 samples, 0.10%)</title><rect x="27.8192%" y="853" width="0.0994%" height="15" fill="rgb(215,223,47)" fg:x="1120" fg:w="4"/><text x="28.0692%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (1 samples, 0.02%)</title><rect x="27.9434%" y="789" width="0.0248%" height="15" fill="rgb(248,225,23)" fg:x="1125" fg:w="1"/><text x="28.1934%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="27.9434%" y="773" width="0.0248%" height="15" fill="rgb(250,108,0)" fg:x="1125" fg:w="1"/><text x="28.1934%" y="783.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (1 samples, 0.02%)</title><rect x="28.1918%" y="757" width="0.0248%" height="15" fill="rgb(228,208,7)" fg:x="1135" fg:w="1"/><text x="28.4418%" y="767.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (1 samples, 0.02%)</title><rect x="28.1918%" y="741" width="0.0248%" height="15" fill="rgb(244,45,10)" fg:x="1135" fg:w="1"/><text x="28.4418%" y="751.50"></text></g><g><title>&lt;memchr::vector::SensibleMoveMask as memchr::vector::MoveMask&gt;::has_non_zero (2 samples, 0.05%)</title><rect x="28.3408%" y="709" width="0.0497%" height="15" fill="rgb(207,125,25)" fg:x="1141" fg:w="2"/><text x="28.5908%" y="719.50"></text></g><g><title>core::ops::function::Fn::call (2 samples, 0.05%)</title><rect x="28.3905%" y="709" width="0.0497%" height="15" fill="rgb(210,195,18)" fg:x="1143" fg:w="2"/><text x="28.6405%" y="719.50"></text></g><g><title>&lt;memchr::vector::SensibleMoveMask as memchr::vector::MoveMask&gt;::first_offset (2 samples, 0.05%)</title><rect x="28.3905%" y="693" width="0.0497%" height="15" fill="rgb(249,80,12)" fg:x="1143" fg:w="2"/><text x="28.6405%" y="703.50"></text></g><g><title>core::num::&lt;impl u32&gt;::trailing_zeros (2 samples, 0.05%)</title><rect x="28.3905%" y="677" width="0.0497%" height="15" fill="rgb(221,65,9)" fg:x="1143" fg:w="2"/><text x="28.6405%" y="687.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (23 samples, 0.57%)</title><rect x="28.0924%" y="773" width="0.5713%" height="15" fill="rgb(235,49,36)" fg:x="1131" fg:w="23"/><text x="28.3424%" y="783.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (18 samples, 0.45%)</title><rect x="28.2166%" y="757" width="0.4471%" height="15" fill="rgb(225,32,20)" fg:x="1136" fg:w="18"/><text x="28.4666%" y="767.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (18 samples, 0.45%)</title><rect x="28.2166%" y="741" width="0.4471%" height="15" fill="rgb(215,141,46)" fg:x="1136" fg:w="18"/><text x="28.4666%" y="751.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (17 samples, 0.42%)</title><rect x="28.2414%" y="725" width="0.4223%" height="15" fill="rgb(250,160,47)" fg:x="1137" fg:w="17"/><text x="28.4914%" y="735.50"></text></g><g><title>memchr::vector::x86avx2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m256i&gt;::movemask (9 samples, 0.22%)</title><rect x="28.4401%" y="709" width="0.2235%" height="15" fill="rgb(216,222,40)" fg:x="1145" fg:w="9"/><text x="28.6901%" y="719.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (9 samples, 0.22%)</title><rect x="28.4401%" y="693" width="0.2235%" height="15" fill="rgb(234,217,39)" fg:x="1145" fg:w="9"/><text x="28.6901%" y="703.50"></text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_line_async::_{{closure}} (220 samples, 5.46%)</title><rect x="23.2737%" y="901" width="5.4645%" height="15" fill="rgb(207,178,40)" fg:x="937" fg:w="220"/><text x="23.5237%" y="911.50">rutin::..</text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_line (147 samples, 3.65%)</title><rect x="25.0869%" y="885" width="3.6513%" height="15" fill="rgb(221,136,13)" fg:x="1010" fg:w="147"/><text x="25.3369%" y="895.50">ruti..</text></g><g><title>memchr::memchr::memchr (33 samples, 0.82%)</title><rect x="27.9185%" y="869" width="0.8197%" height="15" fill="rgb(249,199,10)" fg:x="1124" fg:w="33"/><text x="28.1685%" y="879.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (33 samples, 0.82%)</title><rect x="27.9185%" y="853" width="0.8197%" height="15" fill="rgb(249,222,13)" fg:x="1124" fg:w="33"/><text x="28.1685%" y="863.50"></text></g><g><title>memchr::memchr::memchr::_{{closure}} (33 samples, 0.82%)</title><rect x="27.9185%" y="837" width="0.8197%" height="15" fill="rgb(244,185,38)" fg:x="1124" fg:w="33"/><text x="28.1685%" y="847.50"></text></g><g><title>memchr::memchr::memchr_raw (33 samples, 0.82%)</title><rect x="27.9185%" y="821" width="0.8197%" height="15" fill="rgb(236,202,9)" fg:x="1124" fg:w="33"/><text x="28.1685%" y="831.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (33 samples, 0.82%)</title><rect x="27.9185%" y="805" width="0.8197%" height="15" fill="rgb(250,229,37)" fg:x="1124" fg:w="33"/><text x="28.1685%" y="815.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (31 samples, 0.77%)</title><rect x="27.9682%" y="789" width="0.7700%" height="15" fill="rgb(206,174,23)" fg:x="1126" fg:w="31"/><text x="28.2182%" y="799.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::new_unchecked (3 samples, 0.07%)</title><rect x="28.6637%" y="773" width="0.0745%" height="15" fill="rgb(211,33,43)" fg:x="1154" fg:w="3"/><text x="28.9137%" y="783.50"></text></g><g><title>bytes::bytes_mut::BytesMut::kind (1 samples, 0.02%)</title><rect x="28.8872%" y="837" width="0.0248%" height="15" fill="rgb(245,58,50)" fg:x="1163" fg:w="1"/><text x="29.1372%" y="847.50"></text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::get_u8 (8 samples, 0.20%)</title><rect x="28.7382%" y="901" width="0.1987%" height="15" fill="rgb(244,68,36)" fg:x="1157" fg:w="8"/><text x="28.9882%" y="911.50"></text></g><g><title>bytes::buf::buf_impl::Buf::get_u8 (7 samples, 0.17%)</title><rect x="28.7630%" y="885" width="0.1739%" height="15" fill="rgb(232,229,15)" fg:x="1158" fg:w="7"/><text x="29.0130%" y="895.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (5 samples, 0.12%)</title><rect x="28.8127%" y="869" width="0.1242%" height="15" fill="rgb(254,30,23)" fg:x="1160" fg:w="5"/><text x="29.0627%" y="879.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (5 samples, 0.12%)</title><rect x="28.8127%" y="853" width="0.1242%" height="15" fill="rgb(235,160,14)" fg:x="1160" fg:w="5"/><text x="29.0627%" y="863.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (1 samples, 0.02%)</title><rect x="28.9121%" y="837" width="0.0248%" height="15" fill="rgb(212,155,44)" fg:x="1164" fg:w="1"/><text x="29.1621%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.02%)</title><rect x="29.1853%" y="805" width="0.0248%" height="15" fill="rgb(226,2,50)" fg:x="1175" fg:w="1"/><text x="29.4353%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="29.1853%" y="789" width="0.0248%" height="15" fill="rgb(234,177,6)" fg:x="1175" fg:w="1"/><text x="29.4353%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.02%)</title><rect x="29.1853%" y="773" width="0.0248%" height="15" fill="rgb(217,24,9)" fg:x="1175" fg:w="1"/><text x="29.4353%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="29.1853%" y="757" width="0.0248%" height="15" fill="rgb(220,13,46)" fg:x="1175" fg:w="1"/><text x="29.4353%" y="767.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="29.1853%" y="741" width="0.0248%" height="15" fill="rgb(239,221,27)" fg:x="1175" fg:w="1"/><text x="29.4353%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.05%)</title><rect x="29.2101%" y="805" width="0.0497%" height="15" fill="rgb(222,198,25)" fg:x="1176" fg:w="2"/><text x="29.4601%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.05%)</title><rect x="29.2101%" y="789" width="0.0497%" height="15" fill="rgb(211,99,13)" fg:x="1176" fg:w="2"/><text x="29.4601%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.05%)</title><rect x="29.2101%" y="773" width="0.0497%" height="15" fill="rgb(232,111,31)" fg:x="1176" fg:w="2"/><text x="29.4601%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (2 samples, 0.05%)</title><rect x="29.2101%" y="757" width="0.0497%" height="15" fill="rgb(245,82,37)" fg:x="1176" fg:w="2"/><text x="29.4601%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.05%)</title><rect x="29.2101%" y="741" width="0.0497%" height="15" fill="rgb(227,149,46)" fg:x="1176" fg:w="2"/><text x="29.4601%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.05%)</title><rect x="29.2101%" y="725" width="0.0497%" height="15" fill="rgb(218,36,50)" fg:x="1176" fg:w="2"/><text x="29.4601%" y="735.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.05%)</title><rect x="29.2101%" y="709" width="0.0497%" height="15" fill="rgb(226,80,48)" fg:x="1176" fg:w="2"/><text x="29.4601%" y="719.50"></text></g><g><title>__rust_alloc (2 samples, 0.05%)</title><rect x="29.2101%" y="693" width="0.0497%" height="15" fill="rgb(238,224,15)" fg:x="1176" fg:w="2"/><text x="29.4601%" y="703.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (2 samples, 0.05%)</title><rect x="29.2101%" y="677" width="0.0497%" height="15" fill="rgb(241,136,10)" fg:x="1176" fg:w="2"/><text x="29.4601%" y="687.50"></text></g><g><title>_mi_page_malloc (2 samples, 0.05%)</title><rect x="29.2101%" y="661" width="0.0497%" height="15" fill="rgb(208,32,45)" fg:x="1176" fg:w="2"/><text x="29.4601%" y="671.50"></text></g><g><title>_mi_page_malloc_zero (2 samples, 0.05%)</title><rect x="29.2101%" y="645" width="0.0497%" height="15" fill="rgb(207,135,9)" fg:x="1176" fg:w="2"/><text x="29.4601%" y="655.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::chunk_mut (4 samples, 0.10%)</title><rect x="29.1853%" y="869" width="0.0994%" height="15" fill="rgb(206,86,44)" fg:x="1175" fg:w="4"/><text x="29.4353%" y="879.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::chunk_mut (4 samples, 0.10%)</title><rect x="29.1853%" y="853" width="0.0994%" height="15" fill="rgb(245,177,15)" fg:x="1175" fg:w="4"/><text x="29.4353%" y="863.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (4 samples, 0.10%)</title><rect x="29.1853%" y="837" width="0.0994%" height="15" fill="rgb(206,64,50)" fg:x="1175" fg:w="4"/><text x="29.4353%" y="847.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (4 samples, 0.10%)</title><rect x="29.1853%" y="821" width="0.0994%" height="15" fill="rgb(234,36,40)" fg:x="1175" fg:w="4"/><text x="29.4353%" y="831.50"></text></g><g><title>bytes::bytes_mut::release_shared (1 samples, 0.02%)</title><rect x="29.2598%" y="805" width="0.0248%" height="15" fill="rgb(213,64,8)" fg:x="1178" fg:w="1"/><text x="29.5098%" y="815.50"></text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::need_bytes_async::_{{closure}} (28 samples, 0.70%)</title><rect x="28.9369%" y="901" width="0.6955%" height="15" fill="rgb(210,75,36)" fg:x="1165" fg:w="28"/><text x="29.1869%" y="911.50"></text></g><g><title>&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (18 samples, 0.45%)</title><rect x="29.1853%" y="885" width="0.4471%" height="15" fill="rgb(229,88,21)" fg:x="1175" fg:w="18"/><text x="29.4353%" y="895.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (14 samples, 0.35%)</title><rect x="29.2846%" y="869" width="0.3477%" height="15" fill="rgb(252,204,47)" fg:x="1179" fg:w="14"/><text x="29.5346%" y="879.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (14 samples, 0.35%)</title><rect x="29.2846%" y="853" width="0.3477%" height="15" fill="rgb(208,77,27)" fg:x="1179" fg:w="14"/><text x="29.5346%" y="863.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (14 samples, 0.35%)</title><rect x="29.2846%" y="837" width="0.3477%" height="15" fill="rgb(221,76,26)" fg:x="1179" fg:w="14"/><text x="29.5346%" y="847.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (14 samples, 0.35%)</title><rect x="29.2846%" y="821" width="0.3477%" height="15" fill="rgb(225,139,18)" fg:x="1179" fg:w="14"/><text x="29.5346%" y="831.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (13 samples, 0.32%)</title><rect x="29.3095%" y="805" width="0.3229%" height="15" fill="rgb(230,137,11)" fg:x="1180" fg:w="13"/><text x="29.5595%" y="815.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (13 samples, 0.32%)</title><rect x="29.3095%" y="789" width="0.3229%" height="15" fill="rgb(212,28,1)" fg:x="1180" fg:w="13"/><text x="29.5595%" y="799.50"></text></g><g><title>mio::sys::unix::stateless_io_source::IoSourceState::do_io (13 samples, 0.32%)</title><rect x="29.3095%" y="773" width="0.3229%" height="15" fill="rgb(248,164,17)" fg:x="1180" fg:w="13"/><text x="29.5595%" y="783.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::_{{closure}} (13 samples, 0.32%)</title><rect x="29.3095%" y="757" width="0.3229%" height="15" fill="rgb(222,171,42)" fg:x="1180" fg:w="13"/><text x="29.5595%" y="767.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (13 samples, 0.32%)</title><rect x="29.3095%" y="741" width="0.3229%" height="15" fill="rgb(243,84,45)" fg:x="1180" fg:w="13"/><text x="29.5595%" y="751.50"></text></g><g><title>std::sys_common::net::TcpStream::read (13 samples, 0.32%)</title><rect x="29.3095%" y="725" width="0.3229%" height="15" fill="rgb(252,49,23)" fg:x="1180" fg:w="13"/><text x="29.5595%" y="735.50"></text></g><g><title>std::sys::pal::unix::net::Socket::read (13 samples, 0.32%)</title><rect x="29.3095%" y="709" width="0.3229%" height="15" fill="rgb(215,19,7)" fg:x="1180" fg:w="13"/><text x="29.5595%" y="719.50"></text></g><g><title>std::sys::pal::unix::net::Socket::recv_with_flags (13 samples, 0.32%)</title><rect x="29.3095%" y="693" width="0.3229%" height="15" fill="rgb(238,81,41)" fg:x="1180" fg:w="13"/><text x="29.5595%" y="703.50"></text></g><g><title>recv (13 samples, 0.32%)</title><rect x="29.3095%" y="677" width="0.3229%" height="15" fill="rgb(210,199,37)" fg:x="1180" fg:w="13"/><text x="29.5595%" y="687.50"></text></g><g><title>[libc.so.6] (4 samples, 0.10%)</title><rect x="29.5330%" y="661" width="0.0994%" height="15" fill="rgb(244,192,49)" fg:x="1189" fg:w="4"/><text x="29.7830%" y="671.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as snafu::OptionExt&lt;T&gt;&gt;::with_context (2 samples, 0.05%)</title><rect x="29.8063%" y="885" width="0.0497%" height="15" fill="rgb(226,211,11)" fg:x="1200" fg:w="2"/><text x="30.0563%" y="895.50"></text></g><g><title>&lt;usize as core::ops::arith::AddAssign&gt;::add_assign (1 samples, 0.02%)</title><rect x="29.9801%" y="853" width="0.0248%" height="15" fill="rgb(236,162,54)" fg:x="1207" fg:w="1"/><text x="30.2301%" y="863.50"></text></g><g><title>atoi::ascii_to_digit (7 samples, 0.17%)</title><rect x="30.0050%" y="853" width="0.1739%" height="15" fill="rgb(220,229,9)" fg:x="1208" fg:w="7"/><text x="30.2550%" y="863.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (685 samples, 17.01%)</title><rect x="13.2638%" y="933" width="17.0144%" height="15" fill="rgb(250,87,22)" fg:x="534" fg:w="685"/><text x="13.5138%" y="943.50">&lt;core::pin::Pin&lt;P&gt; as core..</text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::_{{closure}}::_{{closure}}::_{{closure}}::_decode_async::_{{closure}} (683 samples, 16.96%)</title><rect x="13.3135%" y="917" width="16.9647%" height="15" fill="rgb(239,43,17)" fg:x="536" fg:w="683"/><text x="13.5635%" y="927.50">rutin::frame::Resp3&lt;bytes:..</text></g><g><title>rutin::util::atoi (26 samples, 0.65%)</title><rect x="29.6324%" y="901" width="0.6458%" height="15" fill="rgb(231,177,25)" fg:x="1193" fg:w="26"/><text x="29.8824%" y="911.50"></text></g><g><title>atoi::atoi (17 samples, 0.42%)</title><rect x="29.8559%" y="885" width="0.4223%" height="15" fill="rgb(219,179,1)" fg:x="1202" fg:w="17"/><text x="30.1059%" y="895.50"></text></g><g><title>&lt;I as atoi::FromRadix10SignedChecked&gt;::from_radix_10_signed_checked (17 samples, 0.42%)</title><rect x="29.8559%" y="869" width="0.4223%" height="15" fill="rgb(238,219,53)" fg:x="1202" fg:w="17"/><text x="30.1059%" y="879.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (4 samples, 0.10%)</title><rect x="30.1788%" y="853" width="0.0994%" height="15" fill="rgb(232,167,36)" fg:x="1215" fg:w="4"/><text x="30.4288%" y="863.50"></text></g><g><title>&lt;I as atoi::FromRadix10SignedChecked&gt;::from_radix_10_signed_checked::_{{closure}} (4 samples, 0.10%)</title><rect x="30.1788%" y="837" width="0.0994%" height="15" fill="rgb(244,19,51)" fg:x="1215" fg:w="4"/><text x="30.4288%" y="847.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.07%)</title><rect x="30.2782%" y="933" width="0.0745%" height="15" fill="rgb(224,6,22)" fg:x="1219" fg:w="3"/><text x="30.5282%" y="943.50"></text></g><g><title>[libc.so.6] (46 samples, 1.14%)</title><rect x="30.3527%" y="933" width="1.1426%" height="15" fill="rgb(224,145,5)" fg:x="1222" fg:w="46"/><text x="30.6027%" y="943.50"></text></g><g><title>_mi_page_malloc (11 samples, 0.27%)</title><rect x="31.5698%" y="805" width="0.2732%" height="15" fill="rgb(234,130,49)" fg:x="1271" fg:w="11"/><text x="31.8198%" y="815.50"></text></g><g><title>_mi_page_malloc_zero (6 samples, 0.15%)</title><rect x="31.6940%" y="789" width="0.1490%" height="15" fill="rgb(254,6,2)" fg:x="1276" fg:w="6"/><text x="31.9440%" y="799.50"></text></g><g><title>mi_heap_malloc_aligned_at (14 samples, 0.35%)</title><rect x="31.8430%" y="805" width="0.3477%" height="15" fill="rgb(208,96,46)" fg:x="1282" fg:w="14"/><text x="32.0930%" y="815.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at (14 samples, 0.35%)</title><rect x="31.8430%" y="789" width="0.3477%" height="15" fill="rgb(239,3,39)" fg:x="1282" fg:w="14"/><text x="32.0930%" y="799.50"></text></g><g><title>_mi_is_power_of_two (1 samples, 0.02%)</title><rect x="32.1659%" y="773" width="0.0248%" height="15" fill="rgb(233,210,1)" fg:x="1295" fg:w="1"/><text x="32.4159%" y="783.50"></text></g><g><title>_mi_deferred_free (2 samples, 0.05%)</title><rect x="32.3646%" y="741" width="0.0497%" height="15" fill="rgb(244,137,37)" fg:x="1303" fg:w="2"/><text x="32.6146%" y="751.50"></text></g><g><title>_mi_page_free_collect (2 samples, 0.05%)</title><rect x="32.4143%" y="709" width="0.0497%" height="15" fill="rgb(240,136,2)" fg:x="1305" fg:w="2"/><text x="32.6643%" y="719.50"></text></g><g><title>_mi_page_thread_free_collect (1 samples, 0.02%)</title><rect x="32.4391%" y="693" width="0.0248%" height="15" fill="rgb(239,18,37)" fg:x="1306" fg:w="1"/><text x="32.6891%" y="703.50"></text></g><g><title>_mi_heap_delayed_free_partial (5 samples, 0.12%)</title><rect x="32.4143%" y="741" width="0.1242%" height="15" fill="rgb(218,185,22)" fg:x="1305" fg:w="5"/><text x="32.6643%" y="751.50"></text></g><g><title>_mi_free_delayed_block (5 samples, 0.12%)</title><rect x="32.4143%" y="725" width="0.1242%" height="15" fill="rgb(225,218,4)" fg:x="1305" fg:w="5"/><text x="32.6643%" y="735.50"></text></g><g><title>_mi_page_try_use_delayed_free (3 samples, 0.07%)</title><rect x="32.4640%" y="709" width="0.0745%" height="15" fill="rgb(230,182,32)" fg:x="1307" fg:w="3"/><text x="32.7140%" y="719.50"></text></g><g><title>mi_tf_set_delayed (1 samples, 0.02%)</title><rect x="32.5137%" y="693" width="0.0248%" height="15" fill="rgb(242,56,43)" fg:x="1309" fg:w="1"/><text x="32.7637%" y="703.50"></text></g><g><title>mi_tf_block (1 samples, 0.02%)</title><rect x="32.5137%" y="677" width="0.0248%" height="15" fill="rgb(233,99,24)" fg:x="1309" fg:w="1"/><text x="32.7637%" y="687.50"></text></g><g><title>_mi_page_free_collect (1 samples, 0.02%)</title><rect x="32.6130%" y="709" width="0.0248%" height="15" fill="rgb(234,209,42)" fg:x="1313" fg:w="1"/><text x="32.8630%" y="719.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (20 samples, 0.50%)</title><rect x="32.1908%" y="805" width="0.4968%" height="15" fill="rgb(227,7,12)" fg:x="1296" fg:w="20"/><text x="32.4408%" y="815.50"></text></g><g><title>_mi_heap_malloc_zero (17 samples, 0.42%)</title><rect x="32.2653%" y="789" width="0.4223%" height="15" fill="rgb(245,203,43)" fg:x="1299" fg:w="17"/><text x="32.5153%" y="799.50"></text></g><g><title>_mi_heap_malloc_zero_ex (17 samples, 0.42%)</title><rect x="32.2653%" y="773" width="0.4223%" height="15" fill="rgb(238,205,33)" fg:x="1299" fg:w="17"/><text x="32.5153%" y="783.50"></text></g><g><title>_mi_malloc_generic (16 samples, 0.40%)</title><rect x="32.2901%" y="757" width="0.3974%" height="15" fill="rgb(231,56,7)" fg:x="1300" fg:w="16"/><text x="32.5401%" y="767.50"></text></g><g><title>mi_find_page (6 samples, 0.15%)</title><rect x="32.5385%" y="741" width="0.1490%" height="15" fill="rgb(244,186,29)" fg:x="1310" fg:w="6"/><text x="32.7885%" y="751.50"></text></g><g><title>mi_find_free_page (5 samples, 0.12%)</title><rect x="32.5633%" y="725" width="0.1242%" height="15" fill="rgb(234,111,31)" fg:x="1311" fg:w="5"/><text x="32.8133%" y="735.50"></text></g><g><title>mi_page_queue (2 samples, 0.05%)</title><rect x="32.6379%" y="709" width="0.0497%" height="15" fill="rgb(241,149,10)" fg:x="1314" fg:w="2"/><text x="32.8879%" y="719.50"></text></g><g><title>_mi_bin (1 samples, 0.02%)</title><rect x="32.6627%" y="693" width="0.0248%" height="15" fill="rgb(249,206,44)" fg:x="1315" fg:w="1"/><text x="32.9127%" y="703.50"></text></g><g><title>mi_bin (1 samples, 0.02%)</title><rect x="32.6627%" y="677" width="0.0248%" height="15" fill="rgb(251,153,30)" fg:x="1315" fg:w="1"/><text x="32.9127%" y="687.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (55 samples, 1.37%)</title><rect x="31.4953%" y="933" width="1.3661%" height="15" fill="rgb(239,152,38)" fg:x="1268" fg:w="55"/><text x="31.7453%" y="943.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (55 samples, 1.37%)</title><rect x="31.4953%" y="917" width="1.3661%" height="15" fill="rgb(249,139,47)" fg:x="1268" fg:w="55"/><text x="31.7453%" y="927.50"></text></g><g><title>alloc::alloc::exchange_malloc (53 samples, 1.32%)</title><rect x="31.5450%" y="901" width="1.3164%" height="15" fill="rgb(244,64,35)" fg:x="1270" fg:w="53"/><text x="31.7950%" y="911.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (53 samples, 1.32%)</title><rect x="31.5450%" y="885" width="1.3164%" height="15" fill="rgb(216,46,15)" fg:x="1270" fg:w="53"/><text x="31.7950%" y="895.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (53 samples, 1.32%)</title><rect x="31.5450%" y="869" width="1.3164%" height="15" fill="rgb(250,74,19)" fg:x="1270" fg:w="53"/><text x="31.7950%" y="879.50"></text></g><g><title>alloc::alloc::alloc (53 samples, 1.32%)</title><rect x="31.5450%" y="853" width="1.3164%" height="15" fill="rgb(249,42,33)" fg:x="1270" fg:w="53"/><text x="31.7950%" y="863.50"></text></g><g><title>__rust_alloc (53 samples, 1.32%)</title><rect x="31.5450%" y="837" width="1.3164%" height="15" fill="rgb(242,149,17)" fg:x="1270" fg:w="53"/><text x="31.7950%" y="847.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (53 samples, 1.32%)</title><rect x="31.5450%" y="821" width="1.3164%" height="15" fill="rgb(244,29,21)" fg:x="1270" fg:w="53"/><text x="31.7950%" y="831.50"></text></g><g><title>mi_malloc_aligned (7 samples, 0.17%)</title><rect x="32.6875%" y="805" width="0.1739%" height="15" fill="rgb(220,130,37)" fg:x="1316" fg:w="7"/><text x="32.9375%" y="815.50"></text></g><g><title>mi_prim_get_default_heap (5 samples, 0.12%)</title><rect x="32.7372%" y="789" width="0.1242%" height="15" fill="rgb(211,67,2)" fg:x="1318" fg:w="5"/><text x="32.9872%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (10 samples, 0.25%)</title><rect x="32.8614%" y="933" width="0.2484%" height="15" fill="rgb(235,68,52)" fg:x="1323" fg:w="10"/><text x="33.1114%" y="943.50"></text></g><g><title>core::ptr::write (8 samples, 0.20%)</title><rect x="32.9111%" y="917" width="0.1987%" height="15" fill="rgb(246,142,3)" fg:x="1325" fg:w="8"/><text x="33.1611%" y="927.50"></text></g><g><title>_mi_page_malloc (4 samples, 0.10%)</title><rect x="33.1843%" y="789" width="0.0994%" height="15" fill="rgb(241,25,7)" fg:x="1336" fg:w="4"/><text x="33.4343%" y="799.50"></text></g><g><title>_mi_page_malloc_zero (3 samples, 0.07%)</title><rect x="33.2091%" y="773" width="0.0745%" height="15" fill="rgb(242,119,39)" fg:x="1337" fg:w="3"/><text x="33.4591%" y="783.50"></text></g><g><title>mi_heap_malloc_aligned_at (4 samples, 0.10%)</title><rect x="33.2837%" y="789" width="0.0994%" height="15" fill="rgb(241,98,45)" fg:x="1340" fg:w="4"/><text x="33.5337%" y="799.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at (4 samples, 0.10%)</title><rect x="33.2837%" y="773" width="0.0994%" height="15" fill="rgb(254,28,30)" fg:x="1340" fg:w="4"/><text x="33.5337%" y="783.50"></text></g><g><title>_mi_deferred_free (1 samples, 0.02%)</title><rect x="33.3830%" y="725" width="0.0248%" height="15" fill="rgb(241,142,54)" fg:x="1344" fg:w="1"/><text x="33.6330%" y="735.50"></text></g><g><title>_mi_heap_delayed_free_partial (1 samples, 0.02%)</title><rect x="33.4078%" y="725" width="0.0248%" height="15" fill="rgb(222,85,15)" fg:x="1345" fg:w="1"/><text x="33.6578%" y="735.50"></text></g><g><title>_mi_page_malloc_zero (2 samples, 0.05%)</title><rect x="33.4327%" y="725" width="0.0497%" height="15" fill="rgb(210,85,47)" fg:x="1346" fg:w="2"/><text x="33.6827%" y="735.50"></text></g><g><title>_mi_page_free_collect (1 samples, 0.02%)</title><rect x="33.5072%" y="693" width="0.0248%" height="15" fill="rgb(224,206,25)" fg:x="1349" fg:w="1"/><text x="33.7572%" y="703.50"></text></g><g><title>mi_find_page (4 samples, 0.10%)</title><rect x="33.4824%" y="725" width="0.0994%" height="15" fill="rgb(243,201,19)" fg:x="1348" fg:w="4"/><text x="33.7324%" y="735.50"></text></g><g><title>mi_find_free_page (4 samples, 0.10%)</title><rect x="33.4824%" y="709" width="0.0994%" height="15" fill="rgb(236,59,4)" fg:x="1348" fg:w="4"/><text x="33.7324%" y="719.50"></text></g><g><title>mi_page_queue (2 samples, 0.05%)</title><rect x="33.5320%" y="693" width="0.0497%" height="15" fill="rgb(254,179,45)" fg:x="1350" fg:w="2"/><text x="33.7820%" y="703.50"></text></g><g><title>_mi_bin (1 samples, 0.02%)</title><rect x="33.5569%" y="677" width="0.0248%" height="15" fill="rgb(226,14,10)" fg:x="1351" fg:w="1"/><text x="33.8069%" y="687.50"></text></g><g><title>mi_bin (1 samples, 0.02%)</title><rect x="33.5569%" y="661" width="0.0248%" height="15" fill="rgb(244,27,41)" fg:x="1351" fg:w="1"/><text x="33.8069%" y="671.50"></text></g><g><title>_mi_wsize_from_size (1 samples, 0.02%)</title><rect x="33.5569%" y="645" width="0.0248%" height="15" fill="rgb(235,35,32)" fg:x="1351" fg:w="1"/><text x="33.8069%" y="655.50"></text></g><g><title>_mi_heap_collect_retired (4 samples, 0.10%)</title><rect x="33.6066%" y="709" width="0.0994%" height="15" fill="rgb(218,68,31)" fg:x="1353" fg:w="4"/><text x="33.8566%" y="719.50"></text></g><g><title>mi_page_extend_free (15 samples, 0.37%)</title><rect x="33.7059%" y="709" width="0.3726%" height="15" fill="rgb(207,120,37)" fg:x="1357" fg:w="15"/><text x="33.9559%" y="719.50"></text></g><g><title>mi_page_extend_free (15 samples, 0.37%)</title><rect x="33.7059%" y="693" width="0.3726%" height="15" fill="rgb(227,98,0)" fg:x="1357" fg:w="15"/><text x="33.9559%" y="703.50"></text></g><g><title>mi_page_free_list_extend (12 samples, 0.30%)</title><rect x="33.7804%" y="677" width="0.2981%" height="15" fill="rgb(207,7,3)" fg:x="1360" fg:w="12"/><text x="34.0304%" y="687.50"></text></g><g><title>_mi_segment_page_alloc (1 samples, 0.02%)</title><rect x="34.0785%" y="677" width="0.0248%" height="15" fill="rgb(206,98,19)" fg:x="1372" fg:w="1"/><text x="34.3285%" y="687.50"></text></g><g><title>mi_page_free_list_extend (2 samples, 0.05%)</title><rect x="34.1033%" y="677" width="0.0497%" height="15" fill="rgb(217,5,26)" fg:x="1373" fg:w="2"/><text x="34.3533%" y="687.50"></text></g><g><title>mi_page_block_at (1 samples, 0.02%)</title><rect x="34.1282%" y="661" width="0.0248%" height="15" fill="rgb(235,190,38)" fg:x="1374" fg:w="1"/><text x="34.3782%" y="671.50"></text></g><g><title>mi_page_init (1 samples, 0.02%)</title><rect x="34.1530%" y="677" width="0.0248%" height="15" fill="rgb(247,86,24)" fg:x="1375" fg:w="1"/><text x="34.4030%" y="687.50"></text></g><g><title>_mi_segment_page_start (1 samples, 0.02%)</title><rect x="34.1530%" y="661" width="0.0248%" height="15" fill="rgb(205,101,16)" fg:x="1375" fg:w="1"/><text x="34.4030%" y="671.50"></text></g><g><title>_mi_segment_page_start_from_slice (1 samples, 0.02%)</title><rect x="34.1530%" y="645" width="0.0248%" height="15" fill="rgb(246,168,33)" fg:x="1375" fg:w="1"/><text x="34.4030%" y="655.50"></text></g><g><title>mi_segment_slice_split (1 samples, 0.02%)</title><rect x="34.2524%" y="645" width="0.0248%" height="15" fill="rgb(231,114,1)" fg:x="1379" fg:w="1"/><text x="34.5024%" y="655.50"></text></g><g><title>mi_segment_span_free (1 samples, 0.02%)</title><rect x="34.2524%" y="629" width="0.0248%" height="15" fill="rgb(207,184,53)" fg:x="1379" fg:w="1"/><text x="34.5024%" y="639.50"></text></g><g><title>_mi_prim_clock_now (2 samples, 0.05%)</title><rect x="34.2772%" y="597" width="0.0497%" height="15" fill="rgb(224,95,51)" fg:x="1380" fg:w="2"/><text x="34.5272%" y="607.50"></text></g><g><title>clock_gettime (2 samples, 0.05%)</title><rect x="34.2772%" y="581" width="0.0497%" height="15" fill="rgb(212,188,45)" fg:x="1380" fg:w="2"/><text x="34.5272%" y="591.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.02%)</title><rect x="34.3020%" y="565" width="0.0248%" height="15" fill="rgb(223,154,38)" fg:x="1381" fg:w="1"/><text x="34.5520%" y="575.50"></text></g><g><title>mi_segment_span_allocate (3 samples, 0.07%)</title><rect x="34.2772%" y="645" width="0.0745%" height="15" fill="rgb(251,22,52)" fg:x="1380" fg:w="3"/><text x="34.5272%" y="655.50"></text></g><g><title>mi_segment_ensure_committed (3 samples, 0.07%)</title><rect x="34.2772%" y="629" width="0.0745%" height="15" fill="rgb(229,209,22)" fg:x="1380" fg:w="3"/><text x="34.5272%" y="639.50"></text></g><g><title>mi_segment_commit (3 samples, 0.07%)</title><rect x="34.2772%" y="613" width="0.0745%" height="15" fill="rgb(234,138,34)" fg:x="1380" fg:w="3"/><text x="34.5272%" y="623.50"></text></g><g><title>mi_option_get (1 samples, 0.02%)</title><rect x="34.3269%" y="597" width="0.0248%" height="15" fill="rgb(212,95,11)" fg:x="1382" fg:w="1"/><text x="34.5769%" y="607.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (40 samples, 0.99%)</title><rect x="33.3830%" y="789" width="0.9935%" height="15" fill="rgb(240,179,47)" fg:x="1344" fg:w="40"/><text x="33.6330%" y="799.50"></text></g><g><title>_mi_heap_malloc_zero (40 samples, 0.99%)</title><rect x="33.3830%" y="773" width="0.9935%" height="15" fill="rgb(240,163,11)" fg:x="1344" fg:w="40"/><text x="33.6330%" y="783.50"></text></g><g><title>_mi_heap_malloc_zero_ex (40 samples, 0.99%)</title><rect x="33.3830%" y="757" width="0.9935%" height="15" fill="rgb(236,37,12)" fg:x="1344" fg:w="40"/><text x="33.6330%" y="767.50"></text></g><g><title>_mi_malloc_generic (40 samples, 0.99%)</title><rect x="33.3830%" y="741" width="0.9935%" height="15" fill="rgb(232,164,16)" fg:x="1344" fg:w="40"/><text x="33.6330%" y="751.50"></text></g><g><title>mi_page_queue_find_free_ex (32 samples, 0.79%)</title><rect x="33.5817%" y="725" width="0.7948%" height="15" fill="rgb(244,205,15)" fg:x="1352" fg:w="32"/><text x="33.8317%" y="735.50"></text></g><g><title>mi_page_fresh (12 samples, 0.30%)</title><rect x="34.0785%" y="709" width="0.2981%" height="15" fill="rgb(223,117,47)" fg:x="1372" fg:w="12"/><text x="34.3285%" y="719.50"></text></g><g><title>mi_page_fresh_alloc (12 samples, 0.30%)</title><rect x="34.0785%" y="693" width="0.2981%" height="15" fill="rgb(244,107,35)" fg:x="1372" fg:w="12"/><text x="34.3285%" y="703.50"></text></g><g><title>mi_segments_page_alloc (8 samples, 0.20%)</title><rect x="34.1778%" y="677" width="0.1987%" height="15" fill="rgb(205,140,8)" fg:x="1376" fg:w="8"/><text x="34.4278%" y="687.50"></text></g><g><title>mi_segments_page_find_and_allocate (8 samples, 0.20%)</title><rect x="34.1778%" y="661" width="0.1987%" height="15" fill="rgb(228,84,46)" fg:x="1376" fg:w="8"/><text x="34.4278%" y="671.50"></text></g><g><title>mi_slice_index (1 samples, 0.02%)</title><rect x="34.3517%" y="645" width="0.0248%" height="15" fill="rgb(254,188,9)" fg:x="1383" fg:w="1"/><text x="34.6017%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (55 samples, 1.37%)</title><rect x="33.1098%" y="933" width="1.3661%" height="15" fill="rgb(206,112,54)" fg:x="1333" fg:w="55"/><text x="33.3598%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (53 samples, 1.32%)</title><rect x="33.1595%" y="917" width="1.3164%" height="15" fill="rgb(216,84,49)" fg:x="1335" fg:w="53"/><text x="33.4095%" y="927.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (53 samples, 1.32%)</title><rect x="33.1595%" y="901" width="1.3164%" height="15" fill="rgb(214,194,35)" fg:x="1335" fg:w="53"/><text x="33.4095%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (53 samples, 1.32%)</title><rect x="33.1595%" y="885" width="1.3164%" height="15" fill="rgb(249,28,3)" fg:x="1335" fg:w="53"/><text x="33.4095%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (53 samples, 1.32%)</title><rect x="33.1595%" y="869" width="1.3164%" height="15" fill="rgb(222,56,52)" fg:x="1335" fg:w="53"/><text x="33.4095%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (53 samples, 1.32%)</title><rect x="33.1595%" y="853" width="1.3164%" height="15" fill="rgb(245,217,50)" fg:x="1335" fg:w="53"/><text x="33.4095%" y="863.50"></text></g><g><title>alloc::alloc::alloc (53 samples, 1.32%)</title><rect x="33.1595%" y="837" width="1.3164%" height="15" fill="rgb(213,201,24)" fg:x="1335" fg:w="53"/><text x="33.4095%" y="847.50"></text></g><g><title>__rust_alloc (53 samples, 1.32%)</title><rect x="33.1595%" y="821" width="1.3164%" height="15" fill="rgb(248,116,28)" fg:x="1335" fg:w="53"/><text x="33.4095%" y="831.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (53 samples, 1.32%)</title><rect x="33.1595%" y="805" width="1.3164%" height="15" fill="rgb(219,72,43)" fg:x="1335" fg:w="53"/><text x="33.4095%" y="815.50"></text></g><g><title>mi_malloc_aligned (4 samples, 0.10%)</title><rect x="34.3766%" y="789" width="0.0994%" height="15" fill="rgb(209,138,14)" fg:x="1384" fg:w="4"/><text x="34.6266%" y="799.50"></text></g><g><title>mi_prim_get_default_heap (2 samples, 0.05%)</title><rect x="34.4262%" y="773" width="0.0497%" height="15" fill="rgb(222,18,33)" fg:x="1386" fg:w="2"/><text x="34.6762%" y="783.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1 samples, 0.02%)</title><rect x="34.5504%" y="901" width="0.0248%" height="15" fill="rgb(213,199,7)" fg:x="1391" fg:w="1"/><text x="34.8004%" y="911.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (1 samples, 0.02%)</title><rect x="34.5504%" y="885" width="0.0248%" height="15" fill="rgb(250,110,10)" fg:x="1391" fg:w="1"/><text x="34.8004%" y="895.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (5 samples, 0.12%)</title><rect x="34.4759%" y="933" width="0.1242%" height="15" fill="rgb(248,123,6)" fg:x="1388" fg:w="5"/><text x="34.7259%" y="943.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (5 samples, 0.12%)</title><rect x="34.4759%" y="917" width="0.1242%" height="15" fill="rgb(206,91,31)" fg:x="1388" fg:w="5"/><text x="34.7259%" y="927.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.02%)</title><rect x="34.5753%" y="901" width="0.0248%" height="15" fill="rgb(211,154,13)" fg:x="1392" fg:w="1"/><text x="34.8253%" y="911.50"></text></g><g><title>mi_page_queue_is_special (1 samples, 0.02%)</title><rect x="34.8485%" y="805" width="0.0248%" height="15" fill="rgb(225,148,7)" fg:x="1403" fg:w="1"/><text x="35.0985%" y="815.50"></text></g><g><title>mi_bin (7 samples, 0.17%)</title><rect x="34.9478%" y="773" width="0.1739%" height="15" fill="rgb(220,160,43)" fg:x="1407" fg:w="7"/><text x="35.1978%" y="783.50"></text></g><g><title>mi_page_queue_of (11 samples, 0.27%)</title><rect x="34.8733%" y="805" width="0.2732%" height="15" fill="rgb(213,52,39)" fg:x="1404" fg:w="11"/><text x="35.1233%" y="815.50"></text></g><g><title>mi_heap_page_queue_of (11 samples, 0.27%)</title><rect x="34.8733%" y="789" width="0.2732%" height="15" fill="rgb(243,137,7)" fg:x="1404" fg:w="11"/><text x="35.1233%" y="799.50"></text></g><g><title>mi_page_block_size (1 samples, 0.02%)</title><rect x="35.1217%" y="773" width="0.0248%" height="15" fill="rgb(230,79,13)" fg:x="1414" fg:w="1"/><text x="35.3717%" y="783.50"></text></g><g><title>_mi_page_retire (21 samples, 0.52%)</title><rect x="34.6498%" y="821" width="0.5216%" height="15" fill="rgb(247,105,23)" fg:x="1395" fg:w="21"/><text x="34.8998%" y="831.50"></text></g><g><title>mi_page_set_has_aligned (1 samples, 0.02%)</title><rect x="35.1465%" y="805" width="0.0248%" height="15" fill="rgb(223,179,41)" fg:x="1415" fg:w="1"/><text x="35.3965%" y="815.50"></text></g><g><title>_mi_segment_page_of (5 samples, 0.12%)</title><rect x="35.2211%" y="805" width="0.1242%" height="15" fill="rgb(218,9,34)" fg:x="1418" fg:w="5"/><text x="35.4711%" y="815.50"></text></g><g><title>mi_slice_first (5 samples, 0.12%)</title><rect x="35.2211%" y="789" width="0.1242%" height="15" fill="rgb(222,106,8)" fg:x="1418" fg:w="5"/><text x="35.4711%" y="799.50"></text></g><g><title>mi_checked_ptr_segment (5 samples, 0.12%)</title><rect x="35.3453%" y="805" width="0.1242%" height="15" fill="rgb(211,220,0)" fg:x="1423" fg:w="5"/><text x="35.5953%" y="815.50"></text></g><g><title>_mi_ptr_segment (5 samples, 0.12%)</title><rect x="35.3453%" y="789" width="0.1242%" height="15" fill="rgb(229,52,16)" fg:x="1423" fg:w="5"/><text x="35.5953%" y="799.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.94%)</title><rect x="34.6498%" y="901" width="0.9439%" height="15" fill="rgb(212,155,18)" fg:x="1395" fg:w="38"/><text x="34.8998%" y="911.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (38 samples, 0.94%)</title><rect x="34.6498%" y="885" width="0.9439%" height="15" fill="rgb(242,21,14)" fg:x="1395" fg:w="38"/><text x="34.8998%" y="895.50"></text></g><g><title>alloc::alloc::dealloc (38 samples, 0.94%)</title><rect x="34.6498%" y="869" width="0.9439%" height="15" fill="rgb(222,19,48)" fg:x="1395" fg:w="38"/><text x="34.8998%" y="879.50"></text></g><g><title>__rust_dealloc (38 samples, 0.94%)</title><rect x="34.6498%" y="853" width="0.9439%" height="15" fill="rgb(232,45,27)" fg:x="1395" fg:w="38"/><text x="34.8998%" y="863.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (38 samples, 0.94%)</title><rect x="34.6498%" y="837" width="0.9439%" height="15" fill="rgb(249,103,42)" fg:x="1395" fg:w="38"/><text x="34.8998%" y="847.50"></text></g><g><title>mi_free (17 samples, 0.42%)</title><rect x="35.1714%" y="821" width="0.4223%" height="15" fill="rgb(246,81,33)" fg:x="1416" fg:w="17"/><text x="35.4214%" y="831.50"></text></g><g><title>mi_free_block_local (5 samples, 0.12%)</title><rect x="35.4694%" y="805" width="0.1242%" height="15" fill="rgb(252,33,42)" fg:x="1428" fg:w="5"/><text x="35.7194%" y="815.50"></text></g><g><title>mi_block_set_next (1 samples, 0.02%)</title><rect x="35.5688%" y="789" width="0.0248%" height="15" fill="rgb(209,212,41)" fg:x="1432" fg:w="1"/><text x="35.8188%" y="799.50"></text></g><g><title>mi_block_set_nextx (1 samples, 0.02%)</title><rect x="35.5688%" y="773" width="0.0248%" height="15" fill="rgb(207,154,6)" fg:x="1432" fg:w="1"/><text x="35.8188%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::{{closure}}::{{closure}}::{{closure}}::_decode_async&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}&gt;&gt;&gt; (51 samples, 1.27%)</title><rect x="34.6001%" y="933" width="1.2668%" height="15" fill="rgb(223,64,47)" fg:x="1393" fg:w="51"/><text x="34.8501%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::{{closure}}::{{closure}}::{{closure}}::_decode_async&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}&gt;&gt; (51 samples, 1.27%)</title><rect x="34.6001%" y="917" width="1.2668%" height="15" fill="rgb(211,161,38)" fg:x="1393" fg:w="51"/><text x="34.8501%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::{{closure}}::{{closure}}::{{closure}}::_decode_async&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}&gt; (11 samples, 0.27%)</title><rect x="35.5936%" y="901" width="0.2732%" height="15" fill="rgb(219,138,40)" fg:x="1433" fg:w="11"/><text x="35.8436%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_length_async&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}&gt; (2 samples, 0.05%)</title><rect x="35.8669%" y="933" width="0.0497%" height="15" fill="rgb(241,228,46)" fg:x="1444" fg:w="2"/><text x="36.1169%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::BytesMut&gt; (20 samples, 0.50%)</title><rect x="36.5872%" y="917" width="0.4968%" height="15" fill="rgb(223,209,38)" fg:x="1473" fg:w="20"/><text x="36.8372%" y="927.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (20 samples, 0.50%)</title><rect x="36.5872%" y="901" width="0.4968%" height="15" fill="rgb(236,164,45)" fg:x="1473" fg:w="20"/><text x="36.8372%" y="911.50"></text></g><g><title>bytes::bytes_mut::release_shared (19 samples, 0.47%)</title><rect x="36.6120%" y="885" width="0.4719%" height="15" fill="rgb(231,15,5)" fg:x="1474" fg:w="19"/><text x="36.8620%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (19 samples, 0.47%)</title><rect x="36.6120%" y="869" width="0.4719%" height="15" fill="rgb(252,35,15)" fg:x="1474" fg:w="19"/><text x="36.8620%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_sub (19 samples, 0.47%)</title><rect x="36.6120%" y="853" width="0.4719%" height="15" fill="rgb(248,181,18)" fg:x="1474" fg:w="19"/><text x="36.8620%" y="863.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::remaining (1 samples, 0.02%)</title><rect x="38.4252%" y="869" width="0.0248%" height="15" fill="rgb(233,39,42)" fg:x="1547" fg:w="1"/><text x="38.6752%" y="879.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::remaining (1 samples, 0.02%)</title><rect x="38.4252%" y="853" width="0.0248%" height="15" fill="rgb(238,110,33)" fg:x="1547" fg:w="1"/><text x="38.6752%" y="863.50"></text></g><g><title>bytes::bytes_mut::BytesMut::len (1 samples, 0.02%)</title><rect x="38.4252%" y="837" width="0.0248%" height="15" fill="rgb(233,195,10)" fg:x="1547" fg:w="1"/><text x="38.6752%" y="847.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (3 samples, 0.07%)</title><rect x="38.4252%" y="885" width="0.0745%" height="15" fill="rgb(254,105,3)" fg:x="1547" fg:w="3"/><text x="38.6752%" y="895.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (2 samples, 0.05%)</title><rect x="38.4501%" y="869" width="0.0497%" height="15" fill="rgb(221,225,9)" fg:x="1548" fg:w="2"/><text x="38.7001%" y="879.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (2 samples, 0.05%)</title><rect x="38.4501%" y="853" width="0.0497%" height="15" fill="rgb(224,227,45)" fg:x="1548" fg:w="2"/><text x="38.7001%" y="863.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="38.4998%" y="885" width="0.0248%" height="15" fill="rgb(229,198,43)" fg:x="1550" fg:w="1"/><text x="38.7498%" y="895.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::convert::AsRef&lt;[u8]&gt;&gt;::as_ref (1 samples, 0.02%)</title><rect x="38.4998%" y="869" width="0.0248%" height="15" fill="rgb(206,209,35)" fg:x="1550" fg:w="1"/><text x="38.7498%" y="879.50"></text></g><g><title>bytes::bytes_mut::BytesMut::as_slice (1 samples, 0.02%)</title><rect x="38.4998%" y="853" width="0.0248%" height="15" fill="rgb(245,195,53)" fg:x="1550" fg:w="1"/><text x="38.7498%" y="863.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (2 samples, 0.05%)</title><rect x="38.5743%" y="853" width="0.0497%" height="15" fill="rgb(240,92,26)" fg:x="1553" fg:w="2"/><text x="38.8243%" y="863.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (3 samples, 0.07%)</title><rect x="38.5743%" y="869" width="0.0745%" height="15" fill="rgb(207,40,23)" fg:x="1553" fg:w="3"/><text x="38.8243%" y="879.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.02%)</title><rect x="38.6239%" y="853" width="0.0248%" height="15" fill="rgb(223,111,35)" fg:x="1555" fg:w="1"/><text x="38.8739%" y="863.50"></text></g><g><title>bytes::bytes_mut::BytesMut::len (1 samples, 0.02%)</title><rect x="38.6488%" y="869" width="0.0248%" height="15" fill="rgb(229,147,28)" fg:x="1556" fg:w="1"/><text x="38.8988%" y="879.50"></text></g><g><title>bytes::bytes_mut::increment_shared (22 samples, 0.55%)</title><rect x="38.6736%" y="853" width="0.5464%" height="15" fill="rgb(211,29,28)" fg:x="1557" fg:w="22"/><text x="38.9236%" y="863.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (29 samples, 0.72%)</title><rect x="38.5246%" y="885" width="0.7203%" height="15" fill="rgb(228,72,33)" fg:x="1551" fg:w="29"/><text x="38.7746%" y="895.50"></text></g><g><title>bytes::bytes_mut::BytesMut::shallow_clone (23 samples, 0.57%)</title><rect x="38.6736%" y="869" width="0.5713%" height="15" fill="rgb(205,214,31)" fg:x="1557" fg:w="23"/><text x="38.9236%" y="879.50"></text></g><g><title>core::ptr::read (1 samples, 0.02%)</title><rect x="39.2201%" y="853" width="0.0248%" height="15" fill="rgb(224,111,15)" fg:x="1579" fg:w="1"/><text x="39.4701%" y="863.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (4 samples, 0.10%)</title><rect x="39.4933%" y="773" width="0.0994%" height="15" fill="rgb(253,21,26)" fg:x="1590" fg:w="4"/><text x="39.7433%" y="783.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (4 samples, 0.10%)</title><rect x="39.4933%" y="757" width="0.0994%" height="15" fill="rgb(245,139,43)" fg:x="1590" fg:w="4"/><text x="39.7433%" y="767.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (4 samples, 0.10%)</title><rect x="39.4933%" y="741" width="0.0994%" height="15" fill="rgb(252,170,7)" fg:x="1590" fg:w="4"/><text x="39.7433%" y="751.50"></text></g><g><title>memchr::vector::x86avx2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m256i&gt;::movemask (4 samples, 0.10%)</title><rect x="39.4933%" y="725" width="0.0994%" height="15" fill="rgb(231,118,14)" fg:x="1590" fg:w="4"/><text x="39.7433%" y="735.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (4 samples, 0.10%)</title><rect x="39.4933%" y="709" width="0.0994%" height="15" fill="rgb(238,83,0)" fg:x="1590" fg:w="4"/><text x="39.7433%" y="719.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (7 samples, 0.17%)</title><rect x="39.4436%" y="789" width="0.1739%" height="15" fill="rgb(221,39,39)" fg:x="1588" fg:w="7"/><text x="39.6936%" y="799.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_sse2 (1 samples, 0.02%)</title><rect x="39.5926%" y="773" width="0.0248%" height="15" fill="rgb(222,119,46)" fg:x="1594" fg:w="1"/><text x="39.8426%" y="783.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (1 samples, 0.02%)</title><rect x="39.5926%" y="757" width="0.0248%" height="15" fill="rgb(222,165,49)" fg:x="1594" fg:w="1"/><text x="39.8426%" y="767.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (1 samples, 0.02%)</title><rect x="39.5926%" y="741" width="0.0248%" height="15" fill="rgb(219,113,52)" fg:x="1594" fg:w="1"/><text x="39.8426%" y="751.50"></text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_line_async::_{{closure}} (103 samples, 2.56%)</title><rect x="37.0840%" y="917" width="2.5584%" height="15" fill="rgb(214,7,15)" fg:x="1493" fg:w="103"/><text x="37.3340%" y="927.50">ru..</text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_line (69 samples, 1.71%)</title><rect x="37.9285%" y="901" width="1.7139%" height="15" fill="rgb(235,32,4)" fg:x="1527" fg:w="69"/><text x="38.1785%" y="911.50"></text></g><g><title>memchr::memchr::memchr (16 samples, 0.40%)</title><rect x="39.2449%" y="885" width="0.3974%" height="15" fill="rgb(238,90,54)" fg:x="1580" fg:w="16"/><text x="39.4949%" y="895.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (16 samples, 0.40%)</title><rect x="39.2449%" y="869" width="0.3974%" height="15" fill="rgb(213,208,19)" fg:x="1580" fg:w="16"/><text x="39.4949%" y="879.50"></text></g><g><title>memchr::memchr::memchr::_{{closure}} (16 samples, 0.40%)</title><rect x="39.2449%" y="853" width="0.3974%" height="15" fill="rgb(233,156,4)" fg:x="1580" fg:w="16"/><text x="39.4949%" y="863.50"></text></g><g><title>memchr::memchr::memchr_raw (16 samples, 0.40%)</title><rect x="39.2449%" y="837" width="0.3974%" height="15" fill="rgb(207,194,5)" fg:x="1580" fg:w="16"/><text x="39.4949%" y="847.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (16 samples, 0.40%)</title><rect x="39.2449%" y="821" width="0.3974%" height="15" fill="rgb(206,111,30)" fg:x="1580" fg:w="16"/><text x="39.4949%" y="831.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (15 samples, 0.37%)</title><rect x="39.2697%" y="805" width="0.3726%" height="15" fill="rgb(243,70,54)" fg:x="1581" fg:w="15"/><text x="39.5197%" y="815.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::new_unchecked (1 samples, 0.02%)</title><rect x="39.6175%" y="789" width="0.0248%" height="15" fill="rgb(242,28,8)" fg:x="1595" fg:w="1"/><text x="39.8675%" y="799.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as snafu::OptionExt&lt;T&gt;&gt;::with_context (4 samples, 0.10%)</title><rect x="39.6920%" y="901" width="0.0994%" height="15" fill="rgb(219,106,18)" fg:x="1598" fg:w="4"/><text x="39.9420%" y="911.50"></text></g><g><title>&lt;i128 as core::ops::arith::AddAssign&gt;::add_assign (1 samples, 0.02%)</title><rect x="39.8410%" y="869" width="0.0248%" height="15" fill="rgb(244,222,10)" fg:x="1604" fg:w="1"/><text x="40.0910%" y="879.50"></text></g><g><title>&lt;i128 as core::ops::arith::MulAssign&gt;::mul_assign (2 samples, 0.05%)</title><rect x="39.8659%" y="869" width="0.0497%" height="15" fill="rgb(236,179,52)" fg:x="1605" fg:w="2"/><text x="40.1159%" y="879.50"></text></g><g><title>atoi::ascii_to_digit (4 samples, 0.10%)</title><rect x="39.9155%" y="869" width="0.0994%" height="15" fill="rgb(213,23,39)" fg:x="1607" fg:w="4"/><text x="40.1655%" y="879.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (1 samples, 0.02%)</title><rect x="40.0149%" y="869" width="0.0248%" height="15" fill="rgb(238,48,10)" fg:x="1611" fg:w="1"/><text x="40.2649%" y="879.50"></text></g><g><title>&lt;I as atoi::FromRadix10SignedChecked&gt;::from_radix_10_signed_checked::_{{closure}} (1 samples, 0.02%)</title><rect x="40.0149%" y="853" width="0.0248%" height="15" fill="rgb(251,196,23)" fg:x="1611" fg:w="1"/><text x="40.2649%" y="863.50"></text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_decimal_async::_{{closure}} (167 samples, 4.15%)</title><rect x="35.9165%" y="933" width="4.1480%" height="15" fill="rgb(250,152,24)" fg:x="1446" fg:w="167"/><text x="36.1665%" y="943.50">rutin..</text></g><g><title>rutin::util::atoi (17 samples, 0.42%)</title><rect x="39.6423%" y="917" width="0.4223%" height="15" fill="rgb(209,150,17)" fg:x="1596" fg:w="17"/><text x="39.8923%" y="927.50"></text></g><g><title>atoi::atoi (11 samples, 0.27%)</title><rect x="39.7914%" y="901" width="0.2732%" height="15" fill="rgb(234,202,34)" fg:x="1602" fg:w="11"/><text x="40.0414%" y="911.50"></text></g><g><title>&lt;I as atoi::FromRadix10SignedChecked&gt;::from_radix_10_signed_checked (11 samples, 0.27%)</title><rect x="39.7914%" y="885" width="0.2732%" height="15" fill="rgb(253,148,53)" fg:x="1602" fg:w="11"/><text x="40.0414%" y="895.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::first (1 samples, 0.02%)</title><rect x="40.0397%" y="869" width="0.0248%" height="15" fill="rgb(218,129,16)" fg:x="1612" fg:w="1"/><text x="40.2897%" y="879.50"></text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::_{{closure}} (1,398 samples, 34.72%)</title><rect x="5.4148%" y="997" width="34.7243%" height="15" fill="rgb(216,85,19)" fg:x="218" fg:w="1398"/><text x="5.6648%" y="1007.50">rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_..</text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::_{{closure}}::_{{closure}} (1,315 samples, 32.66%)</title><rect x="7.4764%" y="981" width="32.6627%" height="15" fill="rgb(235,228,7)" fg:x="301" fg:w="1315"/><text x="7.7264%" y="991.50">rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::deco..</text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::_{{closure}}::_{{closure}}::_{{closure}} (1,249 samples, 31.02%)</title><rect x="9.1157%" y="965" width="31.0233%" height="15" fill="rgb(245,175,0)" fg:x="367" fg:w="1249"/><text x="9.3657%" y="975.50">rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::d..</text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::_{{closure}}::_{{closure}}::_{{closure}}::_decode_async::_{{closure}} (1,186 samples, 29.46%)</title><rect x="10.6806%" y="949" width="29.4585%" height="15" fill="rgb(208,168,36)" fg:x="430" fg:w="1186"/><text x="10.9306%" y="959.50">rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;..</text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::get_u8 (3 samples, 0.07%)</title><rect x="40.0646%" y="933" width="0.0745%" height="15" fill="rgb(246,171,24)" fg:x="1613" fg:w="3"/><text x="40.3146%" y="943.50"></text></g><g><title>bytes::buf::buf_impl::Buf::get_u8 (3 samples, 0.07%)</title><rect x="40.0646%" y="917" width="0.0745%" height="15" fill="rgb(215,142,24)" fg:x="1613" fg:w="3"/><text x="40.3146%" y="927.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (2 samples, 0.05%)</title><rect x="40.0894%" y="901" width="0.0497%" height="15" fill="rgb(250,187,7)" fg:x="1614" fg:w="2"/><text x="40.3394%" y="911.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (2 samples, 0.05%)</title><rect x="40.0894%" y="885" width="0.0497%" height="15" fill="rgb(228,66,33)" fg:x="1614" fg:w="2"/><text x="40.3394%" y="895.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.02%)</title><rect x="40.1639%" y="981" width="0.0248%" height="15" fill="rgb(234,215,21)" fg:x="1617" fg:w="1"/><text x="40.4139%" y="991.50"></text></g><g><title>core::ptr::write (31 samples, 0.77%)</title><rect x="40.1888%" y="981" width="0.7700%" height="15" fill="rgb(222,191,20)" fg:x="1618" fg:w="31"/><text x="40.4388%" y="991.50"></text></g><g><title>[libc.so.6] (30 samples, 0.75%)</title><rect x="40.2136%" y="965" width="0.7452%" height="15" fill="rgb(245,79,54)" fg:x="1619" fg:w="30"/><text x="40.4636%" y="975.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="40.9588%" y="949" width="0.0248%" height="15" fill="rgb(240,10,37)" fg:x="1649" fg:w="1"/><text x="41.2088%" y="959.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="40.9588%" y="933" width="0.0248%" height="15" fill="rgb(214,192,32)" fg:x="1649" fg:w="1"/><text x="41.2088%" y="943.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.02%)</title><rect x="40.9588%" y="917" width="0.0248%" height="15" fill="rgb(209,36,54)" fg:x="1649" fg:w="1"/><text x="41.2088%" y="927.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.02%)</title><rect x="40.9588%" y="901" width="0.0248%" height="15" fill="rgb(220,10,11)" fg:x="1649" fg:w="1"/><text x="41.2088%" y="911.50"></text></g><g><title>_mi_heap_malloc_zero (1 samples, 0.02%)</title><rect x="40.9588%" y="885" width="0.0248%" height="15" fill="rgb(221,106,17)" fg:x="1649" fg:w="1"/><text x="41.2088%" y="895.50"></text></g><g><title>_mi_heap_malloc_zero_ex (1 samples, 0.02%)</title><rect x="40.9588%" y="869" width="0.0248%" height="15" fill="rgb(251,142,44)" fg:x="1649" fg:w="1"/><text x="41.2088%" y="879.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.02%)</title><rect x="40.9588%" y="853" width="0.0248%" height="15" fill="rgb(238,13,15)" fg:x="1649" fg:w="1"/><text x="41.2088%" y="863.50"></text></g><g><title>mi_find_page (1 samples, 0.02%)</title><rect x="40.9588%" y="837" width="0.0248%" height="15" fill="rgb(208,107,27)" fg:x="1649" fg:w="1"/><text x="41.2088%" y="847.50"></text></g><g><title>mi_find_free_page (1 samples, 0.02%)</title><rect x="40.9588%" y="821" width="0.0248%" height="15" fill="rgb(205,136,37)" fg:x="1649" fg:w="1"/><text x="41.2088%" y="831.50"></text></g><g><title>_mi_page_free_collect (1 samples, 0.02%)</title><rect x="40.9588%" y="805" width="0.0248%" height="15" fill="rgb(250,205,27)" fg:x="1649" fg:w="1"/><text x="41.2088%" y="815.50"></text></g><g><title>_mi_memcpy_aligned (32 samples, 0.79%)</title><rect x="40.9836%" y="821" width="0.7948%" height="15" fill="rgb(210,80,43)" fg:x="1650" fg:w="32"/><text x="41.2336%" y="831.50"></text></g><g><title>_mi_memcpy (32 samples, 0.79%)</title><rect x="40.9836%" y="805" width="0.7948%" height="15" fill="rgb(247,160,36)" fg:x="1650" fg:w="32"/><text x="41.2336%" y="815.50"></text></g><g><title>[libc.so.6] (32 samples, 0.79%)</title><rect x="40.9836%" y="789" width="0.7948%" height="15" fill="rgb(234,13,49)" fg:x="1650" fg:w="32"/><text x="41.2336%" y="799.50"></text></g><g><title>alloc::alloc::realloc (36 samples, 0.89%)</title><rect x="40.9836%" y="949" width="0.8942%" height="15" fill="rgb(234,122,0)" fg:x="1650" fg:w="36"/><text x="41.2336%" y="959.50"></text></g><g><title>__rust_realloc (36 samples, 0.89%)</title><rect x="40.9836%" y="933" width="0.8942%" height="15" fill="rgb(207,146,38)" fg:x="1650" fg:w="36"/><text x="41.2336%" y="943.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (36 samples, 0.89%)</title><rect x="40.9836%" y="917" width="0.8942%" height="15" fill="rgb(207,177,25)" fg:x="1650" fg:w="36"/><text x="41.2336%" y="927.50"></text></g><g><title>mi_heap_realloc_aligned (36 samples, 0.89%)</title><rect x="40.9836%" y="901" width="0.8942%" height="15" fill="rgb(211,178,42)" fg:x="1650" fg:w="36"/><text x="41.2336%" y="911.50"></text></g><g><title>mi_heap_realloc_zero_aligned (36 samples, 0.89%)</title><rect x="40.9836%" y="885" width="0.8942%" height="15" fill="rgb(230,69,54)" fg:x="1650" fg:w="36"/><text x="41.2336%" y="895.50"></text></g><g><title>mi_heap_realloc_zero_aligned (36 samples, 0.89%)</title><rect x="40.9836%" y="869" width="0.8942%" height="15" fill="rgb(214,135,41)" fg:x="1650" fg:w="36"/><text x="41.2336%" y="879.50"></text></g><g><title>mi_heap_realloc_zero_aligned_at (36 samples, 0.89%)</title><rect x="40.9836%" y="853" width="0.8942%" height="15" fill="rgb(237,67,25)" fg:x="1650" fg:w="36"/><text x="41.2336%" y="863.50"></text></g><g><title>mi_heap_realloc_zero_aligned_at (36 samples, 0.89%)</title><rect x="40.9836%" y="837" width="0.8942%" height="15" fill="rgb(222,189,50)" fg:x="1650" fg:w="36"/><text x="41.2336%" y="847.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (4 samples, 0.10%)</title><rect x="41.7784%" y="821" width="0.0994%" height="15" fill="rgb(245,148,34)" fg:x="1682" fg:w="4"/><text x="42.0284%" y="831.50"></text></g><g><title>_mi_heap_malloc_zero (4 samples, 0.10%)</title><rect x="41.7784%" y="805" width="0.0994%" height="15" fill="rgb(222,29,6)" fg:x="1682" fg:w="4"/><text x="42.0284%" y="815.50"></text></g><g><title>_mi_heap_malloc_zero_ex (4 samples, 0.10%)</title><rect x="41.7784%" y="789" width="0.0994%" height="15" fill="rgb(221,189,43)" fg:x="1682" fg:w="4"/><text x="42.0284%" y="799.50"></text></g><g><title>_mi_malloc_generic (4 samples, 0.10%)</title><rect x="41.7784%" y="773" width="0.0994%" height="15" fill="rgb(207,36,27)" fg:x="1682" fg:w="4"/><text x="42.0284%" y="783.50"></text></g><g><title>_mi_page_malloc_zero (4 samples, 0.10%)</title><rect x="41.7784%" y="757" width="0.0994%" height="15" fill="rgb(217,90,24)" fg:x="1682" fg:w="4"/><text x="42.0284%" y="767.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.05%)</title><rect x="41.8778%" y="949" width="0.0497%" height="15" fill="rgb(224,66,35)" fg:x="1686" fg:w="2"/><text x="42.1278%" y="959.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="41.8778%" y="933" width="0.0497%" height="15" fill="rgb(221,13,50)" fg:x="1686" fg:w="2"/><text x="42.1278%" y="943.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::reserve_one_unchecked (40 samples, 0.99%)</title><rect x="40.9588%" y="981" width="0.9935%" height="15" fill="rgb(236,68,49)" fg:x="1649" fg:w="40"/><text x="41.2088%" y="991.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::try_grow (40 samples, 0.99%)</title><rect x="40.9588%" y="965" width="0.9935%" height="15" fill="rgb(229,146,28)" fg:x="1649" fg:w="40"/><text x="41.2088%" y="975.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple_mut (1 samples, 0.02%)</title><rect x="41.9275%" y="949" width="0.0248%" height="15" fill="rgb(225,31,38)" fg:x="1688" fg:w="1"/><text x="42.1775%" y="959.50"></text></g><g><title>rutin::connection::Connection&lt;S&gt;::read_frames::_{{closure}}::_{{closure}} (1,652 samples, 41.03%)</title><rect x="1.0432%" y="1029" width="41.0333%" height="15" fill="rgb(250,208,3)" fg:x="42" fg:w="1652"/><text x="1.2932%" y="1039.50">rutin::connection::Connection&lt;S&gt;::read_frames::_{{closure}}::_{{clo..</text></g><g><title>rutin::connection::Connection&lt;S&gt;::read_frames::_{{closure}}::_{{closure}}::_{{closure}} (1,645 samples, 40.86%)</title><rect x="1.2171%" y="1013" width="40.8594%" height="15" fill="rgb(246,54,23)" fg:x="49" fg:w="1645"/><text x="1.4671%" y="1023.50">rutin::connection::Connection&lt;S&gt;::read_frames::_{{closure}}::_{{clo..</text></g><g><title>smallvec::SmallVec&lt;A&gt;::push (78 samples, 1.94%)</title><rect x="40.1391%" y="997" width="1.9374%" height="15" fill="rgb(243,76,11)" fg:x="1616" fg:w="78"/><text x="40.3891%" y="1007.50">s..</text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple_mut (5 samples, 0.12%)</title><rect x="41.9523%" y="981" width="0.1242%" height="15" fill="rgb(245,21,50)" fg:x="1689" fg:w="5"/><text x="42.2023%" y="991.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (33 samples, 0.82%)</title><rect x="42.5981%" y="933" width="0.8197%" height="15" fill="rgb(228,9,43)" fg:x="1715" fg:w="33"/><text x="42.8481%" y="943.50"></text></g><g><title>[libc.so.6] (30 samples, 0.75%)</title><rect x="42.6726%" y="917" width="0.7452%" height="15" fill="rgb(208,100,47)" fg:x="1718" fg:w="30"/><text x="42.9226%" y="927.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (33 samples, 0.82%)</title><rect x="43.4178%" y="933" width="0.8197%" height="15" fill="rgb(232,26,8)" fg:x="1748" fg:w="33"/><text x="43.6678%" y="943.50"></text></g><g><title>[libc.so.6] (32 samples, 0.79%)</title><rect x="43.4426%" y="917" width="0.7948%" height="15" fill="rgb(216,166,38)" fg:x="1749" fg:w="32"/><text x="43.6926%" y="927.50"></text></g><g><title>core::ptr::read (37 samples, 0.92%)</title><rect x="44.2871%" y="917" width="0.9190%" height="15" fill="rgb(251,202,51)" fg:x="1783" fg:w="37"/><text x="44.5371%" y="927.50"></text></g><g><title>[libc.so.6] (36 samples, 0.89%)</title><rect x="44.3120%" y="901" width="0.8942%" height="15" fill="rgb(254,216,34)" fg:x="1784" fg:w="36"/><text x="44.5620%" y="911.50"></text></g><g><title>&lt;smallvec::IntoIter&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 0.99%)</title><rect x="44.2375%" y="933" width="0.9935%" height="15" fill="rgb(251,32,27)" fg:x="1781" fg:w="40"/><text x="44.4875%" y="943.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::as_ptr (1 samples, 0.02%)</title><rect x="45.2062%" y="917" width="0.0248%" height="15" fill="rgb(208,127,28)" fg:x="1820" fg:w="1"/><text x="45.4562%" y="927.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple (1 samples, 0.02%)</title><rect x="45.2062%" y="901" width="0.0248%" height="15" fill="rgb(224,137,22)" fg:x="1820" fg:w="1"/><text x="45.4562%" y="911.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::spilled (1 samples, 0.02%)</title><rect x="45.2062%" y="885" width="0.0248%" height="15" fill="rgb(254,70,32)" fg:x="1820" fg:w="1"/><text x="45.4562%" y="895.50"></text></g><g><title>&lt;async_shutdown::shutdown_signal::ShutdownSignal&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.05%)</title><rect x="45.2310%" y="901" width="0.0497%" height="15" fill="rgb(229,75,37)" fg:x="1821" fg:w="2"/><text x="45.4810%" y="911.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.02%)</title><rect x="45.2558%" y="885" width="0.0248%" height="15" fill="rgb(252,64,23)" fg:x="1822" fg:w="1"/><text x="45.5058%" y="895.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="45.2558%" y="869" width="0.0248%" height="15" fill="rgb(232,162,48)" fg:x="1822" fg:w="1"/><text x="45.5058%" y="879.50"></text></g><g><title>std::sync::poison::Flag::guard (1 samples, 0.02%)</title><rect x="45.2558%" y="853" width="0.0248%" height="15" fill="rgb(246,160,12)" fg:x="1822" fg:w="1"/><text x="45.5058%" y="863.50"></text></g><g><title>std::thread::panicking (1 samples, 0.02%)</title><rect x="45.2558%" y="837" width="0.0248%" height="15" fill="rgb(247,166,0)" fg:x="1822" fg:w="1"/><text x="45.5058%" y="847.50"></text></g><g><title>std::panicking::panicking (1 samples, 0.02%)</title><rect x="45.2558%" y="821" width="0.0248%" height="15" fill="rgb(249,219,21)" fg:x="1822" fg:w="1"/><text x="45.5058%" y="831.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (1 samples, 0.02%)</title><rect x="45.2558%" y="805" width="0.0248%" height="15" fill="rgb(205,209,3)" fg:x="1822" fg:w="1"/><text x="45.5058%" y="815.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="45.2807%" y="901" width="0.0497%" height="15" fill="rgb(243,44,1)" fg:x="1823" fg:w="2"/><text x="45.5307%" y="911.50"></text></g><g><title>[libc.so.6] (6 samples, 0.15%)</title><rect x="45.3552%" y="885" width="0.1490%" height="15" fill="rgb(206,159,16)" fg:x="1826" fg:w="6"/><text x="45.6052%" y="895.50"></text></g><g><title>rutin::connection::Connection&lt;S&gt;::read_frames::_{{closure}} (9 samples, 0.22%)</title><rect x="45.3304%" y="901" width="0.2235%" height="15" fill="rgb(244,77,30)" fg:x="1825" fg:w="9"/><text x="45.5804%" y="911.50"></text></g><g><title>rutin::connection::Connection&lt;S&gt;::read_frames::_{{closure}}::_{{closure}} (2 samples, 0.05%)</title><rect x="45.5042%" y="885" width="0.0497%" height="15" fill="rgb(218,69,12)" fg:x="1832" fg:w="2"/><text x="45.7542%" y="895.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.07%)</title><rect x="45.5539%" y="853" width="0.0745%" height="15" fill="rgb(212,87,7)" fg:x="1834" fg:w="3"/><text x="45.8039%" y="863.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 0.07%)</title><rect x="45.5539%" y="837" width="0.0745%" height="15" fill="rgb(245,114,25)" fg:x="1834" fg:w="3"/><text x="45.8039%" y="847.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.07%)</title><rect x="45.5539%" y="821" width="0.0745%" height="15" fill="rgb(210,61,42)" fg:x="1834" fg:w="3"/><text x="45.8039%" y="831.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.02%)</title><rect x="45.6533%" y="677" width="0.0248%" height="15" fill="rgb(211,52,33)" fg:x="1838" fg:w="1"/><text x="45.9033%" y="687.50"></text></g><g><title>_mi_page_malloc_zero (1 samples, 0.02%)</title><rect x="45.6533%" y="661" width="0.0248%" height="15" fill="rgb(234,58,33)" fg:x="1838" fg:w="1"/><text x="45.9033%" y="671.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (19 samples, 0.47%)</title><rect x="45.2310%" y="933" width="0.4719%" height="15" fill="rgb(220,115,36)" fg:x="1821" fg:w="19"/><text x="45.4810%" y="943.50"></text></g><g><title>rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}}::_{{closure}}::_{{closure}}::_{{closure}}::_{{closure}} (19 samples, 0.47%)</title><rect x="45.2310%" y="917" width="0.4719%" height="15" fill="rgb(243,153,54)" fg:x="1821" fg:w="19"/><text x="45.4810%" y="927.50"></text></g><g><title>rutin::server::bg_task_channel::BgTaskChannel::recv_from_bg_task::_{{closure}} (6 samples, 0.15%)</title><rect x="45.5539%" y="901" width="0.1490%" height="15" fill="rgb(251,47,18)" fg:x="1834" fg:w="6"/><text x="45.8039%" y="911.50"></text></g><g><title>&lt;flume::async::RecvFut&lt;T&gt; as core::future::future::Future&gt;::poll (6 samples, 0.15%)</title><rect x="45.5539%" y="885" width="0.1490%" height="15" fill="rgb(242,102,42)" fg:x="1834" fg:w="6"/><text x="45.8039%" y="895.50"></text></g><g><title>flume::async::RecvFut&lt;T&gt;::poll_inner (6 samples, 0.15%)</title><rect x="45.5539%" y="869" width="0.1490%" height="15" fill="rgb(234,31,38)" fg:x="1834" fg:w="6"/><text x="45.8039%" y="879.50"></text></g><g><title>flume::Shared&lt;T&gt;::recv (3 samples, 0.07%)</title><rect x="45.6284%" y="853" width="0.0745%" height="15" fill="rgb(221,117,51)" fg:x="1837" fg:w="3"/><text x="45.8784%" y="863.50"></text></g><g><title>flume::async::RecvFut&lt;T&gt;::poll_inner::_{{closure}} (3 samples, 0.07%)</title><rect x="45.6284%" y="837" width="0.0745%" height="15" fill="rgb(212,20,18)" fg:x="1837" fg:w="3"/><text x="45.8784%" y="847.50"></text></g><g><title>flume::Hook&lt;T,S&gt;::trigger (3 samples, 0.07%)</title><rect x="45.6284%" y="821" width="0.0745%" height="15" fill="rgb(245,133,36)" fg:x="1837" fg:w="3"/><text x="45.8784%" y="831.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (3 samples, 0.07%)</title><rect x="45.6284%" y="805" width="0.0745%" height="15" fill="rgb(212,6,19)" fg:x="1837" fg:w="3"/><text x="45.8784%" y="815.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (3 samples, 0.07%)</title><rect x="45.6284%" y="789" width="0.0745%" height="15" fill="rgb(218,1,36)" fg:x="1837" fg:w="3"/><text x="45.8784%" y="799.50"></text></g><g><title>alloc::alloc::exchange_malloc (3 samples, 0.07%)</title><rect x="45.6284%" y="773" width="0.0745%" height="15" fill="rgb(246,84,54)" fg:x="1837" fg:w="3"/><text x="45.8784%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.07%)</title><rect x="45.6284%" y="757" width="0.0745%" height="15" fill="rgb(242,110,6)" fg:x="1837" fg:w="3"/><text x="45.8784%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.07%)</title><rect x="45.6284%" y="741" width="0.0745%" height="15" fill="rgb(214,47,5)" fg:x="1837" fg:w="3"/><text x="45.8784%" y="751.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.07%)</title><rect x="45.6284%" y="725" width="0.0745%" height="15" fill="rgb(218,159,25)" fg:x="1837" fg:w="3"/><text x="45.8784%" y="735.50"></text></g><g><title>__rust_alloc (3 samples, 0.07%)</title><rect x="45.6284%" y="709" width="0.0745%" height="15" fill="rgb(215,211,28)" fg:x="1837" fg:w="3"/><text x="45.8784%" y="719.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (3 samples, 0.07%)</title><rect x="45.6284%" y="693" width="0.0745%" height="15" fill="rgb(238,59,32)" fg:x="1837" fg:w="3"/><text x="45.8784%" y="703.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.02%)</title><rect x="45.6781%" y="677" width="0.0248%" height="15" fill="rgb(226,82,3)" fg:x="1839" fg:w="1"/><text x="45.9281%" y="687.50"></text></g><g><title>_mi_heap_malloc_zero (1 samples, 0.02%)</title><rect x="45.6781%" y="661" width="0.0248%" height="15" fill="rgb(240,164,32)" fg:x="1839" fg:w="1"/><text x="45.9281%" y="671.50"></text></g><g><title>_mi_heap_malloc_zero_ex (1 samples, 0.02%)</title><rect x="45.6781%" y="645" width="0.0248%" height="15" fill="rgb(232,46,7)" fg:x="1839" fg:w="1"/><text x="45.9281%" y="655.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.02%)</title><rect x="45.6781%" y="629" width="0.0248%" height="15" fill="rgb(229,129,53)" fg:x="1839" fg:w="1"/><text x="45.9281%" y="639.50"></text></g><g><title>mi_find_page (1 samples, 0.02%)</title><rect x="45.6781%" y="613" width="0.0248%" height="15" fill="rgb(234,188,29)" fg:x="1839" fg:w="1"/><text x="45.9281%" y="623.50"></text></g><g><title>mi_find_free_page (1 samples, 0.02%)</title><rect x="45.6781%" y="597" width="0.0248%" height="15" fill="rgb(246,141,4)" fg:x="1839" fg:w="1"/><text x="45.9281%" y="607.50"></text></g><g><title>[libc.so.6] (132 samples, 3.28%)</title><rect x="45.7029%" y="933" width="3.2787%" height="15" fill="rgb(229,23,39)" fg:x="1840" fg:w="132"/><text x="45.9529%" y="943.50">[li..</text></g><g><title>async_shutdown::ShutdownManager&lt;T&gt;::wait_shutdown_triggered (2 samples, 0.05%)</title><rect x="48.9816%" y="933" width="0.0497%" height="15" fill="rgb(206,12,3)" fg:x="1972" fg:w="2"/><text x="49.2316%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.05%)</title><rect x="48.9816%" y="917" width="0.0497%" height="15" fill="rgb(252,226,20)" fg:x="1972" fg:w="2"/><text x="49.2316%" y="927.50"></text></g><g><title>async_shutdown::waker_list::WakerList::deregister (2 samples, 0.05%)</title><rect x="49.0313%" y="885" width="0.0497%" height="15" fill="rgb(216,123,35)" fg:x="1974" fg:w="2"/><text x="49.2813%" y="895.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (2 samples, 0.05%)</title><rect x="49.0313%" y="869" width="0.0497%" height="15" fill="rgb(212,68,40)" fg:x="1974" fg:w="2"/><text x="49.2813%" y="879.50"></text></g><g><title>core::mem::replace (2 samples, 0.05%)</title><rect x="49.0313%" y="853" width="0.0497%" height="15" fill="rgb(254,125,32)" fg:x="1974" fg:w="2"/><text x="49.2813%" y="863.50"></text></g><g><title>core::ptr::read (2 samples, 0.05%)</title><rect x="49.0313%" y="837" width="0.0497%" height="15" fill="rgb(253,97,22)" fg:x="1974" fg:w="2"/><text x="49.2813%" y="847.50"></text></g><g><title>tokio::runtime::task::core::Header::get_tracing_id (1 samples, 0.02%)</title><rect x="49.0810%" y="821" width="0.0248%" height="15" fill="rgb(241,101,14)" fg:x="1976" fg:w="1"/><text x="49.3310%" y="831.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.02%)</title><rect x="49.0810%" y="805" width="0.0248%" height="15" fill="rgb(238,103,29)" fg:x="1976" fg:w="1"/><text x="49.3310%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt; (2 samples, 0.05%)</title><rect x="49.0810%" y="885" width="0.0497%" height="15" fill="rgb(233,195,47)" fg:x="1976" fg:w="2"/><text x="49.3310%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (2 samples, 0.05%)</title><rect x="49.0810%" y="869" width="0.0497%" height="15" fill="rgb(246,218,30)" fg:x="1976" fg:w="2"/><text x="49.3310%" y="879.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="49.0810%" y="853" width="0.0497%" height="15" fill="rgb(219,145,47)" fg:x="1976" fg:w="2"/><text x="49.3310%" y="863.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (2 samples, 0.05%)</title><rect x="49.0810%" y="837" width="0.0497%" height="15" fill="rgb(243,12,26)" fg:x="1976" fg:w="2"/><text x="49.3310%" y="847.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::drop_reference (1 samples, 0.02%)</title><rect x="49.1058%" y="821" width="0.0248%" height="15" fill="rgb(214,87,16)" fg:x="1977" fg:w="1"/><text x="49.3558%" y="831.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (1 samples, 0.02%)</title><rect x="49.1058%" y="805" width="0.0248%" height="15" fill="rgb(208,99,42)" fg:x="1977" fg:w="1"/><text x="49.3558%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;(async_shutdown::shutdown_signal::ShutdownSignal&lt;()&gt;,rutin::connection::Connection::read_frames::{{closure}},rutin::server::bg_task_channel::BgTaskChannel::recv_from_bg_task::{{closure}})&gt; (8 samples, 0.20%)</title><rect x="49.0313%" y="933" width="0.1987%" height="15" fill="rgb(253,99,2)" fg:x="1974" fg:w="8"/><text x="49.2813%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_shutdown::shutdown_signal::ShutdownSignal&lt;()&gt;&gt; (8 samples, 0.20%)</title><rect x="49.0313%" y="917" width="0.1987%" height="15" fill="rgb(220,168,23)" fg:x="1974" fg:w="8"/><text x="49.2813%" y="927.50"></text></g><g><title>&lt;async_shutdown::shutdown_signal::ShutdownSignal&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.20%)</title><rect x="49.0313%" y="901" width="0.1987%" height="15" fill="rgb(242,38,24)" fg:x="1974" fg:w="8"/><text x="49.2813%" y="911.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (4 samples, 0.10%)</title><rect x="49.1307%" y="885" width="0.0994%" height="15" fill="rgb(225,182,9)" fg:x="1978" fg:w="4"/><text x="49.3807%" y="895.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (4 samples, 0.10%)</title><rect x="49.1307%" y="869" width="0.0994%" height="15" fill="rgb(243,178,37)" fg:x="1978" fg:w="4"/><text x="49.3807%" y="879.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (4 samples, 0.10%)</title><rect x="49.1307%" y="853" width="0.0994%" height="15" fill="rgb(232,139,19)" fg:x="1978" fg:w="4"/><text x="49.3807%" y="863.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (4 samples, 0.10%)</title><rect x="49.1307%" y="837" width="0.0994%" height="15" fill="rgb(225,201,24)" fg:x="1978" fg:w="4"/><text x="49.3807%" y="847.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain::_{{closure}} (1 samples, 0.02%)</title><rect x="49.2548%" y="853" width="0.0248%" height="15" fill="rgb(221,47,46)" fg:x="1983" fg:w="1"/><text x="49.5048%" y="863.50"></text></g><g><title>flume::async::RecvFut&lt;T&gt;::reset_hook::_{{closure}} (1 samples, 0.02%)</title><rect x="49.2548%" y="837" width="0.0248%" height="15" fill="rgb(249,23,13)" fg:x="1983" fg:w="1"/><text x="49.5048%" y="847.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain (2 samples, 0.05%)</title><rect x="49.2548%" y="885" width="0.0497%" height="15" fill="rgb(219,9,5)" fg:x="1983" fg:w="2"/><text x="49.5048%" y="895.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain_mut (2 samples, 0.05%)</title><rect x="49.2548%" y="869" width="0.0497%" height="15" fill="rgb(254,171,16)" fg:x="1983" fg:w="2"/><text x="49.5048%" y="879.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::truncate (1 samples, 0.02%)</title><rect x="49.2797%" y="853" width="0.0248%" height="15" fill="rgb(230,171,20)" fg:x="1984" fg:w="1"/><text x="49.5297%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::sync::Arc&lt;flume::Hook&lt;rutin::frame::Resp3,dyn flume::signal::Signal&gt;&gt;]&gt; (1 samples, 0.02%)</title><rect x="49.2797%" y="837" width="0.0248%" height="15" fill="rgb(210,71,41)" fg:x="1984" fg:w="1"/><text x="49.5297%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;flume::Hook&lt;rutin::frame::Resp3,dyn flume::signal::Signal&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="49.2797%" y="821" width="0.0248%" height="15" fill="rgb(206,173,20)" fg:x="1984" fg:w="1"/><text x="49.5297%" y="831.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="49.2797%" y="805" width="0.0248%" height="15" fill="rgb(233,88,34)" fg:x="1984" fg:w="1"/><text x="49.5297%" y="815.50"></text></g><g><title>mi_free (4 samples, 0.10%)</title><rect x="49.3045%" y="853" width="0.0994%" height="15" fill="rgb(223,209,46)" fg:x="1985" fg:w="4"/><text x="49.5545%" y="863.50"></text></g><g><title>_mi_segment_page_of (4 samples, 0.10%)</title><rect x="49.3045%" y="837" width="0.0994%" height="15" fill="rgb(250,43,18)" fg:x="1985" fg:w="4"/><text x="49.5545%" y="847.50"></text></g><g><title>mi_slice_first (4 samples, 0.10%)</title><rect x="49.3045%" y="821" width="0.0994%" height="15" fill="rgb(208,13,10)" fg:x="1985" fg:w="4"/><text x="49.5545%" y="831.50"></text></g><g><title>mi_free_block_delayed_mt (1 samples, 0.02%)</title><rect x="49.4039%" y="853" width="0.0248%" height="15" fill="rgb(212,200,36)" fg:x="1989" fg:w="1"/><text x="49.6539%" y="863.50"></text></g><g><title>mi_block_set_nextx (1 samples, 0.02%)</title><rect x="49.4039%" y="837" width="0.0248%" height="15" fill="rgb(225,90,30)" fg:x="1989" fg:w="1"/><text x="49.6539%" y="847.50"></text></g><g><title>mi_free_block_mt (1 samples, 0.02%)</title><rect x="49.4287%" y="853" width="0.0248%" height="15" fill="rgb(236,182,39)" fg:x="1990" fg:w="1"/><text x="49.6787%" y="863.50"></text></g><g><title>mi_option_is_enabled (1 samples, 0.02%)</title><rect x="49.4287%" y="837" width="0.0248%" height="15" fill="rgb(212,144,35)" fg:x="1990" fg:w="1"/><text x="49.6787%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;flume::async::RecvFut&lt;rutin::frame::Resp3&gt;&gt; (10 samples, 0.25%)</title><rect x="49.2300%" y="933" width="0.2484%" height="15" fill="rgb(228,63,44)" fg:x="1982" fg:w="10"/><text x="49.4800%" y="943.50"></text></g><g><title>&lt;flume::async::RecvFut&lt;T&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.25%)</title><rect x="49.2300%" y="917" width="0.2484%" height="15" fill="rgb(228,109,6)" fg:x="1982" fg:w="10"/><text x="49.4800%" y="927.50"></text></g><g><title>flume::async::RecvFut&lt;T&gt;::reset_hook (10 samples, 0.25%)</title><rect x="49.2300%" y="901" width="0.2484%" height="15" fill="rgb(238,117,24)" fg:x="1982" fg:w="10"/><text x="49.4800%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;flume::Hook&lt;rutin::frame::Resp3,dyn flume::signal::Signal&gt;&gt;&gt; (7 samples, 0.17%)</title><rect x="49.3045%" y="885" width="0.1739%" height="15" fill="rgb(242,26,26)" fg:x="1985" fg:w="7"/><text x="49.5545%" y="895.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.17%)</title><rect x="49.3045%" y="869" width="0.1739%" height="15" fill="rgb(221,92,48)" fg:x="1985" fg:w="7"/><text x="49.5545%" y="879.50"></text></g><g><title>mi_free_generic_mt (1 samples, 0.02%)</title><rect x="49.4536%" y="853" width="0.0248%" height="15" fill="rgb(209,209,32)" fg:x="1991" fg:w="1"/><text x="49.7036%" y="863.50"></text></g><g><title>_mi_page_ptr_unalign (1 samples, 0.02%)</title><rect x="49.4536%" y="837" width="0.0248%" height="15" fill="rgb(221,70,22)" fg:x="1991" fg:w="1"/><text x="49.7036%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::cmd::dispatch&lt;rutin::connection::FakeStream&gt;::{{closure}}&gt; (3 samples, 0.07%)</title><rect x="49.4784%" y="933" width="0.0745%" height="15" fill="rgb(248,145,5)" fg:x="1992" fg:w="3"/><text x="49.7284%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::connection::Connection::write_frame&lt;bytes::bytes::Bytes,alloc::string::String&gt;::{{closure}}&gt; (2 samples, 0.05%)</title><rect x="49.5529%" y="933" width="0.0497%" height="15" fill="rgb(226,116,26)" fg:x="1995" fg:w="2"/><text x="49.8029%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::frame::Resp3&gt; (8 samples, 0.20%)</title><rect x="49.6026%" y="933" width="0.1987%" height="15" fill="rgb(244,5,17)" fg:x="1997" fg:w="8"/><text x="49.8526%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;smallvec::IntoIter&lt;[rutin::frame::Resp3: 32]&gt;&gt; (1 samples, 0.02%)</title><rect x="49.8013%" y="933" width="0.0248%" height="15" fill="rgb(252,159,33)" fg:x="2005" fg:w="1"/><text x="50.0513%" y="943.50"></text></g><g><title>rutin::cmd::dispatch (1 samples, 0.02%)</title><rect x="49.8261%" y="933" width="0.0248%" height="15" fill="rgb(206,71,0)" fg:x="2006" fg:w="1"/><text x="50.0761%" y="943.50"></text></g><g><title>[libc.so.6] (265 samples, 6.58%)</title><rect x="50.3974%" y="917" width="6.5822%" height="15" fill="rgb(233,118,54)" fg:x="2029" fg:w="265"/><text x="50.6474%" y="927.50">[libc.so...</text></g><g><title>core::ptr::drop_in_place&lt;rutin::cmd::dispatch&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}::{{closure}}&gt; (1 samples, 0.02%)</title><rect x="56.9796%" y="917" width="0.0248%" height="15" fill="rgb(234,83,48)" fg:x="2294" fg:w="1"/><text x="57.2296%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::Span&gt; (1 samples, 0.02%)</title><rect x="57.0045%" y="917" width="0.0248%" height="15" fill="rgb(228,3,54)" fg:x="2295" fg:w="1"/><text x="57.2545%" y="927.50"></text></g><g><title>&lt;tracing::span::Span as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="57.0045%" y="901" width="0.0248%" height="15" fill="rgb(226,155,13)" fg:x="2295" fg:w="1"/><text x="57.2545%" y="911.50"></text></g><g><title>[libc.so.6] (62 samples, 1.54%)</title><rect x="58.9170%" y="901" width="1.5400%" height="15" fill="rgb(241,28,37)" fg:x="2372" fg:w="62"/><text x="59.1670%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::cmd::dispatch&lt;rutin::connection::FakeStream&gt;::{{closure}}::{{closure}}::{{closure}}&gt; (2 samples, 0.05%)</title><rect x="60.4570%" y="901" width="0.0497%" height="15" fill="rgb(233,93,10)" fg:x="2434" fg:w="2"/><text x="60.7070%" y="911.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (23 samples, 0.57%)</title><rect x="62.1957%" y="885" width="0.5713%" height="15" fill="rgb(225,113,19)" fg:x="2504" fg:w="23"/><text x="62.4457%" y="895.50"></text></g><g><title>&lt;rutin::cmd::CmdUnparsed as core::convert::TryFrom&lt;rutin::frame::Resp3&gt;&gt;::try_from (15 samples, 0.37%)</title><rect x="62.3944%" y="869" width="0.3726%" height="15" fill="rgb(241,2,18)" fg:x="2512" fg:w="15"/><text x="62.6444%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;ahash::hash_map::AHashMap&lt;rutin::frame::Resp3,rutin::frame::Resp3&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="62.7422%" y="853" width="0.0248%" height="15" fill="rgb(228,207,21)" fg:x="2526" fg:w="1"/><text x="62.9922%" y="863.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (35 samples, 0.87%)</title><rect x="62.7670%" y="885" width="0.8693%" height="15" fill="rgb(213,211,35)" fg:x="2527" fg:w="35"/><text x="63.0170%" y="895.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.02%)</title><rect x="63.8102%" y="837" width="0.0248%" height="15" fill="rgb(209,83,10)" fg:x="2569" fg:w="1"/><text x="64.0602%" y="847.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (2 samples, 0.05%)</title><rect x="63.8102%" y="853" width="0.0497%" height="15" fill="rgb(209,164,1)" fg:x="2569" fg:w="2"/><text x="64.0602%" y="863.50"></text></g><g><title>core::ptr::read (1 samples, 0.02%)</title><rect x="63.8351%" y="837" width="0.0248%" height="15" fill="rgb(213,184,43)" fg:x="2570" fg:w="1"/><text x="64.0851%" y="847.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_empty (1 samples, 0.02%)</title><rect x="63.8599%" y="853" width="0.0248%" height="15" fill="rgb(231,61,34)" fg:x="2571" fg:w="1"/><text x="64.1099%" y="863.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (15 samples, 0.37%)</title><rect x="63.6364%" y="869" width="0.3726%" height="15" fill="rgb(235,75,3)" fg:x="2562" fg:w="15"/><text x="63.8864%" y="879.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (5 samples, 0.12%)</title><rect x="63.8847%" y="853" width="0.1242%" height="15" fill="rgb(220,106,47)" fg:x="2572" fg:w="5"/><text x="64.1347%" y="863.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (5 samples, 0.12%)</title><rect x="63.8847%" y="837" width="0.1242%" height="15" fill="rgb(210,196,33)" fg:x="2572" fg:w="5"/><text x="64.1347%" y="847.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (5 samples, 0.12%)</title><rect x="63.8847%" y="821" width="0.1242%" height="15" fill="rgb(229,154,42)" fg:x="2572" fg:w="5"/><text x="64.1347%" y="831.50"></text></g><g><title>&lt;rutin::cmd::CmdUnparsed as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (25 samples, 0.62%)</title><rect x="64.1828%" y="853" width="0.6210%" height="15" fill="rgb(228,114,26)" fg:x="2584" fg:w="25"/><text x="64.4328%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;ahash::hash_map::AHashMap&lt;rutin::frame::Resp3,rutin::frame::Resp3&gt;&gt;&gt; (3 samples, 0.07%)</title><rect x="64.7293%" y="837" width="0.0745%" height="15" fill="rgb(208,144,1)" fg:x="2606" fg:w="3"/><text x="64.9793%" y="847.50"></text></g><g><title>&lt;rutin::cmd::CmdUnparsed as core::iter::traits::iterator::Iterator&gt;::next (102 samples, 2.53%)</title><rect x="63.6364%" y="885" width="2.5335%" height="15" fill="rgb(239,112,37)" fg:x="2562" fg:w="102"/><text x="63.8864%" y="895.50">&lt;r..</text></g><g><title>core::option::Option&lt;T&gt;::and_then (87 samples, 2.16%)</title><rect x="64.0089%" y="869" width="2.1610%" height="15" fill="rgb(210,96,50)" fg:x="2577" fg:w="87"/><text x="64.2589%" y="879.50">c..</text></g><g><title>[libc.so.6] (55 samples, 1.37%)</title><rect x="64.8038%" y="853" width="1.3661%" height="15" fill="rgb(222,178,2)" fg:x="2609" fg:w="55"/><text x="65.0538%" y="863.50"></text></g><g><title>&lt;rutin::error::RutinError as core::convert::TryInto&lt;rutin::frame::Resp3&gt;&gt;::try_into (6 samples, 0.15%)</title><rect x="66.1699%" y="885" width="0.1490%" height="15" fill="rgb(226,74,18)" fg:x="2664" fg:w="6"/><text x="66.4199%" y="895.50"></text></g><g><title>[libc.so.6] (74 samples, 1.84%)</title><rect x="66.3189%" y="885" width="1.8381%" height="15" fill="rgb(225,67,54)" fg:x="2670" fg:w="74"/><text x="66.5689%" y="895.50">[..</text></g><g><title>core::option::Option&lt;T&gt;::ok_or_else (5 samples, 0.12%)</title><rect x="68.1570%" y="885" width="0.1242%" height="15" fill="rgb(251,92,32)" fg:x="2744" fg:w="5"/><text x="68.4070%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;rutin::cmd::commands::str::Get as rutin::cmd::CmdExecutor&gt;::apply&lt;rutin::connection::FakeStream&gt;::{{closure}}&gt; (2 samples, 0.05%)</title><rect x="68.2812%" y="885" width="0.0497%" height="15" fill="rgb(228,149,22)" fg:x="2749" fg:w="2"/><text x="68.5312%" y="895.50"></text></g><g><title>mi_free (1 samples, 0.02%)</title><rect x="68.9518%" y="629" width="0.0248%" height="15" fill="rgb(243,54,13)" fg:x="2776" fg:w="1"/><text x="69.2018%" y="639.50"></text></g><g><title>_mi_segment_page_of (1 samples, 0.02%)</title><rect x="68.9518%" y="613" width="0.0248%" height="15" fill="rgb(243,180,28)" fg:x="2776" fg:w="1"/><text x="69.2018%" y="623.50"></text></g><g><title>mi_slice_first (1 samples, 0.02%)</title><rect x="68.9518%" y="597" width="0.0248%" height="15" fill="rgb(208,167,24)" fg:x="2776" fg:w="1"/><text x="69.2018%" y="607.50"></text></g><g><title>mi_free_block_mt (1 samples, 0.02%)</title><rect x="68.9767%" y="629" width="0.0248%" height="15" fill="rgb(245,73,45)" fg:x="2777" fg:w="1"/><text x="69.2267%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.07%)</title><rect x="68.9518%" y="693" width="0.0745%" height="15" fill="rgb(237,203,48)" fg:x="2776" fg:w="3"/><text x="69.2018%" y="703.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.07%)</title><rect x="68.9518%" y="677" width="0.0745%" height="15" fill="rgb(211,197,16)" fg:x="2776" fg:w="3"/><text x="69.2018%" y="687.50"></text></g><g><title>__rust_dealloc (3 samples, 0.07%)</title><rect x="68.9518%" y="661" width="0.0745%" height="15" fill="rgb(243,99,51)" fg:x="2776" fg:w="3"/><text x="69.2018%" y="671.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (3 samples, 0.07%)</title><rect x="68.9518%" y="645" width="0.0745%" height="15" fill="rgb(215,123,29)" fg:x="2776" fg:w="3"/><text x="69.2018%" y="655.50"></text></g><g><title>mi_free_generic_mt (1 samples, 0.02%)</title><rect x="69.0015%" y="629" width="0.0248%" height="15" fill="rgb(239,186,37)" fg:x="2778" fg:w="1"/><text x="69.2515%" y="639.50"></text></g><g><title>_mi_page_ptr_unalign (1 samples, 0.02%)</title><rect x="69.0015%" y="613" width="0.0248%" height="15" fill="rgb(252,136,39)" fg:x="2778" fg:w="1"/><text x="69.2515%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (32 samples, 0.79%)</title><rect x="68.3308%" y="885" width="0.7948%" height="15" fill="rgb(223,213,32)" fg:x="2751" fg:w="32"/><text x="68.5808%" y="895.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (32 samples, 0.79%)</title><rect x="68.3308%" y="869" width="0.7948%" height="15" fill="rgb(233,115,5)" fg:x="2751" fg:w="32"/><text x="68.5808%" y="879.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (30 samples, 0.75%)</title><rect x="68.3805%" y="853" width="0.7452%" height="15" fill="rgb(207,226,44)" fg:x="2753" fg:w="30"/><text x="68.6305%" y="863.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (30 samples, 0.75%)</title><rect x="68.3805%" y="837" width="0.7452%" height="15" fill="rgb(208,126,0)" fg:x="2753" fg:w="30"/><text x="68.6305%" y="847.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop::_{{closure}} (30 samples, 0.75%)</title><rect x="68.3805%" y="821" width="0.7452%" height="15" fill="rgb(244,66,21)" fg:x="2753" fg:w="30"/><text x="68.6305%" y="831.50"></text></g><g><title>bytes::bytes_mut::release_shared (30 samples, 0.75%)</title><rect x="68.3805%" y="805" width="0.7452%" height="15" fill="rgb(222,97,12)" fg:x="2753" fg:w="30"/><text x="68.6305%" y="815.50"></text></g><g><title>core::mem::drop (7 samples, 0.17%)</title><rect x="68.9518%" y="789" width="0.1739%" height="15" fill="rgb(219,213,19)" fg:x="2776" fg:w="7"/><text x="69.2018%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;bytes::bytes_mut::Shared&gt;&gt; (7 samples, 0.17%)</title><rect x="68.9518%" y="773" width="0.1739%" height="15" fill="rgb(252,169,30)" fg:x="2776" fg:w="7"/><text x="69.2018%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::Shared&gt; (7 samples, 0.17%)</title><rect x="68.9518%" y="757" width="0.1739%" height="15" fill="rgb(206,32,51)" fg:x="2776" fg:w="7"/><text x="69.2018%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (7 samples, 0.17%)</title><rect x="68.9518%" y="741" width="0.1739%" height="15" fill="rgb(250,172,42)" fg:x="2776" fg:w="7"/><text x="69.2018%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (7 samples, 0.17%)</title><rect x="68.9518%" y="725" width="0.1739%" height="15" fill="rgb(209,34,43)" fg:x="2776" fg:w="7"/><text x="69.2018%" y="735.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.17%)</title><rect x="68.9518%" y="709" width="0.1739%" height="15" fill="rgb(223,11,35)" fg:x="2776" fg:w="7"/><text x="69.2018%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.10%)</title><rect x="69.0263%" y="693" width="0.0994%" height="15" fill="rgb(251,219,26)" fg:x="2779" fg:w="4"/><text x="69.2763%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::error::RutinError&gt; (4 samples, 0.10%)</title><rect x="69.1257%" y="885" width="0.0994%" height="15" fill="rgb(231,119,3)" fg:x="2783" fg:w="4"/><text x="69.3757%" y="895.50"></text></g><g><title>core::str::converts::from_utf8 (12 samples, 0.30%)</title><rect x="69.2250%" y="885" width="0.2981%" height="15" fill="rgb(216,97,11)" fg:x="2787" fg:w="12"/><text x="69.4750%" y="895.50"></text></g><g><title>core::str::validations::run_utf8_validation (4 samples, 0.10%)</title><rect x="69.4237%" y="869" width="0.0994%" height="15" fill="rgb(223,59,9)" fg:x="2795" fg:w="4"/><text x="69.6737%" y="879.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (6 samples, 0.15%)</title><rect x="69.5231%" y="885" width="0.1490%" height="15" fill="rgb(233,93,31)" fg:x="2799" fg:w="6"/><text x="69.7731%" y="895.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (6 samples, 0.15%)</title><rect x="69.5231%" y="869" width="0.1490%" height="15" fill="rgb(239,81,33)" fg:x="2799" fg:w="6"/><text x="69.7731%" y="879.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (6 samples, 0.15%)</title><rect x="69.5231%" y="853" width="0.1490%" height="15" fill="rgb(213,120,34)" fg:x="2799" fg:w="6"/><text x="69.7731%" y="863.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (6 samples, 0.15%)</title><rect x="69.5231%" y="837" width="0.1490%" height="15" fill="rgb(243,49,53)" fg:x="2799" fg:w="6"/><text x="69.7731%" y="847.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.05%)</title><rect x="70.4173%" y="869" width="0.0497%" height="15" fill="rgb(247,216,33)" fg:x="2835" fg:w="2"/><text x="70.6673%" y="879.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (5 samples, 0.12%)</title><rect x="72.9011%" y="821" width="0.1242%" height="15" fill="rgb(226,26,14)" fg:x="2935" fg:w="5"/><text x="73.1511%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::cmd::commands::str::Get&gt; (24 samples, 0.60%)</title><rect x="73.0253%" y="821" width="0.5961%" height="15" fill="rgb(215,49,53)" fg:x="2940" fg:w="24"/><text x="73.2753%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::shared::db::object::str::Str&gt; (24 samples, 0.60%)</title><rect x="73.0253%" y="805" width="0.5961%" height="15" fill="rgb(245,162,40)" fg:x="2940" fg:w="24"/><text x="73.2753%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (24 samples, 0.60%)</title><rect x="73.0253%" y="789" width="0.5961%" height="15" fill="rgb(229,68,17)" fg:x="2940" fg:w="24"/><text x="73.2753%" y="799.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (24 samples, 0.60%)</title><rect x="73.0253%" y="773" width="0.5961%" height="15" fill="rgb(213,182,10)" fg:x="2940" fg:w="24"/><text x="73.2753%" y="783.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (23 samples, 0.57%)</title><rect x="73.0502%" y="757" width="0.5713%" height="15" fill="rgb(245,125,30)" fg:x="2941" fg:w="23"/><text x="73.3002%" y="767.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (22 samples, 0.55%)</title><rect x="73.0750%" y="741" width="0.5464%" height="15" fill="rgb(232,202,2)" fg:x="2942" fg:w="22"/><text x="73.3250%" y="751.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop::_{{closure}} (22 samples, 0.55%)</title><rect x="73.0750%" y="725" width="0.5464%" height="15" fill="rgb(237,140,51)" fg:x="2942" fg:w="22"/><text x="73.3250%" y="735.50"></text></g><g><title>bytes::bytes_mut::release_shared (22 samples, 0.55%)</title><rect x="73.0750%" y="709" width="0.5464%" height="15" fill="rgb(236,157,25)" fg:x="2942" fg:w="22"/><text x="73.3250%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::shared::db::Db::visit_object&lt;&lt;rutin::cmd::commands::key::Ttl as rutin::cmd::CmdExecutor&gt;::execute&lt;rutin::connection::FakeStream&gt;::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;::{{closure}}&gt; (5 samples, 0.12%)</title><rect x="73.6215%" y="821" width="0.1242%" height="15" fill="rgb(219,209,0)" fg:x="2964" fg:w="5"/><text x="73.8715%" y="831.50"></text></g><g><title>&lt;tracing_core::metadata::Level as core::cmp::PartialOrd&lt;tracing_core::metadata::LevelFilter&gt;&gt;::le (1 samples, 0.02%)</title><rect x="74.3418%" y="805" width="0.0248%" height="15" fill="rgb(240,116,54)" fg:x="2993" fg:w="1"/><text x="74.5918%" y="815.50"></text></g><g><title>[libc.so.6] (51 samples, 1.27%)</title><rect x="74.3666%" y="805" width="1.2668%" height="15" fill="rgb(216,10,36)" fg:x="2994" fg:w="51"/><text x="74.6166%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::shared::db::Db::visit_object&lt;&lt;rutin::cmd::commands::key::Ttl as rutin::cmd::CmdExecutor&gt;::execute&lt;rutin::connection::FakeStream&gt;::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;::{{closure}}::{{closure}}&gt; (2 samples, 0.05%)</title><rect x="75.6334%" y="805" width="0.0497%" height="15" fill="rgb(222,72,44)" fg:x="3045" fg:w="2"/><text x="75.8834%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::Span&gt; (1 samples, 0.02%)</title><rect x="75.6831%" y="805" width="0.0248%" height="15" fill="rgb(232,159,9)" fg:x="3047" fg:w="1"/><text x="75.9331%" y="815.50"></text></g><g><title>&lt;tracing::span::Span as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="75.6831%" y="789" width="0.0248%" height="15" fill="rgb(210,39,32)" fg:x="3047" fg:w="1"/><text x="75.9331%" y="799.50"></text></g><g><title>&lt;tracing_core::metadata::Level as core::cmp::PartialOrd&lt;tracing_core::metadata::LevelFilter&gt;&gt;::le (1 samples, 0.02%)</title><rect x="77.1734%" y="773" width="0.0248%" height="15" fill="rgb(216,194,45)" fg:x="3107" fg:w="1"/><text x="77.4234%" y="783.50"></text></g><g><title>[libc.so.6] (34 samples, 0.84%)</title><rect x="77.1982%" y="773" width="0.8445%" height="15" fill="rgb(218,18,35)" fg:x="3108" fg:w="34"/><text x="77.4482%" y="783.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (20 samples, 0.50%)</title><rect x="80.7253%" y="661" width="0.4968%" height="15" fill="rgb(207,83,51)" fg:x="3250" fg:w="20"/><text x="80.9753%" y="671.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (19 samples, 0.47%)</title><rect x="81.2221%" y="661" width="0.4719%" height="15" fill="rgb(225,63,43)" fg:x="3270" fg:w="19"/><text x="81.4721%" y="671.50"></text></g><g><title>core::hint::spin_loop (4 samples, 0.10%)</title><rect x="81.6940%" y="629" width="0.0994%" height="15" fill="rgb(207,57,36)" fg:x="3289" fg:w="4"/><text x="81.9440%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (4 samples, 0.10%)</title><rect x="81.6940%" y="613" width="0.0994%" height="15" fill="rgb(216,99,33)" fg:x="3289" fg:w="4"/><text x="81.9440%" y="623.50"></text></g><g><title>dashmap::lock::RawRwLock::lock_shared_slow (53 samples, 1.32%)</title><rect x="80.6756%" y="677" width="1.3164%" height="15" fill="rgb(225,42,16)" fg:x="3248" fg:w="53"/><text x="80.9256%" y="687.50"></text></g><g><title>parking_lot_core::spinwait::SpinWait::spin_no_yield (12 samples, 0.30%)</title><rect x="81.6940%" y="661" width="0.2981%" height="15" fill="rgb(220,201,45)" fg:x="3289" fg:w="12"/><text x="81.9440%" y="671.50"></text></g><g><title>parking_lot_core::spinwait::cpu_relax (12 samples, 0.30%)</title><rect x="81.6940%" y="645" width="0.2981%" height="15" fill="rgb(225,33,4)" fg:x="3289" fg:w="12"/><text x="81.9440%" y="655.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (8 samples, 0.20%)</title><rect x="81.7933%" y="629" width="0.1987%" height="15" fill="rgb(224,33,50)" fg:x="3293" fg:w="8"/><text x="82.0433%" y="639.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (8 samples, 0.20%)</title><rect x="81.7933%" y="613" width="0.1987%" height="15" fill="rgb(246,198,51)" fg:x="3293" fg:w="8"/><text x="82.0433%" y="623.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (187 samples, 4.64%)</title><rect x="81.9921%" y="661" width="4.6448%" height="15" fill="rgb(205,22,4)" fg:x="3301" fg:w="187"/><text x="82.2421%" y="671.50">core:..</text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (1 samples, 0.02%)</title><rect x="86.6369%" y="661" width="0.0248%" height="15" fill="rgb(206,3,8)" fg:x="3488" fg:w="1"/><text x="86.8869%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (1 samples, 0.02%)</title><rect x="86.6369%" y="645" width="0.0248%" height="15" fill="rgb(251,23,15)" fg:x="3488" fg:w="1"/><text x="86.8869%" y="655.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_read_shard (305 samples, 7.58%)</title><rect x="79.1356%" y="725" width="7.5758%" height="15" fill="rgb(252,88,28)" fg:x="3186" fg:w="305"/><text x="79.3856%" y="735.50">&lt;dashmap::..</text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::read (304 samples, 7.55%)</title><rect x="79.1605%" y="709" width="7.5509%" height="15" fill="rgb(212,127,14)" fg:x="3187" fg:w="304"/><text x="79.4105%" y="719.50">lock_api::..</text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_shared (304 samples, 7.55%)</title><rect x="79.1605%" y="693" width="7.5509%" height="15" fill="rgb(247,145,37)" fg:x="3187" fg:w="304"/><text x="79.4105%" y="703.50">&lt;dashmap::..</text></g><g><title>dashmap::lock::RawRwLock::try_lock_shared_fast (190 samples, 4.72%)</title><rect x="81.9921%" y="677" width="4.7193%" height="15" fill="rgb(209,117,53)" fg:x="3301" fg:w="190"/><text x="82.2421%" y="687.50">dashm..</text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.05%)</title><rect x="86.6617%" y="661" width="0.0497%" height="15" fill="rgb(212,90,42)" fg:x="3489" fg:w="2"/><text x="86.9117%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.05%)</title><rect x="86.6617%" y="645" width="0.0497%" height="15" fill="rgb(218,164,37)" fg:x="3489" fg:w="2"/><text x="86.9117%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::raw::inner::RawTable&lt;(rutin::shared::db::object::str::Str,dashmap::util::SharedValue&lt;rutin::shared::db::object::Object&gt;)&gt;&gt;&gt; (100 samples, 2.48%)</title><rect x="86.7114%" y="725" width="2.4839%" height="15" fill="rgb(246,65,34)" fg:x="3491" fg:w="100"/><text x="86.9614%" y="735.50">co..</text></g><g><title>&lt;lock_api::rwlock::RwLockReadGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (100 samples, 2.48%)</title><rect x="86.7114%" y="709" width="2.4839%" height="15" fill="rgb(231,100,33)" fg:x="3491" fg:w="100"/><text x="86.9614%" y="719.50">&lt;l..</text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_shared (100 samples, 2.48%)</title><rect x="86.7114%" y="693" width="2.4839%" height="15" fill="rgb(228,126,14)" fg:x="3491" fg:w="100"/><text x="86.9614%" y="703.50">&lt;d..</text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::determine_shard (1 samples, 0.02%)</title><rect x="89.1952%" y="725" width="0.0248%" height="15" fill="rgb(215,173,21)" fg:x="3591" fg:w="1"/><text x="89.4452%" y="735.50"></text></g><g><title>ahash::operations::folded_multiply (4 samples, 0.10%)</title><rect x="89.2201%" y="693" width="0.0994%" height="15" fill="rgb(210,6,40)" fg:x="3592" fg:w="4"/><text x="89.4701%" y="703.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1 samples, 0.02%)</title><rect x="89.2946%" y="677" width="0.0248%" height="15" fill="rgb(212,48,18)" fg:x="3595" fg:w="1"/><text x="89.5446%" y="687.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (5 samples, 0.12%)</title><rect x="89.2201%" y="709" width="0.1242%" height="15" fill="rgb(230,214,11)" fg:x="3592" fg:w="5"/><text x="89.4701%" y="719.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.02%)</title><rect x="89.3194%" y="693" width="0.0248%" height="15" fill="rgb(254,105,39)" fg:x="3596" fg:w="1"/><text x="89.5694%" y="703.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3 samples, 0.07%)</title><rect x="89.3939%" y="645" width="0.0745%" height="15" fill="rgb(245,158,5)" fg:x="3599" fg:w="3"/><text x="89.6439%" y="655.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (3 samples, 0.07%)</title><rect x="89.3939%" y="629" width="0.0745%" height="15" fill="rgb(249,208,11)" fg:x="3599" fg:w="3"/><text x="89.6439%" y="639.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (3 samples, 0.07%)</title><rect x="89.3939%" y="613" width="0.0745%" height="15" fill="rgb(210,39,28)" fg:x="3599" fg:w="3"/><text x="89.6439%" y="623.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (3 samples, 0.07%)</title><rect x="89.3939%" y="597" width="0.0745%" height="15" fill="rgb(211,56,53)" fg:x="3599" fg:w="3"/><text x="89.6439%" y="607.50"></text></g><g><title>ahash::operations::folded_multiply (3 samples, 0.07%)</title><rect x="89.3939%" y="581" width="0.0745%" height="15" fill="rgb(226,201,30)" fg:x="3599" fg:w="3"/><text x="89.6439%" y="591.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (3 samples, 0.07%)</title><rect x="89.3939%" y="565" width="0.0745%" height="15" fill="rgb(239,101,34)" fg:x="3599" fg:w="3"/><text x="89.6439%" y="575.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::hash::Hash&gt;::hash (10 samples, 0.25%)</title><rect x="89.3939%" y="677" width="0.2484%" height="15" fill="rgb(226,209,5)" fg:x="3599" fg:w="10"/><text x="89.6439%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (10 samples, 0.25%)</title><rect x="89.3939%" y="661" width="0.2484%" height="15" fill="rgb(250,105,47)" fg:x="3599" fg:w="10"/><text x="89.6439%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (7 samples, 0.17%)</title><rect x="89.4685%" y="645" width="0.1739%" height="15" fill="rgb(230,72,3)" fg:x="3602" fg:w="7"/><text x="89.7185%" y="655.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (7 samples, 0.17%)</title><rect x="89.4685%" y="629" width="0.1739%" height="15" fill="rgb(232,218,39)" fg:x="3602" fg:w="7"/><text x="89.7185%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5 samples, 0.12%)</title><rect x="89.5181%" y="613" width="0.1242%" height="15" fill="rgb(248,166,6)" fg:x="3604" fg:w="5"/><text x="89.7681%" y="623.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_u64 (22 samples, 0.55%)</title><rect x="89.2201%" y="725" width="0.5464%" height="15" fill="rgb(247,89,20)" fg:x="3592" fg:w="22"/><text x="89.4701%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (17 samples, 0.42%)</title><rect x="89.3443%" y="709" width="0.4223%" height="15" fill="rgb(248,130,54)" fg:x="3597" fg:w="17"/><text x="89.5943%" y="719.50"></text></g><g><title>&lt;rutin::shared::db::object::str::Str as core::hash::Hash&gt;::hash (17 samples, 0.42%)</title><rect x="89.3443%" y="693" width="0.4223%" height="15" fill="rgb(234,196,4)" fg:x="3597" fg:w="17"/><text x="89.5943%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (5 samples, 0.12%)</title><rect x="89.6423%" y="677" width="0.1242%" height="15" fill="rgb(250,143,31)" fg:x="3609" fg:w="5"/><text x="89.8923%" y="687.50"></text></g><g><title>core::hash::Hasher::write_isize (5 samples, 0.12%)</title><rect x="89.6423%" y="661" width="0.1242%" height="15" fill="rgb(211,110,34)" fg:x="3609" fg:w="5"/><text x="89.8923%" y="671.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (5 samples, 0.12%)</title><rect x="89.6423%" y="645" width="0.1242%" height="15" fill="rgb(215,124,48)" fg:x="3609" fg:w="5"/><text x="89.8923%" y="655.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (5 samples, 0.12%)</title><rect x="89.6423%" y="629" width="0.1242%" height="15" fill="rgb(216,46,13)" fg:x="3609" fg:w="5"/><text x="89.8923%" y="639.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (5 samples, 0.12%)</title><rect x="89.6423%" y="613" width="0.1242%" height="15" fill="rgb(205,184,25)" fg:x="3609" fg:w="5"/><text x="89.8923%" y="623.50"></text></g><g><title>ahash::operations::folded_multiply (1 samples, 0.02%)</title><rect x="89.7417%" y="597" width="0.0248%" height="15" fill="rgb(228,1,10)" fg:x="3613" fg:w="1"/><text x="89.9917%" y="607.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1 samples, 0.02%)</title><rect x="89.7417%" y="581" width="0.0248%" height="15" fill="rgb(213,116,27)" fg:x="3613" fg:w="1"/><text x="89.9917%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::probe_seq (2 samples, 0.05%)</title><rect x="89.8162%" y="693" width="0.0497%" height="15" fill="rgb(241,95,50)" fg:x="3616" fg:w="2"/><text x="90.0662%" y="703.50"></text></g><g><title>hashbrown::raw::inner::h2 (1 samples, 0.02%)</title><rect x="89.8659%" y="693" width="0.0248%" height="15" fill="rgb(238,48,32)" fg:x="3618" fg:w="1"/><text x="90.1159%" y="703.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (1 samples, 0.02%)</title><rect x="89.8907%" y="693" width="0.0248%" height="15" fill="rgb(235,113,49)" fg:x="3619" fg:w="1"/><text x="90.1407%" y="703.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.02%)</title><rect x="89.8907%" y="677" width="0.0248%" height="15" fill="rgb(205,127,43)" fg:x="3619" fg:w="1"/><text x="90.1407%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="89.8907%" y="661" width="0.0248%" height="15" fill="rgb(250,162,2)" fg:x="3619" fg:w="1"/><text x="90.1407%" y="671.50"></text></g><g><title>rutin::shared::db::Db::visit_object::_{{closure}}::_{{closure}} (573 samples, 14.23%)</title><rect x="75.7079%" y="805" width="14.2325%" height="15" fill="rgb(220,13,41)" fg:x="3048" fg:w="573"/><text x="75.9579%" y="815.50">rutin::shared::db::Db:..</text></g><g><title>rutin::shared::db::Db::get::_{{closure}} (548 samples, 13.61%)</title><rect x="76.3289%" y="789" width="13.6115%" height="15" fill="rgb(249,221,25)" fg:x="3073" fg:w="548"/><text x="76.5789%" y="799.50">rutin::shared::db::Db..</text></g><g><title>rutin::shared::db::Db::get::_{{closure}}::_{{closure}} (479 samples, 11.90%)</title><rect x="78.0427%" y="773" width="11.8977%" height="15" fill="rgb(215,208,19)" fg:x="3142" fg:w="479"/><text x="78.2927%" y="783.50">rutin::shared::db:..</text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (461 samples, 11.45%)</title><rect x="78.4898%" y="757" width="11.4506%" height="15" fill="rgb(236,175,2)" fg:x="3160" fg:w="461"/><text x="78.7398%" y="767.50">dashmap::DashMap&lt;..</text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (455 samples, 11.30%)</title><rect x="78.6388%" y="741" width="11.3015%" height="15" fill="rgb(241,52,2)" fg:x="3166" fg:w="455"/><text x="78.8888%" y="751.50">&lt;dashmap::DashMap..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (7 samples, 0.17%)</title><rect x="89.7665%" y="725" width="0.1739%" height="15" fill="rgb(248,140,14)" fg:x="3614" fg:w="7"/><text x="90.0165%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_inner (7 samples, 0.17%)</title><rect x="89.7665%" y="709" width="0.1739%" height="15" fill="rgb(253,22,42)" fg:x="3614" fg:w="7"/><text x="90.0165%" y="719.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (1 samples, 0.02%)</title><rect x="89.9155%" y="693" width="0.0248%" height="15" fill="rgb(234,61,47)" fg:x="3620" fg:w="1"/><text x="90.1655%" y="703.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.02%)</title><rect x="89.9155%" y="677" width="0.0248%" height="15" fill="rgb(208,226,15)" fg:x="3620" fg:w="1"/><text x="90.1655%" y="687.50"></text></g><g><title>&lt;rutin::cmd::commands::str::Get as rutin::cmd::CmdExecutor&gt;::execute::_{{closure}}::_{{closure}}::_{{closure}} (692 samples, 17.19%)</title><rect x="72.7769%" y="837" width="17.1883%" height="15" fill="rgb(217,221,4)" fg:x="2930" fg:w="692"/><text x="73.0269%" y="847.50">&lt;rutin::cmd::commands::str:..</text></g><g><title>rutin::shared::db::Db::visit_object::_{{closure}} (653 samples, 16.22%)</title><rect x="73.7457%" y="821" width="16.2196%" height="15" fill="rgb(212,174,34)" fg:x="2969" fg:w="653"/><text x="73.9957%" y="831.50">rutin::shared::db::Db::vi..</text></g><g><title>tracing_core::metadata::LevelFilter::current (1 samples, 0.02%)</title><rect x="89.9404%" y="805" width="0.0248%" height="15" fill="rgb(253,83,4)" fg:x="3621" fg:w="1"/><text x="90.1904%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.02%)</title><rect x="89.9404%" y="789" width="0.0248%" height="15" fill="rgb(250,195,49)" fg:x="3621" fg:w="1"/><text x="90.1904%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="89.9404%" y="773" width="0.0248%" height="15" fill="rgb(241,192,25)" fg:x="3621" fg:w="1"/><text x="90.1904%" y="783.50"></text></g><g><title>&lt;tracing_core::metadata::Level as core::cmp::PartialOrd&lt;tracing_core::metadata::LevelFilter&gt;&gt;::le (1 samples, 0.02%)</title><rect x="89.9652%" y="837" width="0.0248%" height="15" fill="rgb(208,124,10)" fg:x="3622" fg:w="1"/><text x="90.2152%" y="847.50"></text></g><g><title>&lt;rutin::cmd::commands::str::Get as rutin::cmd::CmdExecutor&gt;::execute::_{{closure}}::_{{closure}} (830 samples, 20.62%)</title><rect x="71.2121%" y="853" width="20.6160%" height="15" fill="rgb(222,33,0)" fg:x="2867" fg:w="830"/><text x="71.4621%" y="863.50">&lt;rutin::cmd::commands::str::Get ..</text></g><g><title>[libc.so.6] (74 samples, 1.84%)</title><rect x="89.9901%" y="837" width="1.8381%" height="15" fill="rgb(234,209,28)" fg:x="3623" fg:w="74"/><text x="90.2401%" y="847.50">[..</text></g><g><title>[libc.so.6] (62 samples, 1.54%)</title><rect x="91.8281%" y="853" width="1.5400%" height="15" fill="rgb(224,11,23)" fg:x="3697" fg:w="62"/><text x="92.0781%" y="863.50"></text></g><g><title>&lt;rutin::cmd::commands::str::Get as rutin::cmd::CmdExecutor&gt;::execute::_{{closure}} (923 samples, 22.93%)</title><rect x="70.4670%" y="869" width="22.9260%" height="15" fill="rgb(232,99,1)" fg:x="2837" fg:w="923"/><text x="70.7170%" y="879.50">&lt;rutin::cmd::commands::str::Get as r..</text></g><g><title>tracing_core::metadata::LevelFilter::current (1 samples, 0.02%)</title><rect x="93.3681%" y="853" width="0.0248%" height="15" fill="rgb(237,95,45)" fg:x="3759" fg:w="1"/><text x="93.6181%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.02%)</title><rect x="93.3681%" y="837" width="0.0248%" height="15" fill="rgb(208,109,11)" fg:x="3759" fg:w="1"/><text x="93.6181%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="93.3681%" y="821" width="0.0248%" height="15" fill="rgb(216,190,48)" fg:x="3759" fg:w="1"/><text x="93.6181%" y="831.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::deref::Deref&gt;::deref (3 samples, 0.07%)</title><rect x="93.9642%" y="821" width="0.0745%" height="15" fill="rgb(251,171,36)" fg:x="3783" fg:w="3"/><text x="94.2142%" y="831.50"></text></g><g><title>bytes::bytes::Bytes::as_slice (3 samples, 0.07%)</title><rect x="93.9642%" y="805" width="0.0745%" height="15" fill="rgb(230,62,22)" fg:x="3783" fg:w="3"/><text x="94.2142%" y="815.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (25 samples, 0.62%)</title><rect x="93.8897%" y="853" width="0.6210%" height="15" fill="rgb(225,114,35)" fg:x="3780" fg:w="25"/><text x="94.1397%" y="863.50"></text></g><g><title>&lt;rutin::shared::db::object::str::Str as core::convert::From&lt;bytes::bytes::Bytes&gt;&gt;::from (25 samples, 0.62%)</title><rect x="93.8897%" y="837" width="0.6210%" height="15" fill="rgb(215,118,42)" fg:x="3780" fg:w="25"/><text x="94.1397%" y="847.50"></text></g><g><title>atoi::atoi (19 samples, 0.47%)</title><rect x="94.0387%" y="821" width="0.4719%" height="15" fill="rgb(243,119,21)" fg:x="3786" fg:w="19"/><text x="94.2887%" y="831.50"></text></g><g><title>&lt;I as atoi::FromRadix10SignedChecked&gt;::from_radix_10_signed_checked (9 samples, 0.22%)</title><rect x="94.2871%" y="805" width="0.2235%" height="15" fill="rgb(252,177,53)" fg:x="3796" fg:w="9"/><text x="94.5371%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (5 samples, 0.12%)</title><rect x="94.3865%" y="789" width="0.1242%" height="15" fill="rgb(237,209,29)" fg:x="3800" fg:w="5"/><text x="94.6365%" y="799.50"></text></g><g><title>&lt;I as atoi::FromRadix10SignedChecked&gt;::from_radix_10_signed_checked::_{{closure}} (5 samples, 0.12%)</title><rect x="94.3865%" y="773" width="0.1242%" height="15" fill="rgb(212,65,23)" fg:x="3800" fg:w="5"/><text x="94.6365%" y="783.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::ptr (1 samples, 0.02%)</title><rect x="94.5107%" y="805" width="0.0248%" height="15" fill="rgb(230,222,46)" fg:x="3805" fg:w="1"/><text x="94.7607%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.02%)</title><rect x="94.5107%" y="789" width="0.0248%" height="15" fill="rgb(215,135,32)" fg:x="3805" fg:w="1"/><text x="94.7607%" y="799.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (2 samples, 0.05%)</title><rect x="94.5107%" y="821" width="0.0497%" height="15" fill="rgb(246,101,22)" fg:x="3805" fg:w="2"/><text x="94.7607%" y="831.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.02%)</title><rect x="94.5355%" y="805" width="0.0248%" height="15" fill="rgb(206,107,13)" fg:x="3806" fg:w="1"/><text x="94.7855%" y="815.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (4 samples, 0.10%)</title><rect x="94.5107%" y="837" width="0.0994%" height="15" fill="rgb(250,100,44)" fg:x="3805" fg:w="4"/><text x="94.7607%" y="847.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (2 samples, 0.05%)</title><rect x="94.5604%" y="821" width="0.0497%" height="15" fill="rgb(231,147,38)" fg:x="3807" fg:w="2"/><text x="94.8104%" y="831.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (2 samples, 0.05%)</title><rect x="94.5604%" y="805" width="0.0497%" height="15" fill="rgb(229,8,40)" fg:x="3807" fg:w="2"/><text x="94.8104%" y="815.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (2 samples, 0.05%)</title><rect x="94.5604%" y="789" width="0.0497%" height="15" fill="rgb(221,135,30)" fg:x="3807" fg:w="2"/><text x="94.8104%" y="799.50"></text></g><g><title>&lt;rutin::cmd::CmdUnparsed as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (18 samples, 0.45%)</title><rect x="94.6597%" y="821" width="0.4471%" height="15" fill="rgb(249,193,18)" fg:x="3811" fg:w="18"/><text x="94.9097%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;ahash::hash_map::AHashMap&lt;rutin::frame::Resp3,rutin::frame::Resp3&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="95.0820%" y="805" width="0.0248%" height="15" fill="rgb(209,133,39)" fg:x="3828" fg:w="1"/><text x="95.3320%" y="815.50"></text></g><g><title>&lt;rutin::cmd::CmdUnparsed as core::iter::traits::iterator::Iterator&gt;::next (76 samples, 1.89%)</title><rect x="94.5107%" y="853" width="1.8877%" height="15" fill="rgb(232,100,14)" fg:x="3805" fg:w="76"/><text x="94.7607%" y="863.50">&lt;..</text></g><g><title>core::option::Option&lt;T&gt;::and_then (72 samples, 1.79%)</title><rect x="94.6100%" y="837" width="1.7884%" height="15" fill="rgb(224,185,1)" fg:x="3809" fg:w="72"/><text x="94.8600%" y="847.50">c..</text></g><g><title>[libc.so.6] (52 samples, 1.29%)</title><rect x="95.1068%" y="821" width="1.2916%" height="15" fill="rgb(223,139,8)" fg:x="3829" fg:w="52"/><text x="95.3568%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::cmd::CmdUnparsed&gt; (3 samples, 0.07%)</title><rect x="96.3984%" y="853" width="0.0745%" height="15" fill="rgb(232,213,38)" fg:x="3881" fg:w="3"/><text x="96.6484%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;rutin::frame::Resp3&gt;&gt; (3 samples, 0.07%)</title><rect x="96.3984%" y="837" width="0.0745%" height="15" fill="rgb(207,94,22)" fg:x="3881" fg:w="3"/><text x="96.6484%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;rutin::frame::Resp3&gt;&gt; (1 samples, 0.02%)</title><rect x="96.4481%" y="821" width="0.0248%" height="15" fill="rgb(219,183,54)" fg:x="3883" fg:w="1"/><text x="96.6981%" y="831.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="96.4481%" y="805" width="0.0248%" height="15" fill="rgb(216,185,54)" fg:x="3883" fg:w="1"/><text x="96.6981%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="96.4481%" y="789" width="0.0248%" height="15" fill="rgb(254,217,39)" fg:x="3883" fg:w="1"/><text x="96.6981%" y="799.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="96.4481%" y="773" width="0.0248%" height="15" fill="rgb(240,178,23)" fg:x="3883" fg:w="1"/><text x="96.6981%" y="783.50"></text></g><g><title>__rust_dealloc (1 samples, 0.02%)</title><rect x="96.4481%" y="757" width="0.0248%" height="15" fill="rgb(218,11,47)" fg:x="3883" fg:w="1"/><text x="96.6981%" y="767.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (1 samples, 0.02%)</title><rect x="96.4481%" y="741" width="0.0248%" height="15" fill="rgb(218,51,51)" fg:x="3883" fg:w="1"/><text x="96.6981%" y="751.50"></text></g><g><title>&lt;rutin::cmd::commands::str::Get as rutin::cmd::CmdExecutor&gt;::parse (126 samples, 3.13%)</title><rect x="93.3929%" y="869" width="3.1297%" height="15" fill="rgb(238,126,27)" fg:x="3760" fg:w="126"/><text x="93.6429%" y="879.50">&lt;ru..</text></g><g><title>rutin::cmd::CmdUnparsed::len (2 samples, 0.05%)</title><rect x="96.4729%" y="853" width="0.0497%" height="15" fill="rgb(249,202,22)" fg:x="3884" fg:w="2"/><text x="96.7229%" y="863.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::len (2 samples, 0.05%)</title><rect x="96.4729%" y="837" width="0.0497%" height="15" fill="rgb(254,195,49)" fg:x="3884" fg:w="2"/><text x="96.7229%" y="847.50"></text></g><g><title>_mi_page_retire (2 samples, 0.05%)</title><rect x="96.5226%" y="869" width="0.0497%" height="15" fill="rgb(208,123,14)" fg:x="3886" fg:w="2"/><text x="96.7726%" y="879.50"></text></g><g><title>mi_heap_page_queue_of (1 samples, 0.02%)</title><rect x="96.5723%" y="837" width="0.0248%" height="15" fill="rgb(224,200,8)" fg:x="3888" fg:w="1"/><text x="96.8223%" y="847.50"></text></g><g><title>mi_bin (1 samples, 0.02%)</title><rect x="96.5723%" y="821" width="0.0248%" height="15" fill="rgb(217,61,36)" fg:x="3888" fg:w="1"/><text x="96.8223%" y="831.50"></text></g><g><title>_mi_page_unfull (2 samples, 0.05%)</title><rect x="96.5723%" y="869" width="0.0497%" height="15" fill="rgb(206,35,45)" fg:x="3888" fg:w="2"/><text x="96.8223%" y="879.50"></text></g><g><title>_mi_page_unfull (2 samples, 0.05%)</title><rect x="96.5723%" y="853" width="0.0497%" height="15" fill="rgb(217,65,33)" fg:x="3888" fg:w="2"/><text x="96.8223%" y="863.50"></text></g><g><title>mi_page_queue_enqueue_from (1 samples, 0.02%)</title><rect x="96.5971%" y="837" width="0.0248%" height="15" fill="rgb(222,158,48)" fg:x="3889" fg:w="1"/><text x="96.8471%" y="847.50"></text></g><g><title>_mi_stat_decrease (2 samples, 0.05%)</title><rect x="96.6716%" y="837" width="0.0497%" height="15" fill="rgb(254,2,54)" fg:x="3892" fg:w="2"/><text x="96.9216%" y="847.50"></text></g><g><title>mi_stat_update (1 samples, 0.02%)</title><rect x="96.6965%" y="821" width="0.0248%" height="15" fill="rgb(250,143,38)" fg:x="3893" fg:w="1"/><text x="96.9465%" y="831.50"></text></g><g><title>_mi_prim_clock_now (2 samples, 0.05%)</title><rect x="96.7462%" y="789" width="0.0497%" height="15" fill="rgb(248,25,0)" fg:x="3895" fg:w="2"/><text x="96.9962%" y="799.50"></text></g><g><title>clock_gettime (2 samples, 0.05%)</title><rect x="96.7462%" y="773" width="0.0497%" height="15" fill="rgb(206,152,27)" fg:x="3895" fg:w="2"/><text x="96.9962%" y="783.50"></text></g><g><title>__vdso_clock_gettime (2 samples, 0.05%)</title><rect x="96.7462%" y="757" width="0.0497%" height="15" fill="rgb(240,77,30)" fg:x="3895" fg:w="2"/><text x="96.9962%" y="767.50"></text></g><g><title>mi_option_get (1 samples, 0.02%)</title><rect x="96.7958%" y="789" width="0.0248%" height="15" fill="rgb(231,5,3)" fg:x="3897" fg:w="1"/><text x="97.0458%" y="799.50"></text></g><g><title>mi_segment_page_clear (8 samples, 0.20%)</title><rect x="96.6468%" y="853" width="0.1987%" height="15" fill="rgb(207,226,32)" fg:x="3891" fg:w="8"/><text x="96.8968%" y="863.50"></text></g><g><title>mi_segment_span_free_coalesce (5 samples, 0.12%)</title><rect x="96.7213%" y="837" width="0.1242%" height="15" fill="rgb(222,207,47)" fg:x="3894" fg:w="5"/><text x="96.9713%" y="847.50"></text></g><g><title>mi_segment_span_free (5 samples, 0.12%)</title><rect x="96.7213%" y="821" width="0.1242%" height="15" fill="rgb(229,115,45)" fg:x="3894" fg:w="5"/><text x="96.9713%" y="831.50"></text></g><g><title>mi_segment_schedule_purge (5 samples, 0.12%)</title><rect x="96.7213%" y="805" width="0.1242%" height="15" fill="rgb(224,191,6)" fg:x="3894" fg:w="5"/><text x="96.9713%" y="815.50"></text></g><g><title>mi_segment_commit_mask (1 samples, 0.02%)</title><rect x="96.8207%" y="789" width="0.0248%" height="15" fill="rgb(230,227,24)" fg:x="3898" fg:w="1"/><text x="97.0707%" y="799.50"></text></g><g><title>mi_segment_commit_mask (1 samples, 0.02%)</title><rect x="96.8207%" y="773" width="0.0248%" height="15" fill="rgb(228,80,19)" fg:x="3898" fg:w="1"/><text x="97.0707%" y="783.50"></text></g><g><title>mi_commit_mask_create (1 samples, 0.02%)</title><rect x="96.8207%" y="757" width="0.0248%" height="15" fill="rgb(247,229,0)" fg:x="3898" fg:w="1"/><text x="97.0707%" y="767.50"></text></g><g><title>mi_commit_mask_create (1 samples, 0.02%)</title><rect x="96.8207%" y="741" width="0.0248%" height="15" fill="rgb(237,194,15)" fg:x="3898" fg:w="1"/><text x="97.0707%" y="751.50"></text></g><g><title>_mi_segment_page_free (11 samples, 0.27%)</title><rect x="96.6220%" y="869" width="0.2732%" height="15" fill="rgb(219,203,20)" fg:x="3890" fg:w="11"/><text x="96.8720%" y="879.50"></text></g><g><title>mi_segment_try_purge (2 samples, 0.05%)</title><rect x="96.8455%" y="853" width="0.0497%" height="15" fill="rgb(234,128,8)" fg:x="3899" fg:w="2"/><text x="97.0955%" y="863.50"></text></g><g><title>_mi_prim_clock_now (2 samples, 0.05%)</title><rect x="96.8455%" y="837" width="0.0497%" height="15" fill="rgb(248,202,8)" fg:x="3899" fg:w="2"/><text x="97.0955%" y="847.50"></text></g><g><title>clock_gettime (2 samples, 0.05%)</title><rect x="96.8455%" y="821" width="0.0497%" height="15" fill="rgb(206,104,37)" fg:x="3899" fg:w="2"/><text x="97.0955%" y="831.50"></text></g><g><title>__vdso_clock_gettime (2 samples, 0.05%)</title><rect x="96.8455%" y="805" width="0.0497%" height="15" fill="rgb(223,8,27)" fg:x="3899" fg:w="2"/><text x="97.0955%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;rutin::cmd::commands::str::Get as rutin::cmd::CmdExecutor&gt;::execute&lt;rutin::connection::FakeStream&gt;::{{closure}}&gt; (9 samples, 0.22%)</title><rect x="96.8952%" y="869" width="0.2235%" height="15" fill="rgb(216,217,28)" fg:x="3901" fg:w="9"/><text x="97.1452%" y="879.50"></text></g><g><title>mi_free (7 samples, 0.17%)</title><rect x="97.1187%" y="869" width="0.1739%" height="15" fill="rgb(249,199,1)" fg:x="3910" fg:w="7"/><text x="97.3687%" y="879.50"></text></g><g><title>_mi_segment_page_of (7 samples, 0.17%)</title><rect x="97.1187%" y="853" width="0.1739%" height="15" fill="rgb(240,85,17)" fg:x="3910" fg:w="7"/><text x="97.3687%" y="863.50"></text></g><g><title>mi_slice_first (4 samples, 0.10%)</title><rect x="97.1932%" y="837" width="0.0994%" height="15" fill="rgb(206,108,45)" fg:x="3913" fg:w="4"/><text x="97.4432%" y="847.50"></text></g><g><title>rutin::cmd::CmdExecutor::apply::_{{closure}} (1,116 samples, 27.72%)</title><rect x="69.6721%" y="885" width="27.7198%" height="15" fill="rgb(245,210,41)" fg:x="2805" fg:w="1116"/><text x="69.9221%" y="895.50">rutin::cmd::CmdExecutor::apply::_{{closure}}</text></g><g><title>rutin::conf::security::AccessControl::is_forbidden_cmd (4 samples, 0.10%)</title><rect x="97.2926%" y="869" width="0.0994%" height="15" fill="rgb(206,13,37)" fg:x="3917" fg:w="4"/><text x="97.5426%" y="879.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (9 samples, 0.22%)</title><rect x="97.4416%" y="869" width="0.2235%" height="15" fill="rgb(250,61,18)" fg:x="3923" fg:w="9"/><text x="97.6916%" y="879.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.22%)</title><rect x="97.4416%" y="853" width="0.2235%" height="15" fill="rgb(235,172,48)" fg:x="3923" fg:w="9"/><text x="97.6916%" y="863.50"></text></g><g><title>[libc.so.6] (7 samples, 0.17%)</title><rect x="97.4913%" y="837" width="0.1739%" height="15" fill="rgb(249,201,17)" fg:x="3925" fg:w="7"/><text x="97.7413%" y="847.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.07%)</title><rect x="97.6652%" y="853" width="0.0745%" height="15" fill="rgb(219,208,6)" fg:x="3932" fg:w="3"/><text x="97.9152%" y="863.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (3 samples, 0.07%)</title><rect x="97.6652%" y="837" width="0.0745%" height="15" fill="rgb(248,31,23)" fg:x="3932" fg:w="3"/><text x="97.9152%" y="847.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (3 samples, 0.07%)</title><rect x="97.6652%" y="821" width="0.0745%" height="15" fill="rgb(245,15,42)" fg:x="3932" fg:w="3"/><text x="97.9152%" y="831.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (3 samples, 0.07%)</title><rect x="97.6652%" y="805" width="0.0745%" height="15" fill="rgb(222,217,39)" fg:x="3932" fg:w="3"/><text x="97.9152%" y="815.50"></text></g><g><title>rutin::cmd::dispatch::_{{closure}} (1,939 samples, 48.16%)</title><rect x="49.8510%" y="933" width="48.1619%" height="15" fill="rgb(210,219,27)" fg:x="2007" fg:w="1939"/><text x="50.1010%" y="943.50">rutin::cmd::dispatch::_{{closure}}</text></g><g><title>rutin::cmd::dispatch::_{{closure}}::_{{closure}} (1,650 samples, 40.98%)</title><rect x="57.0293%" y="917" width="40.9836%" height="15" fill="rgb(252,166,36)" fg:x="2296" fg:w="1650"/><text x="57.2793%" y="927.50">rutin::cmd::dispatch::_{{closure}}::_{{closure}}</text></g><g><title>rutin::cmd::dispatch::_{{closure}}::_{{closure}}::_{{closure}} (1,510 samples, 37.51%)</title><rect x="60.5067%" y="901" width="37.5062%" height="15" fill="rgb(245,132,34)" fg:x="2436" fg:w="1510"/><text x="60.7567%" y="911.50">rutin::cmd::dispatch::_{{closure}}::_{{closure}}::_{{closure}}</text></g><g><title>rutin::util::uppercase (25 samples, 0.62%)</title><rect x="97.3920%" y="885" width="0.6210%" height="15" fill="rgb(236,54,3)" fg:x="3921" fg:w="25"/><text x="97.6420%" y="895.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::make_ascii_uppercase (14 samples, 0.35%)</title><rect x="97.6652%" y="869" width="0.3477%" height="15" fill="rgb(241,173,43)" fg:x="3932" fg:w="14"/><text x="97.9152%" y="879.50"></text></g><g><title>core::num::&lt;impl u8&gt;::make_ascii_uppercase (11 samples, 0.27%)</title><rect x="97.7397%" y="853" width="0.2732%" height="15" fill="rgb(215,190,9)" fg:x="3935" fg:w="11"/><text x="97.9897%" y="863.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_uppercase (11 samples, 0.27%)</title><rect x="97.7397%" y="837" width="0.2732%" height="15" fill="rgb(242,101,16)" fg:x="3935" fg:w="11"/><text x="97.9897%" y="847.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_lowercase (7 samples, 0.17%)</title><rect x="97.8390%" y="821" width="0.1739%" height="15" fill="rgb(223,190,21)" fg:x="3939" fg:w="7"/><text x="98.0890%" y="831.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (2 samples, 0.05%)</title><rect x="99.1307%" y="805" width="0.0497%" height="15" fill="rgb(215,228,25)" fg:x="3991" fg:w="2"/><text x="99.3807%" y="815.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (2 samples, 0.05%)</title><rect x="99.1307%" y="789" width="0.0497%" height="15" fill="rgb(225,36,22)" fg:x="3991" fg:w="2"/><text x="99.3807%" y="799.50"></text></g><g><title>mio::sys::unix::stateless_io_source::IoSourceState::do_io (2 samples, 0.05%)</title><rect x="99.1307%" y="773" width="0.0497%" height="15" fill="rgb(251,106,46)" fg:x="3991" fg:w="2"/><text x="99.3807%" y="783.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write::_{{closure}} (2 samples, 0.05%)</title><rect x="99.1307%" y="757" width="0.0497%" height="15" fill="rgb(208,90,1)" fg:x="3991" fg:w="2"/><text x="99.3807%" y="767.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (2 samples, 0.05%)</title><rect x="99.1307%" y="741" width="0.0497%" height="15" fill="rgb(243,10,4)" fg:x="3991" fg:w="2"/><text x="99.3807%" y="751.50"></text></g><g><title>std::sys_common::net::TcpStream::write (2 samples, 0.05%)</title><rect x="99.1307%" y="725" width="0.0497%" height="15" fill="rgb(212,137,27)" fg:x="3991" fg:w="2"/><text x="99.3807%" y="735.50"></text></g><g><title>__send (2 samples, 0.05%)</title><rect x="99.1307%" y="709" width="0.0497%" height="15" fill="rgb(231,220,49)" fg:x="3991" fg:w="2"/><text x="99.3807%" y="719.50"></text></g><g><title>&lt;tokio::io::util::write_buf::WriteBuf&lt;W,B&gt; as core::future::future::Future&gt;::poll (4 samples, 0.10%)</title><rect x="99.1307%" y="885" width="0.0994%" height="15" fill="rgb(237,96,20)" fg:x="3991" fg:w="4"/><text x="99.3807%" y="895.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (4 samples, 0.10%)</title><rect x="99.1307%" y="869" width="0.0994%" height="15" fill="rgb(239,229,30)" fg:x="3991" fg:w="4"/><text x="99.3807%" y="879.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (4 samples, 0.10%)</title><rect x="99.1307%" y="853" width="0.0994%" height="15" fill="rgb(219,65,33)" fg:x="3991" fg:w="4"/><text x="99.3807%" y="863.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (4 samples, 0.10%)</title><rect x="99.1307%" y="837" width="0.0994%" height="15" fill="rgb(243,134,7)" fg:x="3991" fg:w="4"/><text x="99.3807%" y="847.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (4 samples, 0.10%)</title><rect x="99.1307%" y="821" width="0.0994%" height="15" fill="rgb(216,177,54)" fg:x="3991" fg:w="4"/><text x="99.3807%" y="831.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_write_ready (2 samples, 0.05%)</title><rect x="99.1803%" y="805" width="0.0497%" height="15" fill="rgb(211,160,20)" fg:x="3993" fg:w="2"/><text x="99.4303%" y="815.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.02%)</title><rect x="99.2052%" y="789" width="0.0248%" height="15" fill="rgb(239,85,39)" fg:x="3994" fg:w="1"/><text x="99.4552%" y="799.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (1 samples, 0.02%)</title><rect x="99.2052%" y="773" width="0.0248%" height="15" fill="rgb(232,125,22)" fg:x="3994" fg:w="1"/><text x="99.4552%" y="783.50"></text></g><g><title>tokio::runtime::io::driver::Direction::mask (1 samples, 0.02%)</title><rect x="99.2052%" y="757" width="0.0248%" height="15" fill="rgb(244,57,34)" fg:x="3994" fg:w="1"/><text x="99.4552%" y="767.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::advance_mut (5 samples, 0.12%)</title><rect x="99.3790%" y="837" width="0.1242%" height="15" fill="rgb(214,203,32)" fg:x="4001" fg:w="5"/><text x="99.6290%" y="847.50"></text></g><g><title>bytes::bytes_mut::BytesMut::capacity (3 samples, 0.07%)</title><rect x="99.5032%" y="821" width="0.0745%" height="15" fill="rgb(207,58,43)" fg:x="4006" fg:w="3"/><text x="99.7532%" y="831.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (5 samples, 0.12%)</title><rect x="99.5032%" y="837" width="0.1242%" height="15" fill="rgb(215,193,15)" fg:x="4006" fg:w="5"/><text x="99.7532%" y="847.50"></text></g><g><title>bytes::bytes_mut::BytesMut::len (2 samples, 0.05%)</title><rect x="99.5777%" y="821" width="0.0497%" height="15" fill="rgb(232,15,44)" fg:x="4009" fg:w="2"/><text x="99.8277%" y="831.50"></text></g><g><title>bytes::bytes_mut::BytesMut::spare_capacity_mut (4 samples, 0.10%)</title><rect x="99.6274%" y="837" width="0.0994%" height="15" fill="rgb(212,3,48)" fg:x="4011" fg:w="4"/><text x="99.8774%" y="847.50"></text></g><g><title>rutin::connection::Connection&lt;S&gt;::write_frame::_{{closure}}::_{{closure}} (64 samples, 1.59%)</title><rect x="98.2613%" y="917" width="1.5897%" height="15" fill="rgb(218,128,7)" fg:x="3956" fg:w="64"/><text x="98.5113%" y="927.50"></text></g><g><title>rutin::connection::Connection&lt;S&gt;::write_frame::_{{closure}}::_{{closure}}::_{{closure}} (38 samples, 0.94%)</title><rect x="98.9071%" y="901" width="0.9439%" height="15" fill="rgb(226,216,39)" fg:x="3982" fg:w="38"/><text x="99.1571%" y="911.50"></text></g><g><title>rutin::frame::Resp3&lt;B,S&gt;::encode_buf (25 samples, 0.62%)</title><rect x="99.2300%" y="885" width="0.6210%" height="15" fill="rgb(243,47,51)" fg:x="3995" fg:w="25"/><text x="99.4800%" y="895.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (19 samples, 0.47%)</title><rect x="99.3790%" y="869" width="0.4719%" height="15" fill="rgb(241,183,40)" fg:x="4001" fg:w="19"/><text x="99.6290%" y="879.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (19 samples, 0.47%)</title><rect x="99.3790%" y="853" width="0.4719%" height="15" fill="rgb(231,217,32)" fg:x="4001" fg:w="19"/><text x="99.6290%" y="863.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.12%)</title><rect x="99.7268%" y="837" width="0.1242%" height="15" fill="rgb(229,61,38)" fg:x="4015" fg:w="5"/><text x="99.9768%" y="847.50"></text></g><g><title>&lt;tokio::task::task_local::TaskLocalFuture&lt;T,F&gt; as core::future::future::Future&gt;::poll::_{{closure}} (2,325 samples, 57.75%)</title><rect x="42.1262%" y="965" width="57.7496%" height="15" fill="rgb(225,210,5)" fg:x="1696" fg:w="2325"/><text x="42.3762%" y="975.50">&lt;tokio::task::task_local::TaskLocalFuture&lt;T,F&gt; as core::future::future::Future&gt;::poll::_{{closu..</text></g><g><title>rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}}::_{{closure}}::_{{closure}}::_{{closure}} (2,325 samples, 57.75%)</title><rect x="42.1262%" y="949" width="57.7496%" height="15" fill="rgb(231,79,45)" fg:x="1696" fg:w="2325"/><text x="42.3762%" y="959.50">rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}}::_{{closure}}::_{{closure}}::_{{closure}}</text></g><g><title>rutin::connection::Connection&lt;S&gt;::write_frame::_{{closure}} (75 samples, 1.86%)</title><rect x="98.0129%" y="933" width="1.8629%" height="15" fill="rgb(224,100,7)" fg:x="3946" fg:w="75"/><text x="98.2629%" y="943.50">r..</text></g><g><title>tracing_core::metadata::LevelFilter::current (1 samples, 0.02%)</title><rect x="99.8510%" y="917" width="0.0248%" height="15" fill="rgb(241,198,18)" fg:x="4020" fg:w="1"/><text x="100.1010%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.02%)</title><rect x="99.8510%" y="901" width="0.0248%" height="15" fill="rgb(252,97,53)" fg:x="4020" fg:w="1"/><text x="100.1010%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="99.8510%" y="885" width="0.0248%" height="15" fill="rgb(220,88,7)" fg:x="4020" fg:w="1"/><text x="100.1010%" y="895.50"></text></g><g><title>core::mem::drop (1 samples, 0.02%)</title><rect x="99.8758%" y="965" width="0.0248%" height="15" fill="rgb(213,176,14)" fg:x="4021" fg:w="1"/><text x="100.1258%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::task::task_local::LocalKey&lt;T&gt;::scope_inner::Guard&lt;u64&gt;&gt; (1 samples, 0.02%)</title><rect x="99.8758%" y="949" width="0.0248%" height="15" fill="rgb(246,73,7)" fg:x="4021" fg:w="1"/><text x="100.1258%" y="959.50"></text></g><g><title>&lt;tokio::task::task_local::LocalKey&lt;T&gt;::scope_inner::Guard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="99.8758%" y="933" width="0.0248%" height="15" fill="rgb(245,64,36)" fg:x="4021" fg:w="1"/><text x="100.1258%" y="943.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.8758%" y="917" width="0.0248%" height="15" fill="rgb(245,80,10)" fg:x="4021" fg:w="1"/><text x="100.1258%" y="927.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.02%)</title><rect x="99.8758%" y="901" width="0.0248%" height="15" fill="rgb(232,107,50)" fg:x="4021" fg:w="1"/><text x="100.1258%" y="911.50"></text></g><g><title>&lt;tokio::task::task_local::LocalKey&lt;T&gt;::scope_inner::Guard&lt;T&gt; as core::ops::drop::Drop&gt;::drop::_{{closure}} (1 samples, 0.02%)</title><rect x="99.8758%" y="885" width="0.0248%" height="15" fill="rgb(253,3,0)" fg:x="4021" fg:w="1"/><text x="100.1258%" y="895.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.02%)</title><rect x="99.8758%" y="869" width="0.0248%" height="15" fill="rgb(212,99,53)" fg:x="4021" fg:w="1"/><text x="100.1258%" y="879.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.02%)</title><rect x="99.8758%" y="853" width="0.0248%" height="15" fill="rgb(249,111,54)" fg:x="4021" fg:w="1"/><text x="100.1258%" y="863.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.02%)</title><rect x="99.8758%" y="837" width="0.0248%" height="15" fill="rgb(249,55,30)" fg:x="4021" fg:w="1"/><text x="100.1258%" y="847.50"></text></g><g><title>rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}}::_{{closure}} (2,329 samples, 57.85%)</title><rect x="42.0765%" y="1029" width="57.8490%" height="15" fill="rgb(237,47,42)" fg:x="1694" fg:w="2329"/><text x="42.3265%" y="1039.50">rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}}::_{{closure}}</text></g><g><title>rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}}::_{{closure}}::_{{closure}} (2,327 samples, 57.80%)</title><rect x="42.1262%" y="1013" width="57.7993%" height="15" fill="rgb(211,20,18)" fg:x="1696" fg:w="2327"/><text x="42.3762%" y="1023.50">rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}}::_{{closure}}::_{{closure}}</text></g><g><title>&lt;tokio::task::task_local::TaskLocalFuture&lt;T,F&gt; as core::future::future::Future&gt;::poll (2,327 samples, 57.80%)</title><rect x="42.1262%" y="997" width="57.7993%" height="15" fill="rgb(231,203,46)" fg:x="1696" fg:w="2327"/><text x="42.3762%" y="1007.50">&lt;tokio::task::task_local::TaskLocalFuture&lt;T,F&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::task::task_local::LocalKey&lt;T&gt;::scope_inner (2,327 samples, 57.80%)</title><rect x="42.1262%" y="981" width="57.7993%" height="15" fill="rgb(237,142,3)" fg:x="1696" fg:w="2327"/><text x="42.3762%" y="991.50">tokio::task::task_local::LocalKey&lt;T&gt;::scope_inner</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.02%)</title><rect x="99.9006%" y="965" width="0.0248%" height="15" fill="rgb(241,107,1)" fg:x="4022" fg:w="1"/><text x="100.1506%" y="975.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.02%)</title><rect x="99.9006%" y="949" width="0.0248%" height="15" fill="rgb(229,83,13)" fg:x="4022" fg:w="1"/><text x="100.1506%" y="959.50"></text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="99.9255%" y="837" width="0.0248%" height="15" fill="rgb(241,91,40)" fg:x="4023" fg:w="1"/><text x="100.1755%" y="847.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (2 samples, 0.05%)</title><rect x="99.9255%" y="981" width="0.0497%" height="15" fill="rgb(225,3,45)" fg:x="4023" fg:w="2"/><text x="100.1755%" y="991.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 0.05%)</title><rect x="99.9255%" y="965" width="0.0497%" height="15" fill="rgb(244,223,14)" fg:x="4023" fg:w="2"/><text x="100.1755%" y="975.50"></text></g><g><title>std::panicking::try (2 samples, 0.05%)</title><rect x="99.9255%" y="949" width="0.0497%" height="15" fill="rgb(224,124,37)" fg:x="4023" fg:w="2"/><text x="100.1755%" y="959.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 0.05%)</title><rect x="99.9255%" y="933" width="0.0497%" height="15" fill="rgb(251,171,30)" fg:x="4023" fg:w="2"/><text x="100.1755%" y="943.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 0.05%)</title><rect x="99.9255%" y="917" width="0.0497%" height="15" fill="rgb(236,46,54)" fg:x="4023" fg:w="2"/><text x="100.1755%" y="927.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (2 samples, 0.05%)</title><rect x="99.9255%" y="901" width="0.0497%" height="15" fill="rgb(245,213,5)" fg:x="4023" fg:w="2"/><text x="100.1755%" y="911.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (2 samples, 0.05%)</title><rect x="99.9255%" y="885" width="0.0497%" height="15" fill="rgb(230,144,27)" fg:x="4023" fg:w="2"/><text x="100.1755%" y="895.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (2 samples, 0.05%)</title><rect x="99.9255%" y="869" width="0.0497%" height="15" fill="rgb(220,86,6)" fg:x="4023" fg:w="2"/><text x="100.1755%" y="879.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (2 samples, 0.05%)</title><rect x="99.9255%" y="853" width="0.0497%" height="15" fill="rgb(240,20,13)" fg:x="4023" fg:w="2"/><text x="100.1755%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::TaskIdGuard&gt; (1 samples, 0.02%)</title><rect x="99.9503%" y="837" width="0.0248%" height="15" fill="rgb(217,89,34)" fg:x="4024" fg:w="1"/><text x="100.2003%" y="847.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="99.9503%" y="821" width="0.0248%" height="15" fill="rgb(229,13,5)" fg:x="4024" fg:w="1"/><text x="100.2003%" y="831.50"></text></g><g><title>tokio::runtime::context::set_current_task_id (1 samples, 0.02%)</title><rect x="99.9503%" y="805" width="0.0248%" height="15" fill="rgb(244,67,35)" fg:x="4024" fg:w="1"/><text x="100.2003%" y="815.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.02%)</title><rect x="99.9503%" y="789" width="0.0248%" height="15" fill="rgb(221,40,2)" fg:x="4024" fg:w="1"/><text x="100.2003%" y="799.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.02%)</title><rect x="99.9503%" y="773" width="0.0248%" height="15" fill="rgb(237,157,21)" fg:x="4024" fg:w="1"/><text x="100.2003%" y="783.50"></text></g><g><title>tokio::runtime::context::CONTEXT::_{{constant}}::_{{closure}} (1 samples, 0.02%)</title><rect x="99.9503%" y="757" width="0.0248%" height="15" fill="rgb(222,94,11)" fg:x="4024" fg:w="1"/><text x="100.2003%" y="767.50"></text></g><g><title>std::sys::thread_local::native::eager::Storage&lt;T&gt;::get (1 samples, 0.02%)</title><rect x="99.9503%" y="741" width="0.0248%" height="15" fill="rgb(249,113,6)" fg:x="4024" fg:w="1"/><text x="100.2003%" y="751.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.02%)</title><rect x="99.9503%" y="725" width="0.0248%" height="15" fill="rgb(238,137,36)" fg:x="4024" fg:w="1"/><text x="100.2003%" y="735.50"></text></g><g><title>all (4,026 samples, 100%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(210,102,26)" fg:x="0" fg:w="4026"/><text x="0.2500%" y="1071.50"></text></g><g><title>tokio-runtime-w (4,026 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(218,30,30)" fg:x="0" fg:w="4026"/><text x="0.2500%" y="1055.50">tokio-runtime-w</text></g><g><title>tokio::runtime::task::raw::poll (3 samples, 0.07%)</title><rect x="99.9255%" y="1029" width="0.0745%" height="15" fill="rgb(214,67,26)" fg:x="4023" fg:w="3"/><text x="100.1755%" y="1039.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (3 samples, 0.07%)</title><rect x="99.9255%" y="1013" width="0.0745%" height="15" fill="rgb(251,9,53)" fg:x="4023" fg:w="3"/><text x="100.1755%" y="1023.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (3 samples, 0.07%)</title><rect x="99.9255%" y="997" width="0.0745%" height="15" fill="rgb(228,204,25)" fg:x="4023" fg:w="3"/><text x="100.1755%" y="1007.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running (1 samples, 0.02%)</title><rect x="99.9752%" y="981" width="0.0248%" height="15" fill="rgb(207,153,8)" fg:x="4025" fg:w="1"/><text x="100.2252%" y="991.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (1 samples, 0.02%)</title><rect x="99.9752%" y="965" width="0.0248%" height="15" fill="rgb(242,9,16)" fg:x="4025" fg:w="1"/><text x="100.2252%" y="975.50"></text></g></svg></svg>