<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1158" onload="init(evt)" viewBox="0 0 1200 1158" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1158" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1141.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1141.00"> </text><svg id="frames" x="10" width="1180" total_samples="4749"><g><title>rutin (1 samples, 0.02%)</title><rect x="0.0000%" y="1093" width="0.0211%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1103.50"></text></g><g><title>rutin::server::run::_{{closure}} (1 samples, 0.02%)</title><rect x="0.0000%" y="1077" width="0.0211%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1087.50"></text></g><g><title>rutin::shared::Shared::new (1 samples, 0.02%)</title><rect x="0.0000%" y="1061" width="0.0211%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1071.50"></text></g><g><title>rutin::shared::Shared::with_conf (1 samples, 0.02%)</title><rect x="0.0000%" y="1045" width="0.0211%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1055.50"></text></g><g><title>rutin::shared::script::Script::new (1 samples, 0.02%)</title><rect x="0.0000%" y="1029" width="0.0211%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1039.50"></text></g><g><title>&lt;rutin::shared::script::lua::LuaScript as core::default::Default&gt;::default (1 samples, 0.02%)</title><rect x="0.0000%" y="1013" width="0.0211%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1023.50"></text></g><g><title>tokio_util::task::spawn_pinned::LocalPoolHandle::new (1 samples, 0.02%)</title><rect x="0.0000%" y="997" width="0.0211%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1007.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.02%)</title><rect x="0.0000%" y="981" width="0.0211%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="0.0000%" y="965" width="0.0211%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="0.0000%" y="949" width="0.0211%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="0.0000%" y="933" width="0.0211%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="0.0000%" y="917" width="0.0211%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.02%)</title><rect x="0.0000%" y="901" width="0.0211%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="911.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.02%)</title><rect x="0.0000%" y="885" width="0.0211%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="895.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="0.0000%" y="869" width="0.0211%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="1"/><text x="0.2500%" y="879.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.02%)</title><rect x="0.0000%" y="853" width="0.0211%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="863.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.02%)</title><rect x="0.0000%" y="837" width="0.0211%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="1"/><text x="0.2500%" y="847.50"></text></g><g><title>tokio_util::task::spawn_pinned::LocalPoolHandle::new::_{{closure}} (1 samples, 0.02%)</title><rect x="0.0000%" y="821" width="0.0211%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="1"/><text x="0.2500%" y="831.50"></text></g><g><title>tokio_util::task::spawn_pinned::LocalWorkerHandle::new_worker (1 samples, 0.02%)</title><rect x="0.0000%" y="805" width="0.0211%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="815.50"></text></g><g><title>std::thread::spawn (1 samples, 0.02%)</title><rect x="0.0000%" y="789" width="0.0211%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="1"/><text x="0.2500%" y="799.50"></text></g><g><title>std::thread::Builder::spawn (1 samples, 0.02%)</title><rect x="0.0000%" y="773" width="0.0211%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="783.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (1 samples, 0.02%)</title><rect x="0.0000%" y="757" width="0.0211%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="767.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (1 samples, 0.02%)</title><rect x="0.0000%" y="741" width="0.0211%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="751.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new (1 samples, 0.02%)</title><rect x="0.0000%" y="725" width="0.0211%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="735.50"></text></g><g><title>pthread_create (1 samples, 0.02%)</title><rect x="0.0000%" y="709" width="0.0211%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="1"/><text x="0.2500%" y="719.50"></text></g><g><title>__mprotect (1 samples, 0.02%)</title><rect x="0.0000%" y="693" width="0.0211%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="1"/><text x="0.2500%" y="703.50"></text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 0.06%)</title><rect x="0.0211%" y="1077" width="0.0632%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="3"/><text x="0.2711%" y="1087.50"></text></g><g><title>rutin::server::listener::Server::run::_{{closure}}::_{{closure}} (3 samples, 0.06%)</title><rect x="0.0211%" y="1061" width="0.0632%" height="15" fill="rgb(238,160,17)" fg:x="1" fg:w="3"/><text x="0.2711%" y="1071.50"></text></g><g><title>rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}} (3 samples, 0.06%)</title><rect x="0.0211%" y="1045" width="0.0632%" height="15" fill="rgb(214,148,48)" fg:x="1" fg:w="3"/><text x="0.2711%" y="1055.50"></text></g><g><title>rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}}::_{{closure}} (2 samples, 0.04%)</title><rect x="0.0421%" y="1029" width="0.0421%" height="15" fill="rgb(232,36,49)" fg:x="2" fg:w="2"/><text x="0.2921%" y="1039.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (1 samples, 0.02%)</title><rect x="0.0842%" y="373" width="0.0211%" height="15" fill="rgb(209,103,24)" fg:x="4" fg:w="1"/><text x="0.3342%" y="383.50"></text></g><g><title>std::time::Instant::duration_since (1 samples, 0.02%)</title><rect x="0.0842%" y="357" width="0.0211%" height="15" fill="rgb(229,88,8)" fg:x="4" fg:w="1"/><text x="0.3342%" y="367.50"></text></g><g><title>std::time::Instant::checked_duration_since (1 samples, 0.02%)</title><rect x="0.0842%" y="341" width="0.0211%" height="15" fill="rgb(213,181,19)" fg:x="4" fg:w="1"/><text x="0.3342%" y="351.50"></text></g><g><title>std::sys::pal::unix::time::Instant::checked_sub_instant (1 samples, 0.02%)</title><rect x="0.0842%" y="325" width="0.0211%" height="15" fill="rgb(254,191,54)" fg:x="4" fg:w="1"/><text x="0.3342%" y="335.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (1 samples, 0.02%)</title><rect x="0.0842%" y="309" width="0.0211%" height="15" fill="rgb(241,83,37)" fg:x="4" fg:w="1"/><text x="0.3342%" y="319.50"></text></g><g><title>core::time::Duration::new (1 samples, 0.02%)</title><rect x="0.0842%" y="293" width="0.0211%" height="15" fill="rgb(233,36,39)" fg:x="4" fg:w="1"/><text x="0.3342%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::end_processing_scheduled_tasks (2 samples, 0.04%)</title><rect x="0.0842%" y="389" width="0.0421%" height="15" fill="rgb(226,3,54)" fg:x="4" fg:w="2"/><text x="0.3342%" y="399.50"></text></g><g><title>tokio::runtime::metrics::batch::MetricsBatch::end_processing_scheduled_tasks (1 samples, 0.02%)</title><rect x="0.1053%" y="373" width="0.0211%" height="15" fill="rgb(245,192,40)" fg:x="5" fg:w="1"/><text x="0.3553%" y="383.50"></text></g><g><title>std::time::Instant::elapsed (1 samples, 0.02%)</title><rect x="0.1053%" y="357" width="0.0211%" height="15" fill="rgb(238,167,29)" fg:x="5" fg:w="1"/><text x="0.3553%" y="367.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.02%)</title><rect x="0.1053%" y="341" width="0.0211%" height="15" fill="rgb(232,182,51)" fg:x="5" fg:w="1"/><text x="0.3553%" y="351.50"></text></g><g><title>std::sys::pal::unix::time::Instant::now (1 samples, 0.02%)</title><rect x="0.1053%" y="325" width="0.0211%" height="15" fill="rgb(231,60,39)" fg:x="5" fg:w="1"/><text x="0.3553%" y="335.50"></text></g><g><title>std::time::Instant::now (2 samples, 0.04%)</title><rect x="0.1263%" y="373" width="0.0421%" height="15" fill="rgb(208,69,12)" fg:x="6" fg:w="2"/><text x="0.3763%" y="383.50"></text></g><g><title>std::sys::pal::unix::time::Instant::now (2 samples, 0.04%)</title><rect x="0.1263%" y="357" width="0.0421%" height="15" fill="rgb(235,93,37)" fg:x="6" fg:w="2"/><text x="0.3763%" y="367.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (2 samples, 0.04%)</title><rect x="0.1263%" y="341" width="0.0421%" height="15" fill="rgb(213,116,39)" fg:x="6" fg:w="2"/><text x="0.3763%" y="351.50"></text></g><g><title>clock_gettime (2 samples, 0.04%)</title><rect x="0.1263%" y="325" width="0.0421%" height="15" fill="rgb(222,207,29)" fg:x="6" fg:w="2"/><text x="0.3763%" y="335.50"></text></g><g><title>__vdso_clock_gettime (2 samples, 0.04%)</title><rect x="0.1263%" y="309" width="0.0421%" height="15" fill="rgb(206,96,30)" fg:x="6" fg:w="2"/><text x="0.3763%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::start_processing_scheduled_tasks (3 samples, 0.06%)</title><rect x="0.1263%" y="389" width="0.0632%" height="15" fill="rgb(218,138,4)" fg:x="6" fg:w="3"/><text x="0.3763%" y="399.50"></text></g><g><title>tokio::runtime::metrics::batch::MetricsBatch::start_processing_scheduled_tasks (1 samples, 0.02%)</title><rect x="0.1685%" y="373" width="0.0211%" height="15" fill="rgb(250,191,14)" fg:x="8" fg:w="1"/><text x="0.4185%" y="383.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.02%)</title><rect x="0.1685%" y="357" width="0.0211%" height="15" fill="rgb(239,60,40)" fg:x="8" fg:w="1"/><text x="0.4185%" y="367.50"></text></g><g><title>std::sys::pal::unix::time::Instant::now (1 samples, 0.02%)</title><rect x="0.1685%" y="341" width="0.0211%" height="15" fill="rgb(206,27,48)" fg:x="8" fg:w="1"/><text x="0.4185%" y="351.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.02%)</title><rect x="0.1685%" y="325" width="0.0211%" height="15" fill="rgb(225,35,8)" fg:x="8" fg:w="1"/><text x="0.4185%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.02%)</title><rect x="0.1895%" y="325" width="0.0211%" height="15" fill="rgb(250,213,24)" fg:x="9" fg:w="1"/><text x="0.4395%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="0.1895%" y="309" width="0.0211%" height="15" fill="rgb(247,123,22)" fg:x="9" fg:w="1"/><text x="0.4395%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="0.1895%" y="293" width="0.0211%" height="15" fill="rgb(231,138,38)" fg:x="9" fg:w="1"/><text x="0.4395%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="0.1895%" y="277" width="0.0211%" height="15" fill="rgb(231,145,46)" fg:x="9" fg:w="1"/><text x="0.4395%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.02%)</title><rect x="0.1895%" y="261" width="0.0211%" height="15" fill="rgb(251,118,11)" fg:x="9" fg:w="1"/><text x="0.4395%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="0.1895%" y="245" width="0.0211%" height="15" fill="rgb(217,147,25)" fg:x="9" fg:w="1"/><text x="0.4395%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="0.1895%" y="229" width="0.0211%" height="15" fill="rgb(247,81,37)" fg:x="9" fg:w="1"/><text x="0.4395%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1 samples, 0.02%)</title><rect x="0.1895%" y="213" width="0.0211%" height="15" fill="rgb(209,12,38)" fg:x="9" fg:w="1"/><text x="0.4395%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="0.1895%" y="197" width="0.0211%" height="15" fill="rgb(227,1,9)" fg:x="9" fg:w="1"/><text x="0.4395%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="0.1895%" y="181" width="0.0211%" height="15" fill="rgb(248,47,43)" fg:x="9" fg:w="1"/><text x="0.4395%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="0.1895%" y="165" width="0.0211%" height="15" fill="rgb(221,10,30)" fg:x="9" fg:w="1"/><text x="0.4395%" y="175.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="0.1895%" y="149" width="0.0211%" height="15" fill="rgb(210,229,1)" fg:x="9" fg:w="1"/><text x="0.4395%" y="159.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.02%)</title><rect x="0.1895%" y="133" width="0.0211%" height="15" fill="rgb(222,148,37)" fg:x="9" fg:w="1"/><text x="0.4395%" y="143.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.02%)</title><rect x="0.1895%" y="117" width="0.0211%" height="15" fill="rgb(234,67,33)" fg:x="9" fg:w="1"/><text x="0.4395%" y="127.50"></text></g><g><title>_mi_heap_malloc_zero (1 samples, 0.02%)</title><rect x="0.1895%" y="101" width="0.0211%" height="15" fill="rgb(247,98,35)" fg:x="9" fg:w="1"/><text x="0.4395%" y="111.50"></text></g><g><title>_mi_heap_malloc_zero_ex (1 samples, 0.02%)</title><rect x="0.1895%" y="85" width="0.0211%" height="15" fill="rgb(247,138,52)" fg:x="9" fg:w="1"/><text x="0.4395%" y="95.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.02%)</title><rect x="0.1895%" y="69" width="0.0211%" height="15" fill="rgb(213,79,30)" fg:x="9" fg:w="1"/><text x="0.4395%" y="79.50"></text></g><g><title>mi_page_queue_find_free_ex (1 samples, 0.02%)</title><rect x="0.1895%" y="53" width="0.0211%" height="15" fill="rgb(246,177,23)" fg:x="9" fg:w="1"/><text x="0.4395%" y="63.50"></text></g><g><title>_mi_heap_collect_retired (1 samples, 0.02%)</title><rect x="0.1895%" y="37" width="0.0211%" height="15" fill="rgb(230,62,27)" fg:x="9" fg:w="1"/><text x="0.4395%" y="47.50"></text></g><g><title>core::mem::drop (1 samples, 0.02%)</title><rect x="0.2106%" y="325" width="0.0211%" height="15" fill="rgb(216,154,8)" fg:x="10" fg:w="1"/><text x="0.4606%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::time::wheel::Wheel&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="0.2106%" y="309" width="0.0211%" height="15" fill="rgb(244,35,45)" fg:x="10" fg:w="1"/><text x="0.4606%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="0.2106%" y="293" width="0.0211%" height="15" fill="rgb(251,115,12)" fg:x="10" fg:w="1"/><text x="0.4606%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::time::wheel::Wheel&gt;]&gt; (1 samples, 0.02%)</title><rect x="0.2106%" y="277" width="0.0211%" height="15" fill="rgb(240,54,50)" fg:x="10" fg:w="1"/><text x="0.4606%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::time::wheel::Wheel&gt;&gt; (1 samples, 0.02%)</title><rect x="0.2106%" y="261" width="0.0211%" height="15" fill="rgb(233,84,52)" fg:x="10" fg:w="1"/><text x="0.4606%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::time::wheel::Wheel&gt;&gt; (1 samples, 0.02%)</title><rect x="0.2106%" y="245" width="0.0211%" height="15" fill="rgb(207,117,47)" fg:x="10" fg:w="1"/><text x="0.4606%" y="255.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="0.2106%" y="229" width="0.0211%" height="15" fill="rgb(249,43,39)" fg:x="10" fg:w="1"/><text x="0.4606%" y="239.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (1 samples, 0.02%)</title><rect x="0.2106%" y="213" width="0.0211%" height="15" fill="rgb(209,38,44)" fg:x="10" fg:w="1"/><text x="0.4606%" y="223.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (1 samples, 0.02%)</title><rect x="0.2106%" y="197" width="0.0211%" height="15" fill="rgb(236,212,23)" fg:x="10" fg:w="1"/><text x="0.4606%" y="207.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::maintenance (3 samples, 0.06%)</title><rect x="0.1895%" y="389" width="0.0632%" height="15" fill="rgb(242,79,21)" fg:x="9" fg:w="3"/><text x="0.4395%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (3 samples, 0.06%)</title><rect x="0.1895%" y="373" width="0.0632%" height="15" fill="rgb(211,96,35)" fg:x="9" fg:w="3"/><text x="0.4395%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park_timeout (3 samples, 0.06%)</title><rect x="0.1895%" y="357" width="0.0632%" height="15" fill="rgb(253,215,40)" fg:x="9" fg:w="3"/><text x="0.4395%" y="367.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (3 samples, 0.06%)</title><rect x="0.1895%" y="341" width="0.0632%" height="15" fill="rgb(211,81,21)" fg:x="9" fg:w="3"/><text x="0.4395%" y="351.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process (1 samples, 0.02%)</title><rect x="0.2316%" y="325" width="0.0211%" height="15" fill="rgb(208,190,38)" fg:x="11" fg:w="1"/><text x="0.4816%" y="335.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (1 samples, 0.02%)</title><rect x="0.2316%" y="309" width="0.0211%" height="15" fill="rgb(235,213,38)" fg:x="11" fg:w="1"/><text x="0.4816%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min (1 samples, 0.02%)</title><rect x="0.2316%" y="293" width="0.0211%" height="15" fill="rgb(237,122,38)" fg:x="11" fg:w="1"/><text x="0.4816%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (1 samples, 0.02%)</title><rect x="0.2316%" y="277" width="0.0211%" height="15" fill="rgb(244,218,35)" fg:x="11" fg:w="1"/><text x="0.4816%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (1 samples, 0.02%)</title><rect x="0.2316%" y="261" width="0.0211%" height="15" fill="rgb(240,68,47)" fg:x="11" fg:w="1"/><text x="0.4816%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="0.2316%" y="245" width="0.0211%" height="15" fill="rgb(210,16,53)" fg:x="11" fg:w="1"/><text x="0.4816%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (1 samples, 0.02%)</title><rect x="0.2316%" y="229" width="0.0211%" height="15" fill="rgb(235,124,12)" fg:x="11" fg:w="1"/><text x="0.4816%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.02%)</title><rect x="0.2316%" y="213" width="0.0211%" height="15" fill="rgb(224,169,11)" fg:x="11" fg:w="1"/><text x="0.4816%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (1 samples, 0.02%)</title><rect x="0.2316%" y="197" width="0.0211%" height="15" fill="rgb(250,166,2)" fg:x="11" fg:w="1"/><text x="0.4816%" y="207.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.02%)</title><rect x="0.2316%" y="181" width="0.0211%" height="15" fill="rgb(242,216,29)" fg:x="11" fg:w="1"/><text x="0.4816%" y="191.50"></text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time::_{{closure}} (1 samples, 0.02%)</title><rect x="0.2316%" y="165" width="0.0211%" height="15" fill="rgb(230,116,27)" fg:x="11" fg:w="1"/><text x="0.4816%" y="175.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_sharded_time (1 samples, 0.02%)</title><rect x="0.2316%" y="149" width="0.0211%" height="15" fill="rgb(228,99,48)" fg:x="11" fg:w="1"/><text x="0.4816%" y="159.50"></text></g><g><title>tokio::util::wake_list::WakeList::wake_all (1 samples, 0.02%)</title><rect x="0.2316%" y="133" width="0.0211%" height="15" fill="rgb(253,11,6)" fg:x="11" fg:w="1"/><text x="0.4816%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;()&gt;&gt; (1 samples, 0.02%)</title><rect x="0.2737%" y="309" width="0.0211%" height="15" fill="rgb(247,143,39)" fg:x="13" fg:w="1"/><text x="0.5237%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,()&gt;&gt; (1 samples, 0.02%)</title><rect x="0.2737%" y="293" width="0.0211%" height="15" fill="rgb(236,97,10)" fg:x="13" fg:w="1"/><text x="0.5237%" y="303.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="0.2737%" y="277" width="0.0211%" height="15" fill="rgb(233,208,19)" fg:x="13" fg:w="1"/><text x="0.5237%" y="287.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (1 samples, 0.02%)</title><rect x="0.2737%" y="261" width="0.0211%" height="15" fill="rgb(216,164,2)" fg:x="13" fg:w="1"/><text x="0.5237%" y="271.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (1 samples, 0.02%)</title><rect x="0.2737%" y="245" width="0.0211%" height="15" fill="rgb(220,129,5)" fg:x="13" fg:w="1"/><text x="0.5237%" y="255.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (3 samples, 0.06%)</title><rect x="0.2948%" y="213" width="0.0632%" height="15" fill="rgb(242,17,10)" fg:x="14" fg:w="3"/><text x="0.5448%" y="223.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (3 samples, 0.06%)</title><rect x="0.2948%" y="197" width="0.0632%" height="15" fill="rgb(242,107,0)" fg:x="14" fg:w="3"/><text x="0.5448%" y="207.50"></text></g><g><title>syscall (3 samples, 0.06%)</title><rect x="0.2948%" y="181" width="0.0632%" height="15" fill="rgb(251,28,31)" fg:x="14" fg:w="3"/><text x="0.5448%" y="191.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_condvar (6 samples, 0.13%)</title><rect x="0.2527%" y="325" width="0.1263%" height="15" fill="rgb(233,223,10)" fg:x="12" fg:w="6"/><text x="0.5027%" y="335.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (4 samples, 0.08%)</title><rect x="0.2948%" y="309" width="0.0842%" height="15" fill="rgb(215,21,27)" fg:x="14" fg:w="4"/><text x="0.5448%" y="319.50"></text></g><g><title>parking_lot::condvar::Condvar::wait (4 samples, 0.08%)</title><rect x="0.2948%" y="293" width="0.0842%" height="15" fill="rgb(232,23,21)" fg:x="14" fg:w="4"/><text x="0.5448%" y="303.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (4 samples, 0.08%)</title><rect x="0.2948%" y="277" width="0.0842%" height="15" fill="rgb(244,5,23)" fg:x="14" fg:w="4"/><text x="0.5448%" y="287.50"></text></g><g><title>parking_lot_core::parking_lot::park (4 samples, 0.08%)</title><rect x="0.2948%" y="261" width="0.0842%" height="15" fill="rgb(226,81,46)" fg:x="14" fg:w="4"/><text x="0.5448%" y="271.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (4 samples, 0.08%)</title><rect x="0.2948%" y="245" width="0.0842%" height="15" fill="rgb(247,70,30)" fg:x="14" fg:w="4"/><text x="0.5448%" y="255.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (4 samples, 0.08%)</title><rect x="0.2948%" y="229" width="0.0842%" height="15" fill="rgb(212,68,19)" fg:x="14" fg:w="4"/><text x="0.5448%" y="239.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.02%)</title><rect x="0.3580%" y="213" width="0.0211%" height="15" fill="rgb(240,187,13)" fg:x="17" fg:w="1"/><text x="0.6080%" y="223.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.02%)</title><rect x="0.3580%" y="197" width="0.0211%" height="15" fill="rgb(223,113,26)" fg:x="17" fg:w="1"/><text x="0.6080%" y="207.50"></text></g><g><title>core::mem::replace (1 samples, 0.02%)</title><rect x="0.3580%" y="181" width="0.0211%" height="15" fill="rgb(206,192,2)" fg:x="17" fg:w="1"/><text x="0.6080%" y="191.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="0.3580%" y="165" width="0.0211%" height="15" fill="rgb(241,108,4)" fg:x="17" fg:w="1"/><text x="0.6080%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min (2 samples, 0.04%)</title><rect x="0.3790%" y="293" width="0.0421%" height="15" fill="rgb(247,173,49)" fg:x="18" fg:w="2"/><text x="0.6290%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (2 samples, 0.04%)</title><rect x="0.3790%" y="277" width="0.0421%" height="15" fill="rgb(224,114,35)" fg:x="18" fg:w="2"/><text x="0.6290%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (2 samples, 0.04%)</title><rect x="0.3790%" y="261" width="0.0421%" height="15" fill="rgb(245,159,27)" fg:x="18" fg:w="2"/><text x="0.6290%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.04%)</title><rect x="0.3790%" y="245" width="0.0421%" height="15" fill="rgb(245,172,44)" fg:x="18" fg:w="2"/><text x="0.6290%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find_map (2 samples, 0.04%)</title><rect x="0.3790%" y="229" width="0.0421%" height="15" fill="rgb(236,23,11)" fg:x="18" fg:w="2"/><text x="0.6290%" y="239.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (2 samples, 0.04%)</title><rect x="0.3790%" y="213" width="0.0421%" height="15" fill="rgb(205,117,38)" fg:x="18" fg:w="2"/><text x="0.6290%" y="223.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal::_{{closure}} (2 samples, 0.04%)</title><rect x="0.3790%" y="197" width="0.0421%" height="15" fill="rgb(237,72,25)" fg:x="18" fg:w="2"/><text x="0.6290%" y="207.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration_time (2 samples, 0.04%)</title><rect x="0.3790%" y="181" width="0.0421%" height="15" fill="rgb(244,70,9)" fg:x="18" fg:w="2"/><text x="0.6290%" y="191.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (2 samples, 0.04%)</title><rect x="0.3790%" y="165" width="0.0421%" height="15" fill="rgb(217,125,39)" fg:x="18" fg:w="2"/><text x="0.6290%" y="175.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (2 samples, 0.04%)</title><rect x="0.3790%" y="149" width="0.0421%" height="15" fill="rgb(235,36,10)" fg:x="18" fg:w="2"/><text x="0.6290%" y="159.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_occupied_slot (2 samples, 0.04%)</title><rect x="0.3790%" y="133" width="0.0421%" height="15" fill="rgb(251,123,47)" fg:x="18" fg:w="2"/><text x="0.6290%" y="143.50"></text></g><g><title>tokio::runtime::time::wheel::level::slot_range (1 samples, 0.02%)</title><rect x="0.4001%" y="117" width="0.0211%" height="15" fill="rgb(221,13,13)" fg:x="19" fg:w="1"/><text x="0.6501%" y="127.50"></text></g><g><title>core::num::&lt;impl usize&gt;::pow (1 samples, 0.02%)</title><rect x="0.4001%" y="101" width="0.0211%" height="15" fill="rgb(238,131,9)" fg:x="19" fg:w="1"/><text x="0.6501%" y="111.50"></text></g><g><title>tokio::process::imp::GlobalOrphanQueue::reap_orphans (1 samples, 0.02%)</title><rect x="0.4211%" y="293" width="0.0211%" height="15" fill="rgb(211,50,8)" fg:x="20" fg:w="1"/><text x="0.6711%" y="303.50"></text></g><g><title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (1 samples, 0.02%)</title><rect x="0.4211%" y="277" width="0.0211%" height="15" fill="rgb(245,182,24)" fg:x="20" fg:w="1"/><text x="0.6711%" y="287.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::try_lock (1 samples, 0.02%)</title><rect x="0.4211%" y="261" width="0.0211%" height="15" fill="rgb(242,14,37)" fg:x="20" fg:w="1"/><text x="0.6711%" y="271.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::try_lock (1 samples, 0.02%)</title><rect x="0.4211%" y="245" width="0.0211%" height="15" fill="rgb(246,228,12)" fg:x="20" fg:w="1"/><text x="0.6711%" y="255.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::try_lock (1 samples, 0.02%)</title><rect x="0.4211%" y="229" width="0.0211%" height="15" fill="rgb(213,55,15)" fg:x="20" fg:w="1"/><text x="0.6711%" y="239.50"></text></g><g><title>mio::poll::Poll::poll (2 samples, 0.04%)</title><rect x="0.4422%" y="277" width="0.0421%" height="15" fill="rgb(209,9,3)" fg:x="21" fg:w="2"/><text x="0.6922%" y="287.50"></text></g><g><title>mio::sys::unix::selector::Selector::select (2 samples, 0.04%)</title><rect x="0.4422%" y="261" width="0.0421%" height="15" fill="rgb(230,59,30)" fg:x="21" fg:w="2"/><text x="0.6922%" y="271.50"></text></g><g><title>epoll_wait (1 samples, 0.02%)</title><rect x="0.4633%" y="245" width="0.0211%" height="15" fill="rgb(209,121,21)" fg:x="22" fg:w="1"/><text x="0.7133%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.02%)</title><rect x="0.4843%" y="261" width="0.0211%" height="15" fill="rgb(220,109,13)" fg:x="23" fg:w="1"/><text x="0.7343%" y="271.50"></text></g><g><title>core::mem::replace (1 samples, 0.02%)</title><rect x="0.4843%" y="245" width="0.0211%" height="15" fill="rgb(232,18,1)" fg:x="23" fg:w="1"/><text x="0.7343%" y="255.50"></text></g><g><title>core::ptr::read (1 samples, 0.02%)</title><rect x="0.4843%" y="229" width="0.0211%" height="15" fill="rgb(215,41,42)" fg:x="23" fg:w="1"/><text x="0.7343%" y="239.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (4 samples, 0.08%)</title><rect x="0.4422%" y="293" width="0.0842%" height="15" fill="rgb(224,123,36)" fg:x="21" fg:w="4"/><text x="0.6922%" y="303.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (2 samples, 0.04%)</title><rect x="0.4843%" y="277" width="0.0421%" height="15" fill="rgb(240,125,3)" fg:x="23" fg:w="2"/><text x="0.7343%" y="287.50"></text></g><g><title>tokio::util::wake_list::WakeList::wake_all (1 samples, 0.02%)</title><rect x="0.5054%" y="261" width="0.0211%" height="15" fill="rgb(205,98,50)" fg:x="24" fg:w="1"/><text x="0.7554%" y="271.50"></text></g><g><title>tokio::runtime::context::thread_rng_n (1 samples, 0.02%)</title><rect x="0.5264%" y="277" width="0.0211%" height="15" fill="rgb(205,185,37)" fg:x="25" fg:w="1"/><text x="0.7764%" y="287.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="0.5264%" y="261" width="0.0211%" height="15" fill="rgb(238,207,15)" fg:x="25" fg:w="1"/><text x="0.7764%" y="271.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.02%)</title><rect x="0.5264%" y="245" width="0.0211%" height="15" fill="rgb(213,199,42)" fg:x="25" fg:w="1"/><text x="0.7764%" y="255.50"></text></g><g><title>tokio::runtime::context::thread_rng_n::_{{closure}} (1 samples, 0.02%)</title><rect x="0.5264%" y="229" width="0.0211%" height="15" fill="rgb(235,201,11)" fg:x="25" fg:w="1"/><text x="0.7764%" y="239.50"></text></g><g><title>tokio::util::rand::FastRand::fastrand_n (1 samples, 0.02%)</title><rect x="0.5264%" y="213" width="0.0211%" height="15" fill="rgb(207,46,11)" fg:x="25" fg:w="1"/><text x="0.7764%" y="223.50"></text></g><g><title>tokio::util::rand::FastRand::fastrand (1 samples, 0.02%)</title><rect x="0.5264%" y="197" width="0.0211%" height="15" fill="rgb(241,35,35)" fg:x="25" fg:w="1"/><text x="0.7764%" y="207.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (15 samples, 0.32%)</title><rect x="0.2527%" y="357" width="0.3159%" height="15" fill="rgb(243,32,47)" fg:x="12" fg:w="15"/><text x="0.5027%" y="367.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park (15 samples, 0.32%)</title><rect x="0.2527%" y="341" width="0.3159%" height="15" fill="rgb(247,202,23)" fg:x="12" fg:w="15"/><text x="0.5027%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_driver (9 samples, 0.19%)</title><rect x="0.3790%" y="325" width="0.1895%" height="15" fill="rgb(219,102,11)" fg:x="18" fg:w="9"/><text x="0.6290%" y="335.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (9 samples, 0.19%)</title><rect x="0.3790%" y="309" width="0.1895%" height="15" fill="rgb(243,110,44)" fg:x="18" fg:w="9"/><text x="0.6290%" y="319.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process (2 samples, 0.04%)</title><rect x="0.5264%" y="293" width="0.0421%" height="15" fill="rgb(222,74,54)" fg:x="25" fg:w="2"/><text x="0.7764%" y="303.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (1 samples, 0.02%)</title><rect x="0.5475%" y="277" width="0.0211%" height="15" fill="rgb(216,99,12)" fg:x="26" fg:w="1"/><text x="0.7975%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min (1 samples, 0.02%)</title><rect x="0.5475%" y="261" width="0.0211%" height="15" fill="rgb(226,22,26)" fg:x="26" fg:w="1"/><text x="0.7975%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (1 samples, 0.02%)</title><rect x="0.5475%" y="245" width="0.0211%" height="15" fill="rgb(217,163,10)" fg:x="26" fg:w="1"/><text x="0.7975%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (1 samples, 0.02%)</title><rect x="0.5475%" y="229" width="0.0211%" height="15" fill="rgb(213,25,53)" fg:x="26" fg:w="1"/><text x="0.7975%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="0.5475%" y="213" width="0.0211%" height="15" fill="rgb(252,105,26)" fg:x="26" fg:w="1"/><text x="0.7975%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.02%)</title><rect x="0.5475%" y="197" width="0.0211%" height="15" fill="rgb(220,39,43)" fg:x="26" fg:w="1"/><text x="0.7975%" y="207.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_fold::_{{closure}} (1 samples, 0.02%)</title><rect x="0.5475%" y="181" width="0.0211%" height="15" fill="rgb(229,68,48)" fg:x="26" fg:w="1"/><text x="0.7975%" y="191.50"></text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time::_{{closure}} (1 samples, 0.02%)</title><rect x="0.5475%" y="165" width="0.0211%" height="15" fill="rgb(252,8,32)" fg:x="26" fg:w="1"/><text x="0.7975%" y="175.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_sharded_time (1 samples, 0.02%)</title><rect x="0.5475%" y="149" width="0.0211%" height="15" fill="rgb(223,20,43)" fg:x="26" fg:w="1"/><text x="0.7975%" y="159.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll_at (1 samples, 0.02%)</title><rect x="0.5475%" y="133" width="0.0211%" height="15" fill="rgb(229,81,49)" fg:x="26" fg:w="1"/><text x="0.7975%" y="143.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.02%)</title><rect x="0.5475%" y="117" width="0.0211%" height="15" fill="rgb(236,28,36)" fg:x="26" fg:w="1"/><text x="0.7975%" y="127.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (1 samples, 0.02%)</title><rect x="0.5475%" y="101" width="0.0211%" height="15" fill="rgb(249,185,26)" fg:x="26" fg:w="1"/><text x="0.7975%" y="111.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_occupied_slot (1 samples, 0.02%)</title><rect x="0.5475%" y="85" width="0.0211%" height="15" fill="rgb(249,174,33)" fg:x="26" fg:w="1"/><text x="0.7975%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_right (1 samples, 0.02%)</title><rect x="0.5475%" y="69" width="0.0211%" height="15" fill="rgb(233,201,37)" fg:x="26" fg:w="1"/><text x="0.7975%" y="79.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (16 samples, 0.34%)</title><rect x="0.2527%" y="373" width="0.3369%" height="15" fill="rgb(221,78,26)" fg:x="12" fg:w="16"/><text x="0.5027%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (1 samples, 0.02%)</title><rect x="0.5685%" y="357" width="0.0211%" height="15" fill="rgb(250,127,30)" fg:x="27" fg:w="1"/><text x="0.8185%" y="367.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (1 samples, 0.02%)</title><rect x="0.5685%" y="341" width="0.0211%" height="15" fill="rgb(230,49,44)" fg:x="27" fg:w="1"/><text x="0.8185%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.02%)</title><rect x="0.5896%" y="341" width="0.0211%" height="15" fill="rgb(229,67,23)" fg:x="28" fg:w="1"/><text x="0.8396%" y="351.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="0.5896%" y="325" width="0.0211%" height="15" fill="rgb(249,83,47)" fg:x="28" fg:w="1"/><text x="0.8396%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park (18 samples, 0.38%)</title><rect x="0.2527%" y="389" width="0.3790%" height="15" fill="rgb(215,43,3)" fg:x="12" fg:w="18"/><text x="0.5027%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_to_parked (2 samples, 0.04%)</title><rect x="0.5896%" y="373" width="0.0421%" height="15" fill="rgb(238,154,13)" fg:x="28" fg:w="2"/><text x="0.8396%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::transition_worker_to_parked (2 samples, 0.04%)</title><rect x="0.5896%" y="357" width="0.0421%" height="15" fill="rgb(219,56,2)" fg:x="28" fg:w="2"/><text x="0.8396%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (1 samples, 0.02%)</title><rect x="0.6107%" y="341" width="0.0211%" height="15" fill="rgb(233,0,4)" fg:x="29" fg:w="1"/><text x="0.8607%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (1 samples, 0.02%)</title><rect x="0.6107%" y="325" width="0.0211%" height="15" fill="rgb(235,30,7)" fg:x="29" fg:w="1"/><text x="0.8607%" y="335.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="0.6107%" y="309" width="0.0211%" height="15" fill="rgb(250,79,13)" fg:x="29" fg:w="1"/><text x="0.8607%" y="319.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (1 samples, 0.02%)</title><rect x="0.6107%" y="293" width="0.0211%" height="15" fill="rgb(211,146,34)" fg:x="29" fg:w="1"/><text x="0.8607%" y="303.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (1 samples, 0.02%)</title><rect x="0.6107%" y="277" width="0.0211%" height="15" fill="rgb(228,22,38)" fg:x="29" fg:w="1"/><text x="0.8607%" y="287.50"></text></g><g><title>tokio::runtime::coop::budget (1 samples, 0.02%)</title><rect x="0.6317%" y="373" width="0.0211%" height="15" fill="rgb(235,168,5)" fg:x="30" fg:w="1"/><text x="0.8817%" y="383.50"></text></g><g><title>tokio::runtime::coop::with_budget (1 samples, 0.02%)</title><rect x="0.6317%" y="357" width="0.0211%" height="15" fill="rgb(221,155,16)" fg:x="30" fg:w="1"/><text x="0.8817%" y="367.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::_{{closure}} (1 samples, 0.02%)</title><rect x="0.6317%" y="341" width="0.0211%" height="15" fill="rgb(215,215,53)" fg:x="30" fg:w="1"/><text x="0.8817%" y="351.50"></text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (1 samples, 0.02%)</title><rect x="0.6317%" y="325" width="0.0211%" height="15" fill="rgb(223,4,10)" fg:x="30" fg:w="1"/><text x="0.8817%" y="335.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (1 samples, 0.02%)</title><rect x="0.6317%" y="309" width="0.0211%" height="15" fill="rgb(234,103,6)" fg:x="30" fg:w="1"/><text x="0.8817%" y="319.50"></text></g><g><title>tokio::runtime::task::raw::poll (1 samples, 0.02%)</title><rect x="0.6317%" y="293" width="0.0211%" height="15" fill="rgb(227,97,0)" fg:x="30" fg:w="1"/><text x="0.8817%" y="303.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (2 samples, 0.04%)</title><rect x="0.6528%" y="341" width="0.0421%" height="15" fill="rgb(234,150,53)" fg:x="31" fg:w="2"/><text x="0.9028%" y="351.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (2 samples, 0.04%)</title><rect x="0.6528%" y="325" width="0.0421%" height="15" fill="rgb(228,201,54)" fg:x="31" fg:w="2"/><text x="0.9028%" y="335.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (2 samples, 0.04%)</title><rect x="0.6528%" y="309" width="0.0421%" height="15" fill="rgb(222,22,37)" fg:x="31" fg:w="2"/><text x="0.9028%" y="319.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (1 samples, 0.02%)</title><rect x="0.6738%" y="293" width="0.0211%" height="15" fill="rgb(237,53,32)" fg:x="32" fg:w="1"/><text x="0.9238%" y="303.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (1 samples, 0.02%)</title><rect x="0.6738%" y="277" width="0.0211%" height="15" fill="rgb(233,25,53)" fg:x="32" fg:w="1"/><text x="0.9238%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (4 samples, 0.08%)</title><rect x="0.6317%" y="389" width="0.0842%" height="15" fill="rgb(210,40,34)" fg:x="30" fg:w="4"/><text x="0.8817%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_from_searching (3 samples, 0.06%)</title><rect x="0.6528%" y="373" width="0.0632%" height="15" fill="rgb(241,220,44)" fg:x="31" fg:w="3"/><text x="0.9028%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::transition_worker_from_searching (3 samples, 0.06%)</title><rect x="0.6528%" y="357" width="0.0632%" height="15" fill="rgb(235,28,35)" fg:x="31" fg:w="3"/><text x="0.9028%" y="367.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked_local (1 samples, 0.02%)</title><rect x="0.6949%" y="341" width="0.0211%" height="15" fill="rgb(210,56,17)" fg:x="33" fg:w="1"/><text x="0.9449%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (1 samples, 0.02%)</title><rect x="0.6949%" y="325" width="0.0211%" height="15" fill="rgb(224,130,29)" fg:x="33" fg:w="1"/><text x="0.9449%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_task (1 samples, 0.02%)</title><rect x="0.7159%" y="389" width="0.0211%" height="15" fill="rgb(235,212,8)" fg:x="34" fg:w="1"/><text x="0.9659%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::tune_global_queue_interval (1 samples, 0.02%)</title><rect x="0.7159%" y="373" width="0.0211%" height="15" fill="rgb(223,33,50)" fg:x="34" fg:w="1"/><text x="0.9659%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::tuned_global_queue_interval (1 samples, 0.02%)</title><rect x="0.7159%" y="357" width="0.0211%" height="15" fill="rgb(219,149,13)" fg:x="34" fg:w="1"/><text x="0.9659%" y="367.50"></text></g><g><title>[libc.so.6] (34 samples, 0.72%)</title><rect x="0.0842%" y="1077" width="0.7159%" height="15" fill="rgb(250,156,29)" fg:x="4" fg:w="34"/><text x="0.3342%" y="1087.50"></text></g><g><title>[libc.so.6] (34 samples, 0.72%)</title><rect x="0.0842%" y="1061" width="0.7159%" height="15" fill="rgb(216,193,19)" fg:x="4" fg:w="34"/><text x="0.3342%" y="1071.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (34 samples, 0.72%)</title><rect x="0.0842%" y="1045" width="0.7159%" height="15" fill="rgb(216,135,14)" fg:x="4" fg:w="34"/><text x="0.3342%" y="1055.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (34 samples, 0.72%)</title><rect x="0.0842%" y="1029" width="0.7159%" height="15" fill="rgb(241,47,5)" fg:x="4" fg:w="34"/><text x="0.3342%" y="1039.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (34 samples, 0.72%)</title><rect x="0.0842%" y="1013" width="0.7159%" height="15" fill="rgb(233,42,35)" fg:x="4" fg:w="34"/><text x="0.3342%" y="1023.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (34 samples, 0.72%)</title><rect x="0.0842%" y="997" width="0.7159%" height="15" fill="rgb(231,13,6)" fg:x="4" fg:w="34"/><text x="0.3342%" y="1007.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (34 samples, 0.72%)</title><rect x="0.0842%" y="981" width="0.7159%" height="15" fill="rgb(207,181,40)" fg:x="4" fg:w="34"/><text x="0.3342%" y="991.50"></text></g><g><title>std::panic::catch_unwind (34 samples, 0.72%)</title><rect x="0.0842%" y="965" width="0.7159%" height="15" fill="rgb(254,173,49)" fg:x="4" fg:w="34"/><text x="0.3342%" y="975.50"></text></g><g><title>std::panicking::try (34 samples, 0.72%)</title><rect x="0.0842%" y="949" width="0.7159%" height="15" fill="rgb(221,1,38)" fg:x="4" fg:w="34"/><text x="0.3342%" y="959.50"></text></g><g><title>std::panicking::try::do_call (34 samples, 0.72%)</title><rect x="0.0842%" y="933" width="0.7159%" height="15" fill="rgb(206,124,46)" fg:x="4" fg:w="34"/><text x="0.3342%" y="943.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (34 samples, 0.72%)</title><rect x="0.0842%" y="917" width="0.7159%" height="15" fill="rgb(249,21,11)" fg:x="4" fg:w="34"/><text x="0.3342%" y="927.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (34 samples, 0.72%)</title><rect x="0.0842%" y="901" width="0.7159%" height="15" fill="rgb(222,201,40)" fg:x="4" fg:w="34"/><text x="0.3342%" y="911.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (34 samples, 0.72%)</title><rect x="0.0842%" y="885" width="0.7159%" height="15" fill="rgb(235,61,29)" fg:x="4" fg:w="34"/><text x="0.3342%" y="895.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::_{{closure}} (34 samples, 0.72%)</title><rect x="0.0842%" y="869" width="0.7159%" height="15" fill="rgb(219,207,3)" fg:x="4" fg:w="34"/><text x="0.3342%" y="879.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (34 samples, 0.72%)</title><rect x="0.0842%" y="853" width="0.7159%" height="15" fill="rgb(222,56,46)" fg:x="4" fg:w="34"/><text x="0.3342%" y="863.50"></text></g><g><title>tokio::runtime::blocking::pool::Task::run (34 samples, 0.72%)</title><rect x="0.0842%" y="837" width="0.7159%" height="15" fill="rgb(239,76,54)" fg:x="4" fg:w="34"/><text x="0.3342%" y="847.50"></text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (34 samples, 0.72%)</title><rect x="0.0842%" y="821" width="0.7159%" height="15" fill="rgb(231,124,27)" fg:x="4" fg:w="34"/><text x="0.3342%" y="831.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (34 samples, 0.72%)</title><rect x="0.0842%" y="805" width="0.7159%" height="15" fill="rgb(249,195,6)" fg:x="4" fg:w="34"/><text x="0.3342%" y="815.50"></text></g><g><title>tokio::runtime::task::raw::poll (34 samples, 0.72%)</title><rect x="0.0842%" y="789" width="0.7159%" height="15" fill="rgb(237,174,47)" fg:x="4" fg:w="34"/><text x="0.3342%" y="799.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (34 samples, 0.72%)</title><rect x="0.0842%" y="773" width="0.7159%" height="15" fill="rgb(206,201,31)" fg:x="4" fg:w="34"/><text x="0.3342%" y="783.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (34 samples, 0.72%)</title><rect x="0.0842%" y="757" width="0.7159%" height="15" fill="rgb(231,57,52)" fg:x="4" fg:w="34"/><text x="0.3342%" y="767.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (34 samples, 0.72%)</title><rect x="0.0842%" y="741" width="0.7159%" height="15" fill="rgb(248,177,22)" fg:x="4" fg:w="34"/><text x="0.3342%" y="751.50"></text></g><g><title>std::panic::catch_unwind (34 samples, 0.72%)</title><rect x="0.0842%" y="725" width="0.7159%" height="15" fill="rgb(215,211,37)" fg:x="4" fg:w="34"/><text x="0.3342%" y="735.50"></text></g><g><title>std::panicking::try (34 samples, 0.72%)</title><rect x="0.0842%" y="709" width="0.7159%" height="15" fill="rgb(241,128,51)" fg:x="4" fg:w="34"/><text x="0.3342%" y="719.50"></text></g><g><title>std::panicking::try::do_call (34 samples, 0.72%)</title><rect x="0.0842%" y="693" width="0.7159%" height="15" fill="rgb(227,165,31)" fg:x="4" fg:w="34"/><text x="0.3342%" y="703.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (34 samples, 0.72%)</title><rect x="0.0842%" y="677" width="0.7159%" height="15" fill="rgb(228,167,24)" fg:x="4" fg:w="34"/><text x="0.3342%" y="687.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (34 samples, 0.72%)</title><rect x="0.0842%" y="661" width="0.7159%" height="15" fill="rgb(228,143,12)" fg:x="4" fg:w="34"/><text x="0.3342%" y="671.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (34 samples, 0.72%)</title><rect x="0.0842%" y="645" width="0.7159%" height="15" fill="rgb(249,149,8)" fg:x="4" fg:w="34"/><text x="0.3342%" y="655.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (34 samples, 0.72%)</title><rect x="0.0842%" y="629" width="0.7159%" height="15" fill="rgb(243,35,44)" fg:x="4" fg:w="34"/><text x="0.3342%" y="639.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (34 samples, 0.72%)</title><rect x="0.0842%" y="613" width="0.7159%" height="15" fill="rgb(246,89,9)" fg:x="4" fg:w="34"/><text x="0.3342%" y="623.50"></text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (34 samples, 0.72%)</title><rect x="0.0842%" y="597" width="0.7159%" height="15" fill="rgb(233,213,13)" fg:x="4" fg:w="34"/><text x="0.3342%" y="607.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (34 samples, 0.72%)</title><rect x="0.0842%" y="581" width="0.7159%" height="15" fill="rgb(233,141,41)" fg:x="4" fg:w="34"/><text x="0.3342%" y="591.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::_{{closure}} (34 samples, 0.72%)</title><rect x="0.0842%" y="565" width="0.7159%" height="15" fill="rgb(239,167,4)" fg:x="4" fg:w="34"/><text x="0.3342%" y="575.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (34 samples, 0.72%)</title><rect x="0.0842%" y="549" width="0.7159%" height="15" fill="rgb(209,217,16)" fg:x="4" fg:w="34"/><text x="0.3342%" y="559.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (34 samples, 0.72%)</title><rect x="0.0842%" y="533" width="0.7159%" height="15" fill="rgb(219,88,35)" fg:x="4" fg:w="34"/><text x="0.3342%" y="543.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}} (34 samples, 0.72%)</title><rect x="0.0842%" y="517" width="0.7159%" height="15" fill="rgb(220,193,23)" fg:x="4" fg:w="34"/><text x="0.3342%" y="527.50"></text></g><g><title>tokio::runtime::context::set_scheduler (34 samples, 0.72%)</title><rect x="0.0842%" y="501" width="0.7159%" height="15" fill="rgb(230,90,52)" fg:x="4" fg:w="34"/><text x="0.3342%" y="511.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (34 samples, 0.72%)</title><rect x="0.0842%" y="485" width="0.7159%" height="15" fill="rgb(252,106,19)" fg:x="4" fg:w="34"/><text x="0.3342%" y="495.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (34 samples, 0.72%)</title><rect x="0.0842%" y="469" width="0.7159%" height="15" fill="rgb(206,74,20)" fg:x="4" fg:w="34"/><text x="0.3342%" y="479.50"></text></g><g><title>tokio::runtime::context::set_scheduler::_{{closure}} (34 samples, 0.72%)</title><rect x="0.0842%" y="453" width="0.7159%" height="15" fill="rgb(230,138,44)" fg:x="4" fg:w="34"/><text x="0.3342%" y="463.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (34 samples, 0.72%)</title><rect x="0.0842%" y="437" width="0.7159%" height="15" fill="rgb(235,182,43)" fg:x="4" fg:w="34"/><text x="0.3342%" y="447.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}::_{{closure}} (34 samples, 0.72%)</title><rect x="0.0842%" y="421" width="0.7159%" height="15" fill="rgb(242,16,51)" fg:x="4" fg:w="34"/><text x="0.3342%" y="431.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (34 samples, 0.72%)</title><rect x="0.0842%" y="405" width="0.7159%" height="15" fill="rgb(248,9,4)" fg:x="4" fg:w="34"/><text x="0.3342%" y="415.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::steal_work (3 samples, 0.06%)</title><rect x="0.7370%" y="389" width="0.0632%" height="15" fill="rgb(210,31,22)" fg:x="35" fg:w="3"/><text x="0.9870%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (2 samples, 0.04%)</title><rect x="0.7581%" y="373" width="0.0421%" height="15" fill="rgb(239,54,39)" fg:x="36" fg:w="2"/><text x="1.0081%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into2 (1 samples, 0.02%)</title><rect x="0.7791%" y="357" width="0.0211%" height="15" fill="rgb(230,99,41)" fg:x="37" fg:w="1"/><text x="1.0291%" y="367.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.02%)</title><rect x="0.8002%" y="1077" width="0.0211%" height="15" fill="rgb(253,106,12)" fg:x="38" fg:w="1"/><text x="1.0502%" y="1087.50"></text></g><g><title>_mi_heap_delayed_free_partial (1 samples, 0.02%)</title><rect x="0.8002%" y="1061" width="0.0211%" height="15" fill="rgb(213,46,41)" fg:x="38" fg:w="1"/><text x="1.0502%" y="1071.50"></text></g><g><title>[libc.so.6] (12 samples, 0.25%)</title><rect x="0.8423%" y="1061" width="0.2527%" height="15" fill="rgb(215,133,35)" fg:x="40" fg:w="12"/><text x="1.0923%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::coop::RestoreOnPending&gt; (1 samples, 0.02%)</title><rect x="1.2424%" y="917" width="0.0211%" height="15" fill="rgb(213,28,5)" fg:x="59" fg:w="1"/><text x="1.4924%" y="927.50"></text></g><g><title>&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="1.2424%" y="901" width="0.0211%" height="15" fill="rgb(215,77,49)" fg:x="59" fg:w="1"/><text x="1.4924%" y="911.50"></text></g><g><title>tokio::runtime::context::budget (1 samples, 0.02%)</title><rect x="1.2424%" y="885" width="0.0211%" height="15" fill="rgb(248,100,22)" fg:x="59" fg:w="1"/><text x="1.4924%" y="895.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.02%)</title><rect x="1.2424%" y="869" width="0.0211%" height="15" fill="rgb(208,67,9)" fg:x="59" fg:w="1"/><text x="1.4924%" y="879.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.02%)</title><rect x="1.2424%" y="853" width="0.0211%" height="15" fill="rgb(219,133,21)" fg:x="59" fg:w="1"/><text x="1.4924%" y="863.50"></text></g><g><title>tokio::runtime::context::CONTEXT::_{{constant}}::_{{closure}} (1 samples, 0.02%)</title><rect x="1.2424%" y="837" width="0.0211%" height="15" fill="rgb(246,46,29)" fg:x="59" fg:w="1"/><text x="1.4924%" y="847.50"></text></g><g><title>std::sys::thread_local::native::eager::Storage&lt;T&gt;::get (1 samples, 0.02%)</title><rect x="1.2424%" y="821" width="0.0211%" height="15" fill="rgb(246,185,52)" fg:x="59" fg:w="1"/><text x="1.4924%" y="831.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.02%)</title><rect x="1.2424%" y="805" width="0.0211%" height="15" fill="rgb(252,136,11)" fg:x="59" fg:w="1"/><text x="1.4924%" y="815.50"></text></g><g><title>&lt;futures_util::future::poll_immediate::PollImmediate&lt;F&gt; as core::future::future::Future&gt;::poll (3 samples, 0.06%)</title><rect x="1.2424%" y="1045" width="0.0632%" height="15" fill="rgb(219,138,53)" fg:x="59" fg:w="3"/><text x="1.4924%" y="1055.50"></text></g><g><title>&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (3 samples, 0.06%)</title><rect x="1.2424%" y="1029" width="0.0632%" height="15" fill="rgb(211,51,23)" fg:x="59" fg:w="3"/><text x="1.4924%" y="1039.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (3 samples, 0.06%)</title><rect x="1.2424%" y="1013" width="0.0632%" height="15" fill="rgb(247,221,28)" fg:x="59" fg:w="3"/><text x="1.4924%" y="1023.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (3 samples, 0.06%)</title><rect x="1.2424%" y="997" width="0.0632%" height="15" fill="rgb(251,222,45)" fg:x="59" fg:w="3"/><text x="1.4924%" y="1007.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (3 samples, 0.06%)</title><rect x="1.2424%" y="981" width="0.0632%" height="15" fill="rgb(217,162,53)" fg:x="59" fg:w="3"/><text x="1.4924%" y="991.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (3 samples, 0.06%)</title><rect x="1.2424%" y="965" width="0.0632%" height="15" fill="rgb(229,93,14)" fg:x="59" fg:w="3"/><text x="1.4924%" y="975.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_read_ready (3 samples, 0.06%)</title><rect x="1.2424%" y="949" width="0.0632%" height="15" fill="rgb(209,67,49)" fg:x="59" fg:w="3"/><text x="1.4924%" y="959.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (3 samples, 0.06%)</title><rect x="1.2424%" y="933" width="0.0632%" height="15" fill="rgb(213,87,29)" fg:x="59" fg:w="3"/><text x="1.4924%" y="943.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (2 samples, 0.04%)</title><rect x="1.2634%" y="917" width="0.0421%" height="15" fill="rgb(205,151,52)" fg:x="60" fg:w="2"/><text x="1.5134%" y="927.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (2 samples, 0.04%)</title><rect x="1.2634%" y="901" width="0.0421%" height="15" fill="rgb(253,215,39)" fg:x="60" fg:w="2"/><text x="1.5134%" y="911.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (2 samples, 0.04%)</title><rect x="1.2634%" y="885" width="0.0421%" height="15" fill="rgb(221,220,41)" fg:x="60" fg:w="2"/><text x="1.5134%" y="895.50"></text></g><g><title>tokio::runtime::task::core::Header::get_tracing_id (2 samples, 0.04%)</title><rect x="1.2634%" y="869" width="0.0421%" height="15" fill="rgb(218,133,21)" fg:x="60" fg:w="2"/><text x="1.5134%" y="879.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (2 samples, 0.04%)</title><rect x="1.2634%" y="853" width="0.0421%" height="15" fill="rgb(221,193,43)" fg:x="60" fg:w="2"/><text x="1.5134%" y="863.50"></text></g><g><title>&lt;tracing_core::metadata::Level as core::cmp::PartialOrd&lt;tracing_core::metadata::LevelFilter&gt;&gt;::le (1 samples, 0.02%)</title><rect x="1.3055%" y="1045" width="0.0211%" height="15" fill="rgb(240,128,52)" fg:x="62" fg:w="1"/><text x="1.5555%" y="1055.50"></text></g><g><title>[libc.so.6] (110 samples, 2.32%)</title><rect x="1.3266%" y="1045" width="2.3163%" height="15" fill="rgb(253,114,12)" fg:x="63" fg:w="110"/><text x="1.5766%" y="1055.50">[..</text></g><g><title>[libc.so.6] (80 samples, 1.68%)</title><rect x="3.9166%" y="1029" width="1.6846%" height="15" fill="rgb(215,223,47)" fg:x="186" fg:w="80"/><text x="4.1666%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::Span&gt; (1 samples, 0.02%)</title><rect x="5.6012%" y="1029" width="0.0211%" height="15" fill="rgb(248,225,23)" fg:x="266" fg:w="1"/><text x="5.8512%" y="1039.50"></text></g><g><title>&lt;tracing::span::Span as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="5.6012%" y="1013" width="0.0211%" height="15" fill="rgb(250,108,0)" fg:x="266" fg:w="1"/><text x="5.8512%" y="1023.50"></text></g><g><title>&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (3 samples, 0.06%)</title><rect x="8.3175%" y="997" width="0.0632%" height="15" fill="rgb(228,208,7)" fg:x="395" fg:w="3"/><text x="8.5675%" y="1007.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (3 samples, 0.06%)</title><rect x="8.3175%" y="981" width="0.0632%" height="15" fill="rgb(244,45,10)" fg:x="395" fg:w="3"/><text x="8.5675%" y="991.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (3 samples, 0.06%)</title><rect x="8.3175%" y="965" width="0.0632%" height="15" fill="rgb(207,125,25)" fg:x="395" fg:w="3"/><text x="8.5675%" y="975.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (3 samples, 0.06%)</title><rect x="8.3175%" y="949" width="0.0632%" height="15" fill="rgb(210,195,18)" fg:x="395" fg:w="3"/><text x="8.5675%" y="959.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (3 samples, 0.06%)</title><rect x="8.3175%" y="933" width="0.0632%" height="15" fill="rgb(249,80,12)" fg:x="395" fg:w="3"/><text x="8.5675%" y="943.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (3 samples, 0.06%)</title><rect x="8.3175%" y="917" width="0.0632%" height="15" fill="rgb(221,65,9)" fg:x="395" fg:w="3"/><text x="8.5675%" y="927.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (3 samples, 0.06%)</title><rect x="8.3175%" y="901" width="0.0632%" height="15" fill="rgb(235,49,36)" fg:x="395" fg:w="3"/><text x="8.5675%" y="911.50"></text></g><g><title>mio::sys::unix::selector::stateless_io_source::IoSourceState::do_io (3 samples, 0.06%)</title><rect x="8.3175%" y="885" width="0.0632%" height="15" fill="rgb(225,32,20)" fg:x="395" fg:w="3"/><text x="8.5675%" y="895.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::_{{closure}} (3 samples, 0.06%)</title><rect x="8.3175%" y="869" width="0.0632%" height="15" fill="rgb(215,141,46)" fg:x="395" fg:w="3"/><text x="8.5675%" y="879.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (3 samples, 0.06%)</title><rect x="8.3175%" y="853" width="0.0632%" height="15" fill="rgb(250,160,47)" fg:x="395" fg:w="3"/><text x="8.5675%" y="863.50"></text></g><g><title>std::sys_common::net::TcpStream::read (3 samples, 0.06%)</title><rect x="8.3175%" y="837" width="0.0632%" height="15" fill="rgb(216,222,40)" fg:x="395" fg:w="3"/><text x="8.5675%" y="847.50"></text></g><g><title>std::sys::pal::unix::net::Socket::read (3 samples, 0.06%)</title><rect x="8.3175%" y="821" width="0.0632%" height="15" fill="rgb(234,217,39)" fg:x="395" fg:w="3"/><text x="8.5675%" y="831.50"></text></g><g><title>std::sys::pal::unix::net::Socket::recv_with_flags (3 samples, 0.06%)</title><rect x="8.3175%" y="805" width="0.0632%" height="15" fill="rgb(207,178,40)" fg:x="395" fg:w="3"/><text x="8.5675%" y="815.50"></text></g><g><title>recv (3 samples, 0.06%)</title><rect x="8.3175%" y="789" width="0.0632%" height="15" fill="rgb(221,136,13)" fg:x="395" fg:w="3"/><text x="8.5675%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::{{closure}}::{{closure}}::{{closure}}::_decode_async&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}&gt; (3 samples, 0.06%)</title><rect x="8.3807%" y="997" width="0.0632%" height="15" fill="rgb(249,199,10)" fg:x="398" fg:w="3"/><text x="8.6307%" y="1007.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::remaining (2 samples, 0.04%)</title><rect x="14.2135%" y="933" width="0.0421%" height="15" fill="rgb(249,222,13)" fg:x="675" fg:w="2"/><text x="14.4635%" y="943.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::remaining (2 samples, 0.04%)</title><rect x="14.2135%" y="917" width="0.0421%" height="15" fill="rgb(244,185,38)" fg:x="675" fg:w="2"/><text x="14.4635%" y="927.50"></text></g><g><title>bytes::bytes_mut::BytesMut::len (2 samples, 0.04%)</title><rect x="14.2135%" y="901" width="0.0421%" height="15" fill="rgb(236,202,9)" fg:x="675" fg:w="2"/><text x="14.4635%" y="911.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (2 samples, 0.04%)</title><rect x="14.2556%" y="933" width="0.0421%" height="15" fill="rgb(250,229,37)" fg:x="677" fg:w="2"/><text x="14.5056%" y="943.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (1 samples, 0.02%)</title><rect x="14.2767%" y="917" width="0.0211%" height="15" fill="rgb(206,174,23)" fg:x="678" fg:w="1"/><text x="14.5267%" y="927.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (11 samples, 0.23%)</title><rect x="14.1503%" y="949" width="0.2316%" height="15" fill="rgb(211,33,43)" fg:x="672" fg:w="11"/><text x="14.4003%" y="959.50"></text></g><g><title>core::fmt::Arguments::new_v1 (4 samples, 0.08%)</title><rect x="14.2977%" y="933" width="0.0842%" height="15" fill="rgb(245,58,50)" fg:x="679" fg:w="4"/><text x="14.5477%" y="943.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.02%)</title><rect x="14.3820%" y="949" width="0.0211%" height="15" fill="rgb(244,68,36)" fg:x="683" fg:w="1"/><text x="14.6320%" y="959.50"></text></g><g><title>[libc.so.6] (53 samples, 1.12%)</title><rect x="14.4030%" y="949" width="1.1160%" height="15" fill="rgb(232,229,15)" fg:x="684" fg:w="53"/><text x="14.6530%" y="959.50"></text></g><g><title>bytes::bytes::Bytes::with_vtable (8 samples, 0.17%)</title><rect x="15.6033%" y="933" width="0.1685%" height="15" fill="rgb(254,30,23)" fg:x="741" fg:w="8"/><text x="15.8533%" y="943.50"></text></g><g><title>bytes::bytes_mut::BytesMut::freeze (18 samples, 0.38%)</title><rect x="15.5191%" y="949" width="0.3790%" height="15" fill="rgb(235,160,14)" fg:x="737" fg:w="18"/><text x="15.7691%" y="959.50"></text></g><g><title>bytes::bytes_mut::BytesMut::kind (6 samples, 0.13%)</title><rect x="15.7717%" y="933" width="0.1263%" height="15" fill="rgb(212,155,44)" fg:x="749" fg:w="6"/><text x="16.0217%" y="943.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (3 samples, 0.06%)</title><rect x="16.0244%" y="933" width="0.0632%" height="15" fill="rgb(226,2,50)" fg:x="761" fg:w="3"/><text x="16.2744%" y="943.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (3 samples, 0.06%)</title><rect x="16.0244%" y="917" width="0.0632%" height="15" fill="rgb(234,177,6)" fg:x="761" fg:w="3"/><text x="16.2744%" y="927.50"></text></g><g><title>bytes::bytes_mut::BytesMut::len (1 samples, 0.02%)</title><rect x="16.0876%" y="933" width="0.0211%" height="15" fill="rgb(217,24,9)" fg:x="764" fg:w="1"/><text x="16.3376%" y="943.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="16.1087%" y="901" width="0.0211%" height="15" fill="rgb(220,13,46)" fg:x="765" fg:w="1"/><text x="16.3587%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.02%)</title><rect x="16.1087%" y="885" width="0.0211%" height="15" fill="rgb(239,221,27)" fg:x="765" fg:w="1"/><text x="16.3587%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="16.1087%" y="869" width="0.0211%" height="15" fill="rgb(222,198,25)" fg:x="765" fg:w="1"/><text x="16.3587%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="16.1087%" y="853" width="0.0211%" height="15" fill="rgb(211,99,13)" fg:x="765" fg:w="1"/><text x="16.3587%" y="863.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="16.1087%" y="837" width="0.0211%" height="15" fill="rgb(232,111,31)" fg:x="765" fg:w="1"/><text x="16.3587%" y="847.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="16.1087%" y="821" width="0.0211%" height="15" fill="rgb(245,82,37)" fg:x="765" fg:w="1"/><text x="16.3587%" y="831.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.02%)</title><rect x="16.1087%" y="805" width="0.0211%" height="15" fill="rgb(227,149,46)" fg:x="765" fg:w="1"/><text x="16.3587%" y="815.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.02%)</title><rect x="16.1087%" y="789" width="0.0211%" height="15" fill="rgb(218,36,50)" fg:x="765" fg:w="1"/><text x="16.3587%" y="799.50"></text></g><g><title>_mi_page_malloc_zero (1 samples, 0.02%)</title><rect x="16.1087%" y="773" width="0.0211%" height="15" fill="rgb(226,80,48)" fg:x="765" fg:w="1"/><text x="16.3587%" y="783.50"></text></g><g><title>bytes::bytes_mut::BytesMut::promote_to_shared (2 samples, 0.04%)</title><rect x="16.1087%" y="917" width="0.0421%" height="15" fill="rgb(238,224,15)" fg:x="765" fg:w="2"/><text x="16.3587%" y="927.50"></text></g><g><title>bytes::bytes_mut::rebuild_vec (1 samples, 0.02%)</title><rect x="16.1297%" y="901" width="0.0211%" height="15" fill="rgb(241,136,10)" fg:x="766" fg:w="1"/><text x="16.3797%" y="911.50"></text></g><g><title>bytes::bytes_mut::increment_shared (44 samples, 0.93%)</title><rect x="16.1508%" y="917" width="0.9265%" height="15" fill="rgb(208,32,45)" fg:x="767" fg:w="44"/><text x="16.4008%" y="927.50"></text></g><g><title>bytes::bytes_mut::BytesMut::shallow_clone (48 samples, 1.01%)</title><rect x="16.1087%" y="933" width="1.0107%" height="15" fill="rgb(207,135,9)" fg:x="765" fg:w="48"/><text x="16.3587%" y="943.50"></text></g><g><title>core::ptr::read (2 samples, 0.04%)</title><rect x="17.0773%" y="917" width="0.0421%" height="15" fill="rgb(206,86,44)" fg:x="811" fg:w="2"/><text x="17.3273%" y="927.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (62 samples, 1.31%)</title><rect x="15.8981%" y="949" width="1.3055%" height="15" fill="rgb(245,177,15)" fg:x="755" fg:w="62"/><text x="16.1481%" y="959.50"></text></g><g><title>core::fmt::Arguments::new_v1 (4 samples, 0.08%)</title><rect x="17.1194%" y="933" width="0.0842%" height="15" fill="rgb(206,64,50)" fg:x="813" fg:w="4"/><text x="17.3694%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::BytesMut&gt; (50 samples, 1.05%)</title><rect x="17.2036%" y="949" width="1.0529%" height="15" fill="rgb(234,36,40)" fg:x="817" fg:w="50"/><text x="17.4536%" y="959.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (47 samples, 0.99%)</title><rect x="17.2668%" y="933" width="0.9897%" height="15" fill="rgb(213,64,8)" fg:x="820" fg:w="47"/><text x="17.5168%" y="943.50"></text></g><g><title>bytes::bytes_mut::release_shared (41 samples, 0.86%)</title><rect x="17.3931%" y="917" width="0.8633%" height="15" fill="rgb(210,75,36)" fg:x="826" fg:w="41"/><text x="17.6431%" y="927.50"></text></g><g><title>&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="19.4778%" y="933" width="0.0211%" height="15" fill="rgb(229,88,21)" fg:x="925" fg:w="1"/><text x="19.7278%" y="943.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::chunk_mut (1 samples, 0.02%)</title><rect x="19.4778%" y="917" width="0.0211%" height="15" fill="rgb(252,204,47)" fg:x="925" fg:w="1"/><text x="19.7278%" y="927.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::chunk_mut (1 samples, 0.02%)</title><rect x="19.4778%" y="901" width="0.0211%" height="15" fill="rgb(208,77,27)" fg:x="925" fg:w="1"/><text x="19.7278%" y="911.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (1 samples, 0.02%)</title><rect x="19.4778%" y="885" width="0.0211%" height="15" fill="rgb(221,76,26)" fg:x="925" fg:w="1"/><text x="19.7278%" y="895.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (1 samples, 0.02%)</title><rect x="19.4778%" y="869" width="0.0211%" height="15" fill="rgb(225,139,18)" fg:x="925" fg:w="1"/><text x="19.7278%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::error::RutinError&gt; (1 samples, 0.02%)</title><rect x="19.4988%" y="933" width="0.0211%" height="15" fill="rgb(230,137,11)" fg:x="926" fg:w="1"/><text x="19.7488%" y="943.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (2 samples, 0.04%)</title><rect x="20.7412%" y="917" width="0.0421%" height="15" fill="rgb(212,28,1)" fg:x="985" fg:w="2"/><text x="20.9912%" y="927.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (4 samples, 0.08%)</title><rect x="20.8676%" y="885" width="0.0842%" height="15" fill="rgb(248,164,17)" fg:x="991" fg:w="4"/><text x="21.1176%" y="895.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (6 samples, 0.13%)</title><rect x="20.8676%" y="901" width="0.1263%" height="15" fill="rgb(222,171,42)" fg:x="991" fg:w="6"/><text x="21.1176%" y="911.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.04%)</title><rect x="20.9518%" y="885" width="0.0421%" height="15" fill="rgb(243,84,45)" fg:x="995" fg:w="2"/><text x="21.2018%" y="895.50"></text></g><g><title>bytes::bytes_mut::BytesMut::len (1 samples, 0.02%)</title><rect x="20.9939%" y="901" width="0.0211%" height="15" fill="rgb(252,49,23)" fg:x="997" fg:w="1"/><text x="21.2439%" y="911.50"></text></g><g><title>bytes::bytes_mut::BytesMut::promote_to_shared (1 samples, 0.02%)</title><rect x="21.0150%" y="885" width="0.0211%" height="15" fill="rgb(215,19,7)" fg:x="998" fg:w="1"/><text x="21.2650%" y="895.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="21.0150%" y="869" width="0.0211%" height="15" fill="rgb(238,81,41)" fg:x="998" fg:w="1"/><text x="21.2650%" y="879.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.02%)</title><rect x="21.0150%" y="853" width="0.0211%" height="15" fill="rgb(210,199,37)" fg:x="998" fg:w="1"/><text x="21.2650%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="21.0150%" y="837" width="0.0211%" height="15" fill="rgb(244,192,49)" fg:x="998" fg:w="1"/><text x="21.2650%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="21.0150%" y="821" width="0.0211%" height="15" fill="rgb(226,211,11)" fg:x="998" fg:w="1"/><text x="21.2650%" y="831.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="21.0150%" y="805" width="0.0211%" height="15" fill="rgb(236,162,54)" fg:x="998" fg:w="1"/><text x="21.2650%" y="815.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="21.0150%" y="789" width="0.0211%" height="15" fill="rgb(220,229,9)" fg:x="998" fg:w="1"/><text x="21.2650%" y="799.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.02%)</title><rect x="21.0150%" y="773" width="0.0211%" height="15" fill="rgb(250,87,22)" fg:x="998" fg:w="1"/><text x="21.2650%" y="783.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.02%)</title><rect x="21.0150%" y="757" width="0.0211%" height="15" fill="rgb(239,43,17)" fg:x="998" fg:w="1"/><text x="21.2650%" y="767.50"></text></g><g><title>_mi_page_malloc_zero (1 samples, 0.02%)</title><rect x="21.0150%" y="741" width="0.0211%" height="15" fill="rgb(231,177,25)" fg:x="998" fg:w="1"/><text x="21.2650%" y="751.50"></text></g><g><title>bytes::bytes_mut::increment_shared (41 samples, 0.86%)</title><rect x="21.0360%" y="885" width="0.8633%" height="15" fill="rgb(219,179,1)" fg:x="999" fg:w="41"/><text x="21.2860%" y="895.50"></text></g><g><title>bytes::bytes_mut::BytesMut::shallow_clone (44 samples, 0.93%)</title><rect x="21.0150%" y="901" width="0.9265%" height="15" fill="rgb(238,219,53)" fg:x="998" fg:w="44"/><text x="21.2650%" y="911.50"></text></g><g><title>core::ptr::read (2 samples, 0.04%)</title><rect x="21.8993%" y="885" width="0.0421%" height="15" fill="rgb(232,167,36)" fg:x="1040" fg:w="2"/><text x="22.1493%" y="895.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (58 samples, 1.22%)</title><rect x="20.7833%" y="917" width="1.2213%" height="15" fill="rgb(244,19,51)" fg:x="987" fg:w="58"/><text x="21.0333%" y="927.50"></text></g><g><title>core::fmt::Arguments::new_v1 (3 samples, 0.06%)</title><rect x="21.9415%" y="901" width="0.0632%" height="15" fill="rgb(224,6,22)" fg:x="1042" fg:w="3"/><text x="22.1915%" y="911.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.02%)</title><rect x="22.0046%" y="885" width="0.0211%" height="15" fill="rgb(224,145,5)" fg:x="1045" fg:w="1"/><text x="22.2546%" y="895.50"></text></g><g><title>core::ops::function::Fn::call (2 samples, 0.04%)</title><rect x="22.3205%" y="757" width="0.0421%" height="15" fill="rgb(234,130,49)" fg:x="1060" fg:w="2"/><text x="22.5705%" y="767.50"></text></g><g><title>&lt;memchr::vector::SensibleMoveMask as memchr::vector::MoveMask&gt;::first_offset (2 samples, 0.04%)</title><rect x="22.3205%" y="741" width="0.0421%" height="15" fill="rgb(254,6,2)" fg:x="1060" fg:w="2"/><text x="22.5705%" y="751.50"></text></g><g><title>core::num::&lt;impl u32&gt;::trailing_zeros (2 samples, 0.04%)</title><rect x="22.3205%" y="725" width="0.0421%" height="15" fill="rgb(208,96,46)" fg:x="1060" fg:w="2"/><text x="22.5705%" y="735.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (20 samples, 0.42%)</title><rect x="22.1941%" y="805" width="0.4211%" height="15" fill="rgb(239,3,39)" fg:x="1054" fg:w="20"/><text x="22.4441%" y="815.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (20 samples, 0.42%)</title><rect x="22.1941%" y="789" width="0.4211%" height="15" fill="rgb(233,210,1)" fg:x="1054" fg:w="20"/><text x="22.4441%" y="799.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (16 samples, 0.34%)</title><rect x="22.2784%" y="773" width="0.3369%" height="15" fill="rgb(244,137,37)" fg:x="1058" fg:w="16"/><text x="22.5284%" y="783.50"></text></g><g><title>memchr::vector::x86avx2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m256i&gt;::movemask (12 samples, 0.25%)</title><rect x="22.3626%" y="757" width="0.2527%" height="15" fill="rgb(240,136,2)" fg:x="1062" fg:w="12"/><text x="22.6126%" y="767.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (12 samples, 0.25%)</title><rect x="22.3626%" y="741" width="0.2527%" height="15" fill="rgb(239,18,37)" fg:x="1062" fg:w="12"/><text x="22.6126%" y="751.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (24 samples, 0.51%)</title><rect x="22.1310%" y="821" width="0.5054%" height="15" fill="rgb(218,185,22)" fg:x="1051" fg:w="24"/><text x="22.3810%" y="831.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_sse2 (1 samples, 0.02%)</title><rect x="22.6153%" y="805" width="0.0211%" height="15" fill="rgb(225,218,4)" fg:x="1074" fg:w="1"/><text x="22.8653%" y="815.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (1 samples, 0.02%)</title><rect x="22.6153%" y="789" width="0.0211%" height="15" fill="rgb(230,182,32)" fg:x="1074" fg:w="1"/><text x="22.8653%" y="799.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (1 samples, 0.02%)</title><rect x="22.6153%" y="773" width="0.0211%" height="15" fill="rgb(242,56,43)" fg:x="1074" fg:w="1"/><text x="22.8653%" y="783.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::movemask (1 samples, 0.02%)</title><rect x="22.6153%" y="757" width="0.0211%" height="15" fill="rgb(233,99,24)" fg:x="1074" fg:w="1"/><text x="22.8653%" y="767.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.02%)</title><rect x="22.6153%" y="741" width="0.0211%" height="15" fill="rgb(234,209,42)" fg:x="1074" fg:w="1"/><text x="22.8653%" y="751.50"></text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_line_async::_{{closure}} (213 samples, 4.49%)</title><rect x="18.2565%" y="949" width="4.4852%" height="15" fill="rgb(227,7,12)" fg:x="867" fg:w="213"/><text x="18.5065%" y="959.50">rutin..</text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_line (153 samples, 3.22%)</title><rect x="19.5199%" y="933" width="3.2217%" height="15" fill="rgb(245,203,43)" fg:x="927" fg:w="153"/><text x="19.7699%" y="943.50">rut..</text></g><g><title>memchr::memchr::memchr (35 samples, 0.74%)</title><rect x="22.0046%" y="917" width="0.7370%" height="15" fill="rgb(238,205,33)" fg:x="1045" fg:w="35"/><text x="22.2546%" y="927.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (35 samples, 0.74%)</title><rect x="22.0046%" y="901" width="0.7370%" height="15" fill="rgb(231,56,7)" fg:x="1045" fg:w="35"/><text x="22.2546%" y="911.50"></text></g><g><title>memchr::memchr::memchr::_{{closure}} (34 samples, 0.72%)</title><rect x="22.0257%" y="885" width="0.7159%" height="15" fill="rgb(244,186,29)" fg:x="1046" fg:w="34"/><text x="22.2757%" y="895.50"></text></g><g><title>memchr::memchr::memchr_raw (34 samples, 0.72%)</title><rect x="22.0257%" y="869" width="0.7159%" height="15" fill="rgb(234,111,31)" fg:x="1046" fg:w="34"/><text x="22.2757%" y="879.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (34 samples, 0.72%)</title><rect x="22.0257%" y="853" width="0.7159%" height="15" fill="rgb(241,149,10)" fg:x="1046" fg:w="34"/><text x="22.2757%" y="863.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (32 samples, 0.67%)</title><rect x="22.0678%" y="837" width="0.6738%" height="15" fill="rgb(249,206,44)" fg:x="1048" fg:w="32"/><text x="22.3178%" y="847.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::new_unchecked (5 samples, 0.11%)</title><rect x="22.6363%" y="821" width="0.1053%" height="15" fill="rgb(251,153,30)" fg:x="1075" fg:w="5"/><text x="22.8863%" y="831.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::new (1 samples, 0.02%)</title><rect x="22.7206%" y="805" width="0.0211%" height="15" fill="rgb(239,152,38)" fg:x="1079" fg:w="1"/><text x="22.9706%" y="815.50"></text></g><g><title>memchr::vector::x86avx2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m256i&gt;::splat (1 samples, 0.02%)</title><rect x="22.7206%" y="789" width="0.0211%" height="15" fill="rgb(249,139,47)" fg:x="1079" fg:w="1"/><text x="22.9706%" y="799.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set1_epi8 (1 samples, 0.02%)</title><rect x="22.7206%" y="773" width="0.0211%" height="15" fill="rgb(244,64,35)" fg:x="1079" fg:w="1"/><text x="22.9706%" y="783.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_setr_epi8 (1 samples, 0.02%)</title><rect x="22.7206%" y="757" width="0.0211%" height="15" fill="rgb(216,46,15)" fg:x="1079" fg:w="1"/><text x="22.9706%" y="767.50"></text></g><g><title>core::core_arch::simd::i8x32::new (1 samples, 0.02%)</title><rect x="22.7206%" y="741" width="0.0211%" height="15" fill="rgb(250,74,19)" fg:x="1079" fg:w="1"/><text x="22.9706%" y="751.50"></text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::get (1 samples, 0.02%)</title><rect x="22.7416%" y="949" width="0.0211%" height="15" fill="rgb(249,42,33)" fg:x="1080" fg:w="1"/><text x="22.9916%" y="959.50"></text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::get_u8 (4 samples, 0.08%)</title><rect x="22.7627%" y="949" width="0.0842%" height="15" fill="rgb(242,149,17)" fg:x="1081" fg:w="4"/><text x="23.0127%" y="959.50"></text></g><g><title>bytes::buf::buf_impl::Buf::get_u8 (2 samples, 0.04%)</title><rect x="22.8048%" y="933" width="0.0421%" height="15" fill="rgb(244,29,21)" fg:x="1083" fg:w="2"/><text x="23.0548%" y="943.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (2 samples, 0.04%)</title><rect x="22.8048%" y="917" width="0.0421%" height="15" fill="rgb(220,130,37)" fg:x="1083" fg:w="2"/><text x="23.0548%" y="927.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (2 samples, 0.04%)</title><rect x="22.8048%" y="901" width="0.0421%" height="15" fill="rgb(211,67,2)" fg:x="1083" fg:w="2"/><text x="23.0548%" y="911.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (1 samples, 0.02%)</title><rect x="22.8259%" y="885" width="0.0211%" height="15" fill="rgb(235,68,52)" fg:x="1084" fg:w="1"/><text x="23.0759%" y="895.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::advance_mut (1 samples, 0.02%)</title><rect x="22.9522%" y="917" width="0.0211%" height="15" fill="rgb(246,142,3)" fg:x="1090" fg:w="1"/><text x="23.2022%" y="927.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::advance_mut (1 samples, 0.02%)</title><rect x="22.9522%" y="901" width="0.0211%" height="15" fill="rgb(241,25,7)" fg:x="1090" fg:w="1"/><text x="23.2022%" y="911.50"></text></g><g><title>bytes::bytes_mut::BytesMut::len (1 samples, 0.02%)</title><rect x="22.9522%" y="885" width="0.0211%" height="15" fill="rgb(242,119,39)" fg:x="1090" fg:w="1"/><text x="23.2022%" y="895.50"></text></g><g><title>_mi_page_malloc (2 samples, 0.04%)</title><rect x="22.9733%" y="709" width="0.0421%" height="15" fill="rgb(241,98,45)" fg:x="1091" fg:w="2"/><text x="23.2233%" y="719.50"></text></g><g><title>_mi_page_malloc_zero (2 samples, 0.04%)</title><rect x="22.9733%" y="693" width="0.0421%" height="15" fill="rgb(254,28,30)" fg:x="1091" fg:w="2"/><text x="23.2233%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.06%)</title><rect x="22.9733%" y="853" width="0.0632%" height="15" fill="rgb(241,142,54)" fg:x="1091" fg:w="3"/><text x="23.2233%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.06%)</title><rect x="22.9733%" y="837" width="0.0632%" height="15" fill="rgb(222,85,15)" fg:x="1091" fg:w="3"/><text x="23.2233%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.06%)</title><rect x="22.9733%" y="821" width="0.0632%" height="15" fill="rgb(210,85,47)" fg:x="1091" fg:w="3"/><text x="23.2233%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (3 samples, 0.06%)</title><rect x="22.9733%" y="805" width="0.0632%" height="15" fill="rgb(224,206,25)" fg:x="1091" fg:w="3"/><text x="23.2233%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.06%)</title><rect x="22.9733%" y="789" width="0.0632%" height="15" fill="rgb(243,201,19)" fg:x="1091" fg:w="3"/><text x="23.2233%" y="799.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.06%)</title><rect x="22.9733%" y="773" width="0.0632%" height="15" fill="rgb(236,59,4)" fg:x="1091" fg:w="3"/><text x="23.2233%" y="783.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.06%)</title><rect x="22.9733%" y="757" width="0.0632%" height="15" fill="rgb(254,179,45)" fg:x="1091" fg:w="3"/><text x="23.2233%" y="767.50"></text></g><g><title>__rust_alloc (3 samples, 0.06%)</title><rect x="22.9733%" y="741" width="0.0632%" height="15" fill="rgb(226,14,10)" fg:x="1091" fg:w="3"/><text x="23.2233%" y="751.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (3 samples, 0.06%)</title><rect x="22.9733%" y="725" width="0.0632%" height="15" fill="rgb(244,27,41)" fg:x="1091" fg:w="3"/><text x="23.2233%" y="735.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.02%)</title><rect x="23.0154%" y="709" width="0.0211%" height="15" fill="rgb(235,35,32)" fg:x="1093" fg:w="1"/><text x="23.2654%" y="719.50"></text></g><g><title>_mi_heap_malloc_zero (1 samples, 0.02%)</title><rect x="23.0154%" y="693" width="0.0211%" height="15" fill="rgb(218,68,31)" fg:x="1093" fg:w="1"/><text x="23.2654%" y="703.50"></text></g><g><title>_mi_heap_malloc_zero_ex (1 samples, 0.02%)</title><rect x="23.0154%" y="677" width="0.0211%" height="15" fill="rgb(207,120,37)" fg:x="1093" fg:w="1"/><text x="23.2654%" y="687.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.02%)</title><rect x="23.0154%" y="661" width="0.0211%" height="15" fill="rgb(227,98,0)" fg:x="1093" fg:w="1"/><text x="23.2654%" y="671.50"></text></g><g><title>mi_find_page (1 samples, 0.02%)</title><rect x="23.0154%" y="645" width="0.0211%" height="15" fill="rgb(207,7,3)" fg:x="1093" fg:w="1"/><text x="23.2654%" y="655.50"></text></g><g><title>mi_find_free_page (1 samples, 0.02%)</title><rect x="23.0154%" y="629" width="0.0211%" height="15" fill="rgb(206,98,19)" fg:x="1093" fg:w="1"/><text x="23.2654%" y="639.50"></text></g><g><title>_mi_page_free_collect (1 samples, 0.02%)</title><rect x="23.0154%" y="613" width="0.0211%" height="15" fill="rgb(217,5,26)" fg:x="1093" fg:w="1"/><text x="23.2654%" y="623.50"></text></g><g><title>bytes::bytes_mut::Shared::is_unique (1 samples, 0.02%)</title><rect x="23.0364%" y="853" width="0.0211%" height="15" fill="rgb(235,190,38)" fg:x="1094" fg:w="1"/><text x="23.2864%" y="863.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::chunk_mut (5 samples, 0.11%)</title><rect x="22.9733%" y="917" width="0.1053%" height="15" fill="rgb(247,86,24)" fg:x="1091" fg:w="5"/><text x="23.2233%" y="927.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::chunk_mut (5 samples, 0.11%)</title><rect x="22.9733%" y="901" width="0.1053%" height="15" fill="rgb(205,101,16)" fg:x="1091" fg:w="5"/><text x="23.2233%" y="911.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (5 samples, 0.11%)</title><rect x="22.9733%" y="885" width="0.1053%" height="15" fill="rgb(246,168,33)" fg:x="1091" fg:w="5"/><text x="23.2233%" y="895.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (5 samples, 0.11%)</title><rect x="22.9733%" y="869" width="0.1053%" height="15" fill="rgb(231,114,1)" fg:x="1091" fg:w="5"/><text x="23.2233%" y="879.50"></text></g><g><title>bytes::bytes_mut::release_shared (1 samples, 0.02%)</title><rect x="23.0575%" y="853" width="0.0211%" height="15" fill="rgb(207,184,53)" fg:x="1095" fg:w="1"/><text x="23.3075%" y="863.50"></text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::need_bytes_async::_{{closure}} (23 samples, 0.48%)</title><rect x="22.8469%" y="949" width="0.4843%" height="15" fill="rgb(224,95,51)" fg:x="1085" fg:w="23"/><text x="23.0969%" y="959.50"></text></g><g><title>&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (18 samples, 0.38%)</title><rect x="22.9522%" y="933" width="0.3790%" height="15" fill="rgb(212,188,45)" fg:x="1090" fg:w="18"/><text x="23.2022%" y="943.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (12 samples, 0.25%)</title><rect x="23.0785%" y="917" width="0.2527%" height="15" fill="rgb(223,154,38)" fg:x="1096" fg:w="12"/><text x="23.3285%" y="927.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (12 samples, 0.25%)</title><rect x="23.0785%" y="901" width="0.2527%" height="15" fill="rgb(251,22,52)" fg:x="1096" fg:w="12"/><text x="23.3285%" y="911.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (12 samples, 0.25%)</title><rect x="23.0785%" y="885" width="0.2527%" height="15" fill="rgb(229,209,22)" fg:x="1096" fg:w="12"/><text x="23.3285%" y="895.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (12 samples, 0.25%)</title><rect x="23.0785%" y="869" width="0.2527%" height="15" fill="rgb(234,138,34)" fg:x="1096" fg:w="12"/><text x="23.3285%" y="879.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (11 samples, 0.23%)</title><rect x="23.0996%" y="853" width="0.2316%" height="15" fill="rgb(212,95,11)" fg:x="1097" fg:w="11"/><text x="23.3496%" y="863.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (11 samples, 0.23%)</title><rect x="23.0996%" y="837" width="0.2316%" height="15" fill="rgb(240,179,47)" fg:x="1097" fg:w="11"/><text x="23.3496%" y="847.50"></text></g><g><title>mio::sys::unix::selector::stateless_io_source::IoSourceState::do_io (11 samples, 0.23%)</title><rect x="23.0996%" y="821" width="0.2316%" height="15" fill="rgb(240,163,11)" fg:x="1097" fg:w="11"/><text x="23.3496%" y="831.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::_{{closure}} (11 samples, 0.23%)</title><rect x="23.0996%" y="805" width="0.2316%" height="15" fill="rgb(236,37,12)" fg:x="1097" fg:w="11"/><text x="23.3496%" y="815.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (11 samples, 0.23%)</title><rect x="23.0996%" y="789" width="0.2316%" height="15" fill="rgb(232,164,16)" fg:x="1097" fg:w="11"/><text x="23.3496%" y="799.50"></text></g><g><title>std::sys_common::net::TcpStream::read (11 samples, 0.23%)</title><rect x="23.0996%" y="773" width="0.2316%" height="15" fill="rgb(244,205,15)" fg:x="1097" fg:w="11"/><text x="23.3496%" y="783.50"></text></g><g><title>std::sys::pal::unix::net::Socket::read (11 samples, 0.23%)</title><rect x="23.0996%" y="757" width="0.2316%" height="15" fill="rgb(223,117,47)" fg:x="1097" fg:w="11"/><text x="23.3496%" y="767.50"></text></g><g><title>std::sys::pal::unix::net::Socket::recv_with_flags (11 samples, 0.23%)</title><rect x="23.0996%" y="741" width="0.2316%" height="15" fill="rgb(244,107,35)" fg:x="1097" fg:w="11"/><text x="23.3496%" y="751.50"></text></g><g><title>recv (11 samples, 0.23%)</title><rect x="23.0996%" y="725" width="0.2316%" height="15" fill="rgb(205,140,8)" fg:x="1097" fg:w="11"/><text x="23.3496%" y="735.50"></text></g><g><title>[libc.so.6] (3 samples, 0.06%)</title><rect x="23.2681%" y="709" width="0.0632%" height="15" fill="rgb(228,84,46)" fg:x="1105" fg:w="3"/><text x="23.5181%" y="719.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as snafu::OptionExt&lt;T&gt;&gt;::with_context (1 samples, 0.02%)</title><rect x="23.4997%" y="933" width="0.0211%" height="15" fill="rgb(254,188,9)" fg:x="1116" fg:w="1"/><text x="23.7497%" y="943.50"></text></g><g><title>&lt;usize as core::ops::arith::AddAssign&gt;::add_assign (1 samples, 0.02%)</title><rect x="23.6892%" y="901" width="0.0211%" height="15" fill="rgb(206,112,54)" fg:x="1125" fg:w="1"/><text x="23.9392%" y="911.50"></text></g><g><title>atoi::ascii_to_digit (3 samples, 0.06%)</title><rect x="23.7103%" y="901" width="0.0632%" height="15" fill="rgb(216,84,49)" fg:x="1126" fg:w="3"/><text x="23.9603%" y="911.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (665 samples, 14.00%)</title><rect x="9.8336%" y="981" width="14.0029%" height="15" fill="rgb(214,194,35)" fg:x="467" fg:w="665"/><text x="10.0836%" y="991.50">&lt;core::pin::Pin&lt;P&gt; as..</text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::_{{closure}}::_{{closure}}::_{{closure}}::_decode_async::_{{closure}} (665 samples, 14.00%)</title><rect x="9.8336%" y="965" width="14.0029%" height="15" fill="rgb(249,28,3)" fg:x="467" fg:w="665"/><text x="10.0836%" y="975.50">rutin::frame::Resp3&lt;b..</text></g><g><title>rutin::util::atoi (24 samples, 0.51%)</title><rect x="23.3312%" y="949" width="0.5054%" height="15" fill="rgb(222,56,52)" fg:x="1108" fg:w="24"/><text x="23.5812%" y="959.50"></text></g><g><title>atoi::atoi (15 samples, 0.32%)</title><rect x="23.5207%" y="933" width="0.3159%" height="15" fill="rgb(245,217,50)" fg:x="1117" fg:w="15"/><text x="23.7707%" y="943.50"></text></g><g><title>&lt;I as atoi::FromRadix10SignedChecked&gt;::from_radix_10_signed_checked (15 samples, 0.32%)</title><rect x="23.5207%" y="917" width="0.3159%" height="15" fill="rgb(213,201,24)" fg:x="1117" fg:w="15"/><text x="23.7707%" y="927.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (3 samples, 0.06%)</title><rect x="23.7734%" y="901" width="0.0632%" height="15" fill="rgb(248,116,28)" fg:x="1129" fg:w="3"/><text x="24.0234%" y="911.50"></text></g><g><title>&lt;I as atoi::FromRadix10SignedChecked&gt;::from_radix_10_signed_checked::_{{closure}} (3 samples, 0.06%)</title><rect x="23.7734%" y="885" width="0.0632%" height="15" fill="rgb(219,72,43)" fg:x="1129" fg:w="3"/><text x="24.0234%" y="895.50"></text></g><g><title>atoi::Sign::try_from (1 samples, 0.02%)</title><rect x="23.8155%" y="869" width="0.0211%" height="15" fill="rgb(209,138,14)" fg:x="1131" fg:w="1"/><text x="24.0655%" y="879.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.02%)</title><rect x="23.8366%" y="981" width="0.0211%" height="15" fill="rgb(222,18,33)" fg:x="1132" fg:w="1"/><text x="24.0866%" y="991.50"></text></g><g><title>[libc.so.6] (40 samples, 0.84%)</title><rect x="23.8577%" y="981" width="0.8423%" height="15" fill="rgb(213,199,7)" fg:x="1133" fg:w="40"/><text x="24.1077%" y="991.50"></text></g><g><title>_mi_page_malloc (5 samples, 0.11%)</title><rect x="24.8473%" y="853" width="0.1053%" height="15" fill="rgb(250,110,10)" fg:x="1180" fg:w="5"/><text x="25.0973%" y="863.50"></text></g><g><title>_mi_page_malloc_zero (1 samples, 0.02%)</title><rect x="24.9316%" y="837" width="0.0211%" height="15" fill="rgb(248,123,6)" fg:x="1184" fg:w="1"/><text x="25.1816%" y="847.50"></text></g><g><title>mi_heap_malloc_aligned (1 samples, 0.02%)</title><rect x="24.9526%" y="853" width="0.0211%" height="15" fill="rgb(206,91,31)" fg:x="1185" fg:w="1"/><text x="25.2026%" y="863.50"></text></g><g><title>mi_heap_malloc_aligned_at (6 samples, 0.13%)</title><rect x="24.9737%" y="853" width="0.1263%" height="15" fill="rgb(211,154,13)" fg:x="1186" fg:w="6"/><text x="25.2237%" y="863.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at (6 samples, 0.13%)</title><rect x="24.9737%" y="837" width="0.1263%" height="15" fill="rgb(225,148,7)" fg:x="1186" fg:w="6"/><text x="25.2237%" y="847.50"></text></g><g><title>_mi_deferred_free (1 samples, 0.02%)</title><rect x="25.1632%" y="789" width="0.0211%" height="15" fill="rgb(220,160,43)" fg:x="1195" fg:w="1"/><text x="25.4132%" y="799.50"></text></g><g><title>_mi_page_free_collect (1 samples, 0.02%)</title><rect x="25.2053%" y="757" width="0.0211%" height="15" fill="rgb(213,52,39)" fg:x="1197" fg:w="1"/><text x="25.4553%" y="767.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (8 samples, 0.17%)</title><rect x="25.1000%" y="853" width="0.1685%" height="15" fill="rgb(243,137,7)" fg:x="1192" fg:w="8"/><text x="25.3500%" y="863.50"></text></g><g><title>_mi_heap_malloc_zero (8 samples, 0.17%)</title><rect x="25.1000%" y="837" width="0.1685%" height="15" fill="rgb(230,79,13)" fg:x="1192" fg:w="8"/><text x="25.3500%" y="847.50"></text></g><g><title>_mi_heap_malloc_zero_ex (8 samples, 0.17%)</title><rect x="25.1000%" y="821" width="0.1685%" height="15" fill="rgb(247,105,23)" fg:x="1192" fg:w="8"/><text x="25.3500%" y="831.50"></text></g><g><title>_mi_malloc_generic (6 samples, 0.13%)</title><rect x="25.1421%" y="805" width="0.1263%" height="15" fill="rgb(223,179,41)" fg:x="1194" fg:w="6"/><text x="25.3921%" y="815.50"></text></g><g><title>mi_find_page (4 samples, 0.08%)</title><rect x="25.1842%" y="789" width="0.0842%" height="15" fill="rgb(218,9,34)" fg:x="1196" fg:w="4"/><text x="25.4342%" y="799.50"></text></g><g><title>mi_find_free_page (3 samples, 0.06%)</title><rect x="25.2053%" y="773" width="0.0632%" height="15" fill="rgb(222,106,8)" fg:x="1197" fg:w="3"/><text x="25.4553%" y="783.50"></text></g><g><title>mi_page_queue (2 samples, 0.04%)</title><rect x="25.2264%" y="757" width="0.0421%" height="15" fill="rgb(211,220,0)" fg:x="1198" fg:w="2"/><text x="25.4764%" y="767.50"></text></g><g><title>_mi_bin (2 samples, 0.04%)</title><rect x="25.2264%" y="741" width="0.0421%" height="15" fill="rgb(229,52,16)" fg:x="1198" fg:w="2"/><text x="25.4764%" y="751.50"></text></g><g><title>mi_bin (2 samples, 0.04%)</title><rect x="25.2264%" y="725" width="0.0421%" height="15" fill="rgb(212,155,18)" fg:x="1198" fg:w="2"/><text x="25.4764%" y="735.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (30 samples, 0.63%)</title><rect x="24.6999%" y="981" width="0.6317%" height="15" fill="rgb(242,21,14)" fg:x="1173" fg:w="30"/><text x="24.9499%" y="991.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (30 samples, 0.63%)</title><rect x="24.6999%" y="965" width="0.6317%" height="15" fill="rgb(222,19,48)" fg:x="1173" fg:w="30"/><text x="24.9499%" y="975.50"></text></g><g><title>alloc::alloc::exchange_malloc (27 samples, 0.57%)</title><rect x="24.7631%" y="949" width="0.5685%" height="15" fill="rgb(232,45,27)" fg:x="1176" fg:w="27"/><text x="25.0131%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (26 samples, 0.55%)</title><rect x="24.7842%" y="933" width="0.5475%" height="15" fill="rgb(249,103,42)" fg:x="1177" fg:w="26"/><text x="25.0342%" y="943.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (26 samples, 0.55%)</title><rect x="24.7842%" y="917" width="0.5475%" height="15" fill="rgb(246,81,33)" fg:x="1177" fg:w="26"/><text x="25.0342%" y="927.50"></text></g><g><title>alloc::alloc::alloc (26 samples, 0.55%)</title><rect x="24.7842%" y="901" width="0.5475%" height="15" fill="rgb(252,33,42)" fg:x="1177" fg:w="26"/><text x="25.0342%" y="911.50"></text></g><g><title>__rust_alloc (26 samples, 0.55%)</title><rect x="24.7842%" y="885" width="0.5475%" height="15" fill="rgb(209,212,41)" fg:x="1177" fg:w="26"/><text x="25.0342%" y="895.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (26 samples, 0.55%)</title><rect x="24.7842%" y="869" width="0.5475%" height="15" fill="rgb(207,154,6)" fg:x="1177" fg:w="26"/><text x="25.0342%" y="879.50"></text></g><g><title>mi_malloc_aligned (3 samples, 0.06%)</title><rect x="25.2685%" y="853" width="0.0632%" height="15" fill="rgb(223,64,47)" fg:x="1200" fg:w="3"/><text x="25.5185%" y="863.50"></text></g><g><title>mi_prim_get_default_heap (3 samples, 0.06%)</title><rect x="25.2685%" y="837" width="0.0632%" height="15" fill="rgb(211,161,38)" fg:x="1200" fg:w="3"/><text x="25.5185%" y="847.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.04%)</title><rect x="25.3738%" y="965" width="0.0421%" height="15" fill="rgb(219,138,40)" fg:x="1205" fg:w="2"/><text x="25.6238%" y="975.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (13 samples, 0.27%)</title><rect x="25.3316%" y="981" width="0.2737%" height="15" fill="rgb(241,228,46)" fg:x="1203" fg:w="13"/><text x="25.5816%" y="991.50"></text></g><g><title>core::ptr::write (9 samples, 0.19%)</title><rect x="25.4159%" y="965" width="0.1895%" height="15" fill="rgb(223,209,38)" fg:x="1207" fg:w="9"/><text x="25.6659%" y="975.50"></text></g><g><title>_mi_page_malloc (4 samples, 0.08%)</title><rect x="25.6686%" y="837" width="0.0842%" height="15" fill="rgb(236,164,45)" fg:x="1219" fg:w="4"/><text x="25.9186%" y="847.50"></text></g><g><title>_mi_page_malloc_zero (4 samples, 0.08%)</title><rect x="25.6686%" y="821" width="0.0842%" height="15" fill="rgb(231,15,5)" fg:x="1219" fg:w="4"/><text x="25.9186%" y="831.50"></text></g><g><title>mi_heap_malloc_aligned_at (9 samples, 0.19%)</title><rect x="25.7528%" y="837" width="0.1895%" height="15" fill="rgb(252,35,15)" fg:x="1223" fg:w="9"/><text x="26.0028%" y="847.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at (9 samples, 0.19%)</title><rect x="25.7528%" y="821" width="0.1895%" height="15" fill="rgb(248,181,18)" fg:x="1223" fg:w="9"/><text x="26.0028%" y="831.50"></text></g><g><title>_mi_heap_get_free_small_page (1 samples, 0.02%)</title><rect x="25.9212%" y="805" width="0.0211%" height="15" fill="rgb(233,39,42)" fg:x="1231" fg:w="1"/><text x="26.1712%" y="815.50"></text></g><g><title>_mi_wsize_from_size (1 samples, 0.02%)</title><rect x="25.9212%" y="789" width="0.0211%" height="15" fill="rgb(238,110,33)" fg:x="1231" fg:w="1"/><text x="26.1712%" y="799.50"></text></g><g><title>_mi_deferred_free (1 samples, 0.02%)</title><rect x="25.9423%" y="773" width="0.0211%" height="15" fill="rgb(233,195,10)" fg:x="1232" fg:w="1"/><text x="26.1923%" y="783.50"></text></g><g><title>mi_find_page (1 samples, 0.02%)</title><rect x="25.9634%" y="773" width="0.0211%" height="15" fill="rgb(254,105,3)" fg:x="1233" fg:w="1"/><text x="26.2134%" y="783.50"></text></g><g><title>mi_find_free_page (1 samples, 0.02%)</title><rect x="25.9634%" y="757" width="0.0211%" height="15" fill="rgb(221,225,9)" fg:x="1233" fg:w="1"/><text x="26.2134%" y="767.50"></text></g><g><title>_mi_heap_collect_retired (1 samples, 0.02%)</title><rect x="25.9844%" y="757" width="0.0211%" height="15" fill="rgb(224,227,45)" fg:x="1234" fg:w="1"/><text x="26.2344%" y="767.50"></text></g><g><title>mi_page_extend_free (6 samples, 0.13%)</title><rect x="26.0055%" y="757" width="0.1263%" height="15" fill="rgb(229,198,43)" fg:x="1235" fg:w="6"/><text x="26.2555%" y="767.50"></text></g><g><title>mi_page_extend_free (6 samples, 0.13%)</title><rect x="26.0055%" y="741" width="0.1263%" height="15" fill="rgb(206,209,35)" fg:x="1235" fg:w="6"/><text x="26.2555%" y="751.50"></text></g><g><title>mi_page_free_list_extend (6 samples, 0.13%)</title><rect x="26.0055%" y="725" width="0.1263%" height="15" fill="rgb(245,195,53)" fg:x="1235" fg:w="6"/><text x="26.2555%" y="735.50"></text></g><g><title>mi_page_init (1 samples, 0.02%)</title><rect x="26.1318%" y="725" width="0.0211%" height="15" fill="rgb(240,92,26)" fg:x="1241" fg:w="1"/><text x="26.3818%" y="735.50"></text></g><g><title>_mi_segment_page_start (1 samples, 0.02%)</title><rect x="26.1318%" y="709" width="0.0211%" height="15" fill="rgb(207,40,23)" fg:x="1241" fg:w="1"/><text x="26.3818%" y="719.50"></text></g><g><title>_mi_segment_page_start_from_slice (1 samples, 0.02%)</title><rect x="26.1318%" y="693" width="0.0211%" height="15" fill="rgb(223,111,35)" fg:x="1241" fg:w="1"/><text x="26.3818%" y="703.50"></text></g><g><title>mi_segment_try_purge (2 samples, 0.04%)</title><rect x="26.1529%" y="709" width="0.0421%" height="15" fill="rgb(229,147,28)" fg:x="1242" fg:w="2"/><text x="26.4029%" y="719.50"></text></g><g><title>_mi_prim_clock_now (1 samples, 0.02%)</title><rect x="26.1739%" y="693" width="0.0211%" height="15" fill="rgb(211,29,28)" fg:x="1243" fg:w="1"/><text x="26.4239%" y="703.50"></text></g><g><title>clock_gettime (1 samples, 0.02%)</title><rect x="26.1739%" y="677" width="0.0211%" height="15" fill="rgb(228,72,33)" fg:x="1243" fg:w="1"/><text x="26.4239%" y="687.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.02%)</title><rect x="26.1739%" y="661" width="0.0211%" height="15" fill="rgb(205,214,31)" fg:x="1243" fg:w="1"/><text x="26.4239%" y="671.50"></text></g><g><title>mi_segment_slice_split (1 samples, 0.02%)</title><rect x="26.2160%" y="693" width="0.0211%" height="15" fill="rgb(224,111,15)" fg:x="1245" fg:w="1"/><text x="26.4660%" y="703.50"></text></g><g><title>mi_segment_span_free (1 samples, 0.02%)</title><rect x="26.2160%" y="677" width="0.0211%" height="15" fill="rgb(253,21,26)" fg:x="1245" fg:w="1"/><text x="26.4660%" y="687.50"></text></g><g><title>mi_page_fresh (10 samples, 0.21%)</title><rect x="26.1318%" y="757" width="0.2106%" height="15" fill="rgb(245,139,43)" fg:x="1241" fg:w="10"/><text x="26.3818%" y="767.50"></text></g><g><title>mi_page_fresh_alloc (10 samples, 0.21%)</title><rect x="26.1318%" y="741" width="0.2106%" height="15" fill="rgb(252,170,7)" fg:x="1241" fg:w="10"/><text x="26.3818%" y="751.50"></text></g><g><title>mi_segments_page_alloc (9 samples, 0.19%)</title><rect x="26.1529%" y="725" width="0.1895%" height="15" fill="rgb(231,118,14)" fg:x="1242" fg:w="9"/><text x="26.4029%" y="735.50"></text></g><g><title>mi_segments_page_find_and_allocate (7 samples, 0.15%)</title><rect x="26.1950%" y="709" width="0.1474%" height="15" fill="rgb(238,83,0)" fg:x="1244" fg:w="7"/><text x="26.4450%" y="719.50"></text></g><g><title>mi_segment_span_allocate (5 samples, 0.11%)</title><rect x="26.2371%" y="693" width="0.1053%" height="15" fill="rgb(221,39,39)" fg:x="1246" fg:w="5"/><text x="26.4871%" y="703.50"></text></g><g><title>mi_segment_ensure_committed (4 samples, 0.08%)</title><rect x="26.2582%" y="677" width="0.0842%" height="15" fill="rgb(222,119,46)" fg:x="1247" fg:w="4"/><text x="26.5082%" y="687.50"></text></g><g><title>mi_segment_commit (4 samples, 0.08%)</title><rect x="26.2582%" y="661" width="0.0842%" height="15" fill="rgb(222,165,49)" fg:x="1247" fg:w="4"/><text x="26.5082%" y="671.50"></text></g><g><title>_mi_prim_clock_now (3 samples, 0.06%)</title><rect x="26.2792%" y="645" width="0.0632%" height="15" fill="rgb(219,113,52)" fg:x="1248" fg:w="3"/><text x="26.5292%" y="655.50"></text></g><g><title>clock_gettime (2 samples, 0.04%)</title><rect x="26.3003%" y="629" width="0.0421%" height="15" fill="rgb(214,7,15)" fg:x="1249" fg:w="2"/><text x="26.5503%" y="639.50"></text></g><g><title>__vdso_clock_gettime (2 samples, 0.04%)</title><rect x="26.3003%" y="613" width="0.0421%" height="15" fill="rgb(235,32,4)" fg:x="1249" fg:w="2"/><text x="26.5503%" y="623.50"></text></g><g><title>_mi_malloc_generic (21 samples, 0.44%)</title><rect x="25.9423%" y="789" width="0.4422%" height="15" fill="rgb(238,90,54)" fg:x="1232" fg:w="21"/><text x="26.1923%" y="799.50"></text></g><g><title>mi_page_queue_find_free_ex (19 samples, 0.40%)</title><rect x="25.9844%" y="773" width="0.4001%" height="15" fill="rgb(213,208,19)" fg:x="1234" fg:w="19"/><text x="26.2344%" y="783.50"></text></g><g><title>mi_page_to_full (2 samples, 0.04%)</title><rect x="26.3424%" y="757" width="0.0421%" height="15" fill="rgb(233,156,4)" fg:x="1251" fg:w="2"/><text x="26.5924%" y="767.50"></text></g><g><title>mi_page_queue_enqueue_from (2 samples, 0.04%)</title><rect x="26.3424%" y="741" width="0.0421%" height="15" fill="rgb(207,194,5)" fg:x="1251" fg:w="2"/><text x="26.5924%" y="751.50"></text></g><g><title>mi_heap_queue_first_update (2 samples, 0.04%)</title><rect x="26.3424%" y="725" width="0.0421%" height="15" fill="rgb(206,111,30)" fg:x="1251" fg:w="2"/><text x="26.5924%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (38 samples, 0.80%)</title><rect x="25.6054%" y="981" width="0.8002%" height="15" fill="rgb(243,70,54)" fg:x="1216" fg:w="38"/><text x="25.8554%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (37 samples, 0.78%)</title><rect x="25.6264%" y="965" width="0.7791%" height="15" fill="rgb(242,28,8)" fg:x="1217" fg:w="37"/><text x="25.8764%" y="975.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (37 samples, 0.78%)</title><rect x="25.6264%" y="949" width="0.7791%" height="15" fill="rgb(219,106,18)" fg:x="1217" fg:w="37"/><text x="25.8764%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (37 samples, 0.78%)</title><rect x="25.6264%" y="933" width="0.7791%" height="15" fill="rgb(244,222,10)" fg:x="1217" fg:w="37"/><text x="25.8764%" y="943.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (35 samples, 0.74%)</title><rect x="25.6686%" y="917" width="0.7370%" height="15" fill="rgb(236,179,52)" fg:x="1219" fg:w="35"/><text x="25.9186%" y="927.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (35 samples, 0.74%)</title><rect x="25.6686%" y="901" width="0.7370%" height="15" fill="rgb(213,23,39)" fg:x="1219" fg:w="35"/><text x="25.9186%" y="911.50"></text></g><g><title>alloc::alloc::alloc (35 samples, 0.74%)</title><rect x="25.6686%" y="885" width="0.7370%" height="15" fill="rgb(238,48,10)" fg:x="1219" fg:w="35"/><text x="25.9186%" y="895.50"></text></g><g><title>__rust_alloc (35 samples, 0.74%)</title><rect x="25.6686%" y="869" width="0.7370%" height="15" fill="rgb(251,196,23)" fg:x="1219" fg:w="35"/><text x="25.9186%" y="879.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (35 samples, 0.74%)</title><rect x="25.6686%" y="853" width="0.7370%" height="15" fill="rgb(250,152,24)" fg:x="1219" fg:w="35"/><text x="25.9186%" y="863.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (22 samples, 0.46%)</title><rect x="25.9423%" y="837" width="0.4633%" height="15" fill="rgb(209,150,17)" fg:x="1232" fg:w="22"/><text x="26.1923%" y="847.50"></text></g><g><title>_mi_heap_malloc_zero (22 samples, 0.46%)</title><rect x="25.9423%" y="821" width="0.4633%" height="15" fill="rgb(234,202,34)" fg:x="1232" fg:w="22"/><text x="26.1923%" y="831.50"></text></g><g><title>_mi_heap_malloc_zero_ex (22 samples, 0.46%)</title><rect x="25.9423%" y="805" width="0.4633%" height="15" fill="rgb(253,148,53)" fg:x="1232" fg:w="22"/><text x="26.1923%" y="815.50"></text></g><g><title>mi_heap_malloc_small_zero (1 samples, 0.02%)</title><rect x="26.3845%" y="789" width="0.0211%" height="15" fill="rgb(218,129,16)" fg:x="1253" fg:w="1"/><text x="26.6345%" y="799.50"></text></g><g><title>_mi_heap_get_free_small_page (1 samples, 0.02%)</title><rect x="26.3845%" y="773" width="0.0211%" height="15" fill="rgb(216,85,19)" fg:x="1253" fg:w="1"/><text x="26.6345%" y="783.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3 samples, 0.06%)</title><rect x="26.4056%" y="981" width="0.0632%" height="15" fill="rgb(235,228,7)" fg:x="1254" fg:w="3"/><text x="26.6556%" y="991.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3 samples, 0.06%)</title><rect x="26.4056%" y="965" width="0.0632%" height="15" fill="rgb(245,175,0)" fg:x="1254" fg:w="3"/><text x="26.6556%" y="975.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.02%)</title><rect x="26.4477%" y="949" width="0.0211%" height="15" fill="rgb(208,168,36)" fg:x="1256" fg:w="1"/><text x="26.6977%" y="959.50"></text></g><g><title>mi_page_heap (1 samples, 0.02%)</title><rect x="26.6582%" y="853" width="0.0211%" height="15" fill="rgb(246,171,24)" fg:x="1266" fg:w="1"/><text x="26.9082%" y="863.50"></text></g><g><title>_mi_wsize_from_size (1 samples, 0.02%)</title><rect x="26.8688%" y="805" width="0.0211%" height="15" fill="rgb(215,142,24)" fg:x="1276" fg:w="1"/><text x="27.1188%" y="815.50"></text></g><g><title>mi_heap_page_queue_of (12 samples, 0.25%)</title><rect x="26.6793%" y="837" width="0.2527%" height="15" fill="rgb(250,187,7)" fg:x="1267" fg:w="12"/><text x="26.9293%" y="847.50"></text></g><g><title>mi_bin (5 samples, 0.11%)</title><rect x="26.8267%" y="821" width="0.1053%" height="15" fill="rgb(228,66,33)" fg:x="1274" fg:w="5"/><text x="27.0767%" y="831.50"></text></g><g><title>mi_bsr (2 samples, 0.04%)</title><rect x="26.8899%" y="805" width="0.0421%" height="15" fill="rgb(234,215,21)" fg:x="1277" fg:w="2"/><text x="27.1399%" y="815.50"></text></g><g><title>mi_page_queue_of (14 samples, 0.29%)</title><rect x="26.6793%" y="853" width="0.2948%" height="15" fill="rgb(222,191,20)" fg:x="1267" fg:w="14"/><text x="26.9293%" y="863.50"></text></g><g><title>mi_page_heap (2 samples, 0.04%)</title><rect x="26.9320%" y="837" width="0.0421%" height="15" fill="rgb(245,79,54)" fg:x="1279" fg:w="2"/><text x="27.1820%" y="847.50"></text></g><g><title>_mi_page_retire (26 samples, 0.55%)</title><rect x="26.4687%" y="869" width="0.5475%" height="15" fill="rgb(240,10,37)" fg:x="1257" fg:w="26"/><text x="26.7187%" y="879.50"></text></g><g><title>mi_page_set_has_aligned (2 samples, 0.04%)</title><rect x="26.9741%" y="853" width="0.0421%" height="15" fill="rgb(214,192,32)" fg:x="1281" fg:w="2"/><text x="27.2241%" y="863.50"></text></g><g><title>_mi_segment_page_of (3 samples, 0.06%)</title><rect x="27.1636%" y="853" width="0.0632%" height="15" fill="rgb(209,36,54)" fg:x="1290" fg:w="3"/><text x="27.4136%" y="863.50"></text></g><g><title>mi_slice_first (2 samples, 0.04%)</title><rect x="27.1847%" y="837" width="0.0421%" height="15" fill="rgb(220,10,11)" fg:x="1291" fg:w="2"/><text x="27.4347%" y="847.50"></text></g><g><title>mi_checked_ptr_segment (3 samples, 0.06%)</title><rect x="27.2268%" y="853" width="0.0632%" height="15" fill="rgb(221,106,17)" fg:x="1293" fg:w="3"/><text x="27.4768%" y="863.50"></text></g><g><title>_mi_ptr_segment (3 samples, 0.06%)</title><rect x="27.2268%" y="837" width="0.0632%" height="15" fill="rgb(251,142,44)" fg:x="1293" fg:w="3"/><text x="27.4768%" y="847.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (43 samples, 0.91%)</title><rect x="26.4687%" y="949" width="0.9055%" height="15" fill="rgb(238,13,15)" fg:x="1257" fg:w="43"/><text x="26.7187%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (43 samples, 0.91%)</title><rect x="26.4687%" y="933" width="0.9055%" height="15" fill="rgb(208,107,27)" fg:x="1257" fg:w="43"/><text x="26.7187%" y="943.50"></text></g><g><title>alloc::alloc::dealloc (43 samples, 0.91%)</title><rect x="26.4687%" y="917" width="0.9055%" height="15" fill="rgb(205,136,37)" fg:x="1257" fg:w="43"/><text x="26.7187%" y="927.50"></text></g><g><title>__rust_dealloc (43 samples, 0.91%)</title><rect x="26.4687%" y="901" width="0.9055%" height="15" fill="rgb(250,205,27)" fg:x="1257" fg:w="43"/><text x="26.7187%" y="911.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (43 samples, 0.91%)</title><rect x="26.4687%" y="885" width="0.9055%" height="15" fill="rgb(210,80,43)" fg:x="1257" fg:w="43"/><text x="26.7187%" y="895.50"></text></g><g><title>mi_free (17 samples, 0.36%)</title><rect x="27.0162%" y="869" width="0.3580%" height="15" fill="rgb(247,160,36)" fg:x="1283" fg:w="17"/><text x="27.2662%" y="879.50"></text></g><g><title>mi_free_block_local (4 samples, 0.08%)</title><rect x="27.2900%" y="853" width="0.0842%" height="15" fill="rgb(234,13,49)" fg:x="1296" fg:w="4"/><text x="27.5400%" y="863.50"></text></g><g><title>mi_block_set_next (3 samples, 0.06%)</title><rect x="27.3110%" y="837" width="0.0632%" height="15" fill="rgb(234,122,0)" fg:x="1297" fg:w="3"/><text x="27.5610%" y="847.50"></text></g><g><title>mi_block_set_nextx (3 samples, 0.06%)</title><rect x="27.3110%" y="821" width="0.0632%" height="15" fill="rgb(207,146,38)" fg:x="1297" fg:w="3"/><text x="27.5610%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::{{closure}}::{{closure}}::{{closure}}::_decode_async&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}&gt;&gt;&gt; (50 samples, 1.05%)</title><rect x="26.4687%" y="981" width="1.0529%" height="15" fill="rgb(207,177,25)" fg:x="1257" fg:w="50"/><text x="26.7187%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::{{closure}}::{{closure}}::{{closure}}::_decode_async&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}&gt;&gt; (50 samples, 1.05%)</title><rect x="26.4687%" y="965" width="1.0529%" height="15" fill="rgb(211,178,42)" fg:x="1257" fg:w="50"/><text x="26.7187%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::{{closure}}::{{closure}}::{{closure}}::_decode_async&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}&gt; (7 samples, 0.15%)</title><rect x="27.3742%" y="949" width="0.1474%" height="15" fill="rgb(230,69,54)" fg:x="1300" fg:w="7"/><text x="27.6242%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_length_async&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}&gt; (2 samples, 0.04%)</title><rect x="27.5216%" y="981" width="0.0421%" height="15" fill="rgb(214,135,41)" fg:x="1307" fg:w="2"/><text x="27.7716%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::BytesMut&gt; (19 samples, 0.40%)</title><rect x="27.9848%" y="965" width="0.4001%" height="15" fill="rgb(237,67,25)" fg:x="1329" fg:w="19"/><text x="28.2348%" y="975.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (19 samples, 0.40%)</title><rect x="27.9848%" y="949" width="0.4001%" height="15" fill="rgb(222,189,50)" fg:x="1329" fg:w="19"/><text x="28.2348%" y="959.50"></text></g><g><title>bytes::bytes_mut::release_shared (19 samples, 0.40%)</title><rect x="27.9848%" y="933" width="0.4001%" height="15" fill="rgb(245,148,34)" fg:x="1329" fg:w="19"/><text x="28.2348%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (19 samples, 0.40%)</title><rect x="27.9848%" y="917" width="0.4001%" height="15" fill="rgb(222,29,6)" fg:x="1329" fg:w="19"/><text x="28.2348%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_sub (19 samples, 0.40%)</title><rect x="27.9848%" y="901" width="0.4001%" height="15" fill="rgb(221,189,43)" fg:x="1329" fg:w="19"/><text x="28.2348%" y="911.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (3 samples, 0.06%)</title><rect x="28.3849%" y="965" width="0.0632%" height="15" fill="rgb(207,36,27)" fg:x="1348" fg:w="3"/><text x="28.6349%" y="975.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::remaining (1 samples, 0.02%)</title><rect x="29.3746%" y="917" width="0.0211%" height="15" fill="rgb(217,90,24)" fg:x="1395" fg:w="1"/><text x="29.6246%" y="927.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::remaining (1 samples, 0.02%)</title><rect x="29.3746%" y="901" width="0.0211%" height="15" fill="rgb(224,66,35)" fg:x="1395" fg:w="1"/><text x="29.6246%" y="911.50"></text></g><g><title>bytes::bytes_mut::BytesMut::len (1 samples, 0.02%)</title><rect x="29.3746%" y="885" width="0.0211%" height="15" fill="rgb(221,13,50)" fg:x="1395" fg:w="1"/><text x="29.6246%" y="895.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (2 samples, 0.04%)</title><rect x="29.3746%" y="933" width="0.0421%" height="15" fill="rgb(236,68,49)" fg:x="1395" fg:w="2"/><text x="29.6246%" y="943.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (1 samples, 0.02%)</title><rect x="29.3957%" y="917" width="0.0211%" height="15" fill="rgb(229,146,28)" fg:x="1396" fg:w="1"/><text x="29.6457%" y="927.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (3 samples, 0.06%)</title><rect x="29.4799%" y="901" width="0.0632%" height="15" fill="rgb(225,31,38)" fg:x="1400" fg:w="3"/><text x="29.7299%" y="911.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (7 samples, 0.15%)</title><rect x="29.4167%" y="917" width="0.1474%" height="15" fill="rgb(250,208,3)" fg:x="1397" fg:w="7"/><text x="29.6667%" y="927.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.02%)</title><rect x="29.5431%" y="901" width="0.0211%" height="15" fill="rgb(246,54,23)" fg:x="1403" fg:w="1"/><text x="29.7931%" y="911.50"></text></g><g><title>bytes::bytes_mut::increment_shared (33 samples, 0.69%)</title><rect x="29.5641%" y="901" width="0.6949%" height="15" fill="rgb(243,76,11)" fg:x="1404" fg:w="33"/><text x="29.8141%" y="911.50"></text></g><g><title>bytes::bytes_mut::BytesMut::shallow_clone (35 samples, 0.74%)</title><rect x="29.5641%" y="917" width="0.7370%" height="15" fill="rgb(245,21,50)" fg:x="1404" fg:w="35"/><text x="29.8141%" y="927.50"></text></g><g><title>core::ptr::read (2 samples, 0.04%)</title><rect x="30.2590%" y="901" width="0.0421%" height="15" fill="rgb(228,9,43)" fg:x="1437" fg:w="2"/><text x="30.5090%" y="911.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (43 samples, 0.91%)</title><rect x="29.4167%" y="933" width="0.9055%" height="15" fill="rgb(208,100,47)" fg:x="1397" fg:w="43"/><text x="29.6667%" y="943.50"></text></g><g><title>core::fmt::Arguments::new_v1 (1 samples, 0.02%)</title><rect x="30.3011%" y="917" width="0.0211%" height="15" fill="rgb(232,26,8)" fg:x="1439" fg:w="1"/><text x="30.5511%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (1 samples, 0.02%)</title><rect x="30.3432%" y="853" width="0.0211%" height="15" fill="rgb(216,166,38)" fg:x="1441" fg:w="1"/><text x="30.5932%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="30.3432%" y="837" width="0.0211%" height="15" fill="rgb(251,202,51)" fg:x="1441" fg:w="1"/><text x="30.5932%" y="847.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (1 samples, 0.02%)</title><rect x="30.4906%" y="821" width="0.0211%" height="15" fill="rgb(254,216,34)" fg:x="1448" fg:w="1"/><text x="30.7406%" y="831.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (1 samples, 0.02%)</title><rect x="30.4906%" y="805" width="0.0211%" height="15" fill="rgb(251,32,27)" fg:x="1448" fg:w="1"/><text x="30.7406%" y="815.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (12 samples, 0.25%)</title><rect x="30.4275%" y="837" width="0.2527%" height="15" fill="rgb(208,127,28)" fg:x="1445" fg:w="12"/><text x="30.6775%" y="847.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (8 samples, 0.17%)</title><rect x="30.5117%" y="821" width="0.1685%" height="15" fill="rgb(224,137,22)" fg:x="1449" fg:w="8"/><text x="30.7617%" y="831.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (8 samples, 0.17%)</title><rect x="30.5117%" y="805" width="0.1685%" height="15" fill="rgb(254,70,32)" fg:x="1449" fg:w="8"/><text x="30.7617%" y="815.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (5 samples, 0.11%)</title><rect x="30.5749%" y="789" width="0.1053%" height="15" fill="rgb(229,75,37)" fg:x="1452" fg:w="5"/><text x="30.8249%" y="799.50"></text></g><g><title>memchr::vector::x86avx2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m256i&gt;::movemask (5 samples, 0.11%)</title><rect x="30.5749%" y="773" width="0.1053%" height="15" fill="rgb(252,64,23)" fg:x="1452" fg:w="5"/><text x="30.8249%" y="783.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (5 samples, 0.11%)</title><rect x="30.5749%" y="757" width="0.1053%" height="15" fill="rgb(232,162,48)" fg:x="1452" fg:w="5"/><text x="30.8249%" y="767.50"></text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_line_async::_{{closure}} (109 samples, 2.30%)</title><rect x="28.4481%" y="965" width="2.2952%" height="15" fill="rgb(246,160,12)" fg:x="1351" fg:w="109"/><text x="28.6981%" y="975.50">r..</text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_line (83 samples, 1.75%)</title><rect x="28.9956%" y="949" width="1.7477%" height="15" fill="rgb(247,166,0)" fg:x="1377" fg:w="83"/><text x="29.2456%" y="959.50"></text></g><g><title>memchr::memchr::memchr (20 samples, 0.42%)</title><rect x="30.3222%" y="933" width="0.4211%" height="15" fill="rgb(249,219,21)" fg:x="1440" fg:w="20"/><text x="30.5722%" y="943.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (20 samples, 0.42%)</title><rect x="30.3222%" y="917" width="0.4211%" height="15" fill="rgb(205,209,3)" fg:x="1440" fg:w="20"/><text x="30.5722%" y="927.50"></text></g><g><title>memchr::memchr::memchr::_{{closure}} (20 samples, 0.42%)</title><rect x="30.3222%" y="901" width="0.4211%" height="15" fill="rgb(243,44,1)" fg:x="1440" fg:w="20"/><text x="30.5722%" y="911.50"></text></g><g><title>memchr::memchr::memchr_raw (20 samples, 0.42%)</title><rect x="30.3222%" y="885" width="0.4211%" height="15" fill="rgb(206,159,16)" fg:x="1440" fg:w="20"/><text x="30.5722%" y="895.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (20 samples, 0.42%)</title><rect x="30.3222%" y="869" width="0.4211%" height="15" fill="rgb(244,77,30)" fg:x="1440" fg:w="20"/><text x="30.5722%" y="879.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (18 samples, 0.38%)</title><rect x="30.3643%" y="853" width="0.3790%" height="15" fill="rgb(218,69,12)" fg:x="1442" fg:w="18"/><text x="30.6143%" y="863.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::new_unchecked (3 samples, 0.06%)</title><rect x="30.6801%" y="837" width="0.0632%" height="15" fill="rgb(212,87,7)" fg:x="1457" fg:w="3"/><text x="30.9301%" y="847.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as snafu::OptionExt&lt;T&gt;&gt;::with_context (2 samples, 0.04%)</title><rect x="30.8697%" y="949" width="0.0421%" height="15" fill="rgb(245,114,25)" fg:x="1466" fg:w="2"/><text x="31.1197%" y="959.50"></text></g><g><title>&lt;i128 as core::ops::arith::AddAssign&gt;::add_assign (1 samples, 0.02%)</title><rect x="30.9960%" y="917" width="0.0211%" height="15" fill="rgb(210,61,42)" fg:x="1472" fg:w="1"/><text x="31.2460%" y="927.50"></text></g><g><title>atoi::ascii_to_digit (12 samples, 0.25%)</title><rect x="31.0171%" y="917" width="0.2527%" height="15" fill="rgb(211,52,33)" fg:x="1473" fg:w="12"/><text x="31.2671%" y="927.50"></text></g><g><title>core::cmp::min (1 samples, 0.02%)</title><rect x="31.2697%" y="917" width="0.0211%" height="15" fill="rgb(234,58,33)" fg:x="1485" fg:w="1"/><text x="31.5197%" y="927.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.02%)</title><rect x="31.2697%" y="901" width="0.0211%" height="15" fill="rgb(220,115,36)" fg:x="1485" fg:w="1"/><text x="31.5197%" y="911.50"></text></g><g><title>core::cmp::min_by (1 samples, 0.02%)</title><rect x="31.2697%" y="885" width="0.0211%" height="15" fill="rgb(243,153,54)" fg:x="1485" fg:w="1"/><text x="31.5197%" y="895.50"></text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_decimal_async::_{{closure}} (178 samples, 3.75%)</title><rect x="27.5637%" y="981" width="3.7482%" height="15" fill="rgb(251,47,18)" fg:x="1309" fg:w="178"/><text x="27.8137%" y="991.50">ruti..</text></g><g><title>rutin::util::atoi (27 samples, 0.57%)</title><rect x="30.7433%" y="965" width="0.5685%" height="15" fill="rgb(242,102,42)" fg:x="1460" fg:w="27"/><text x="30.9933%" y="975.50"></text></g><g><title>atoi::atoi (19 samples, 0.40%)</title><rect x="30.9118%" y="949" width="0.4001%" height="15" fill="rgb(234,31,38)" fg:x="1468" fg:w="19"/><text x="31.1618%" y="959.50"></text></g><g><title>&lt;I as atoi::FromRadix10SignedChecked&gt;::from_radix_10_signed_checked (19 samples, 0.40%)</title><rect x="30.9118%" y="933" width="0.4001%" height="15" fill="rgb(221,117,51)" fg:x="1468" fg:w="19"/><text x="31.1618%" y="943.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (1 samples, 0.02%)</title><rect x="31.2908%" y="917" width="0.0211%" height="15" fill="rgb(212,20,18)" fg:x="1486" fg:w="1"/><text x="31.5408%" y="927.50"></text></g><g><title>&lt;I as atoi::FromRadix10SignedChecked&gt;::from_radix_10_signed_checked::_{{closure}} (1 samples, 0.02%)</title><rect x="31.2908%" y="901" width="0.0211%" height="15" fill="rgb(245,133,36)" fg:x="1486" fg:w="1"/><text x="31.5408%" y="911.50"></text></g><g><title>atoi::Sign::try_from (1 samples, 0.02%)</title><rect x="31.2908%" y="885" width="0.0211%" height="15" fill="rgb(212,6,19)" fg:x="1486" fg:w="1"/><text x="31.5408%" y="895.50"></text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::_{{closure}} (1,316 samples, 27.71%)</title><rect x="3.6429%" y="1045" width="27.7111%" height="15" fill="rgb(218,1,36)" fg:x="173" fg:w="1316"/><text x="3.8929%" y="1055.50">rutin::frame::Resp3&lt;bytes::bytes_mut::BytesM..</text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::_{{closure}}::_{{closure}} (1,222 samples, 25.73%)</title><rect x="5.6222%" y="1029" width="25.7317%" height="15" fill="rgb(246,84,54)" fg:x="267" fg:w="1222"/><text x="5.8722%" y="1039.50">rutin::frame::Resp3&lt;bytes::bytes_mut::Byt..</text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::_{{closure}}::_{{closure}}::_{{closure}} (1,160 samples, 24.43%)</title><rect x="6.9278%" y="1013" width="24.4262%" height="15" fill="rgb(242,110,6)" fg:x="329" fg:w="1160"/><text x="7.1778%" y="1023.50">rutin::frame::Resp3&lt;bytes::bytes_mut::B..</text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::_{{closure}}::_{{closure}}::_{{closure}}::_decode_async::_{{closure}} (1,088 samples, 22.91%)</title><rect x="8.4439%" y="997" width="22.9101%" height="15" fill="rgb(214,47,5)" fg:x="401" fg:w="1088"/><text x="8.6939%" y="1007.50">rutin::frame::Resp3&lt;bytes::bytes_mut..</text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::get_u8 (2 samples, 0.04%)</title><rect x="31.3119%" y="981" width="0.0421%" height="15" fill="rgb(218,159,25)" fg:x="1487" fg:w="2"/><text x="31.5619%" y="991.50"></text></g><g><title>bytes::buf::buf_impl::Buf::get_u8 (2 samples, 0.04%)</title><rect x="31.3119%" y="965" width="0.0421%" height="15" fill="rgb(215,211,28)" fg:x="1487" fg:w="2"/><text x="31.5619%" y="975.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (2 samples, 0.04%)</title><rect x="31.3119%" y="949" width="0.0421%" height="15" fill="rgb(238,59,32)" fg:x="1487" fg:w="2"/><text x="31.5619%" y="959.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (2 samples, 0.04%)</title><rect x="31.3119%" y="933" width="0.0421%" height="15" fill="rgb(226,82,3)" fg:x="1487" fg:w="2"/><text x="31.5619%" y="943.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.04%)</title><rect x="31.3119%" y="917" width="0.0421%" height="15" fill="rgb(240,164,32)" fg:x="1487" fg:w="2"/><text x="31.5619%" y="927.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.02%)</title><rect x="31.3750%" y="1029" width="0.0211%" height="15" fill="rgb(232,46,7)" fg:x="1490" fg:w="1"/><text x="31.6250%" y="1039.50"></text></g><g><title>core::ptr::write (21 samples, 0.44%)</title><rect x="31.3961%" y="1029" width="0.4422%" height="15" fill="rgb(229,129,53)" fg:x="1491" fg:w="21"/><text x="31.6461%" y="1039.50"></text></g><g><title>[libc.so.6] (21 samples, 0.44%)</title><rect x="31.3961%" y="1013" width="0.4422%" height="15" fill="rgb(234,188,29)" fg:x="1491" fg:w="21"/><text x="31.6461%" y="1023.50"></text></g><g><title>_mi_memcpy_aligned (33 samples, 0.69%)</title><rect x="31.8593%" y="869" width="0.6949%" height="15" fill="rgb(246,141,4)" fg:x="1513" fg:w="33"/><text x="32.1093%" y="879.50"></text></g><g><title>_mi_memcpy (33 samples, 0.69%)</title><rect x="31.8593%" y="853" width="0.6949%" height="15" fill="rgb(229,23,39)" fg:x="1513" fg:w="33"/><text x="32.1093%" y="863.50"></text></g><g><title>[libc.so.6] (33 samples, 0.69%)</title><rect x="31.8593%" y="837" width="0.6949%" height="15" fill="rgb(206,12,3)" fg:x="1513" fg:w="33"/><text x="32.1093%" y="847.50"></text></g><g><title>_mi_page_retire (1 samples, 0.02%)</title><rect x="32.5542%" y="869" width="0.0211%" height="15" fill="rgb(252,226,20)" fg:x="1546" fg:w="1"/><text x="32.8042%" y="879.50"></text></g><g><title>_mi_page_malloc_zero (5 samples, 0.11%)</title><rect x="32.5753%" y="805" width="0.1053%" height="15" fill="rgb(216,123,35)" fg:x="1547" fg:w="5"/><text x="32.8253%" y="815.50"></text></g><g><title>alloc::alloc::realloc (40 samples, 0.84%)</title><rect x="31.8593%" y="997" width="0.8423%" height="15" fill="rgb(212,68,40)" fg:x="1513" fg:w="40"/><text x="32.1093%" y="1007.50"></text></g><g><title>__rust_realloc (40 samples, 0.84%)</title><rect x="31.8593%" y="981" width="0.8423%" height="15" fill="rgb(254,125,32)" fg:x="1513" fg:w="40"/><text x="32.1093%" y="991.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (40 samples, 0.84%)</title><rect x="31.8593%" y="965" width="0.8423%" height="15" fill="rgb(253,97,22)" fg:x="1513" fg:w="40"/><text x="32.1093%" y="975.50"></text></g><g><title>mi_heap_realloc_aligned (40 samples, 0.84%)</title><rect x="31.8593%" y="949" width="0.8423%" height="15" fill="rgb(241,101,14)" fg:x="1513" fg:w="40"/><text x="32.1093%" y="959.50"></text></g><g><title>mi_heap_realloc_zero_aligned (40 samples, 0.84%)</title><rect x="31.8593%" y="933" width="0.8423%" height="15" fill="rgb(238,103,29)" fg:x="1513" fg:w="40"/><text x="32.1093%" y="943.50"></text></g><g><title>mi_heap_realloc_zero_aligned (40 samples, 0.84%)</title><rect x="31.8593%" y="917" width="0.8423%" height="15" fill="rgb(233,195,47)" fg:x="1513" fg:w="40"/><text x="32.1093%" y="927.50"></text></g><g><title>mi_heap_realloc_zero_aligned_at (40 samples, 0.84%)</title><rect x="31.8593%" y="901" width="0.8423%" height="15" fill="rgb(246,218,30)" fg:x="1513" fg:w="40"/><text x="32.1093%" y="911.50"></text></g><g><title>mi_heap_realloc_zero_aligned_at (40 samples, 0.84%)</title><rect x="31.8593%" y="885" width="0.8423%" height="15" fill="rgb(219,145,47)" fg:x="1513" fg:w="40"/><text x="32.1093%" y="895.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (6 samples, 0.13%)</title><rect x="32.5753%" y="869" width="0.1263%" height="15" fill="rgb(243,12,26)" fg:x="1547" fg:w="6"/><text x="32.8253%" y="879.50"></text></g><g><title>_mi_heap_malloc_zero (6 samples, 0.13%)</title><rect x="32.5753%" y="853" width="0.1263%" height="15" fill="rgb(214,87,16)" fg:x="1547" fg:w="6"/><text x="32.8253%" y="863.50"></text></g><g><title>_mi_heap_malloc_zero_ex (6 samples, 0.13%)</title><rect x="32.5753%" y="837" width="0.1263%" height="15" fill="rgb(208,99,42)" fg:x="1547" fg:w="6"/><text x="32.8253%" y="847.50"></text></g><g><title>_mi_malloc_generic (6 samples, 0.13%)</title><rect x="32.5753%" y="821" width="0.1263%" height="15" fill="rgb(253,99,2)" fg:x="1547" fg:w="6"/><text x="32.8253%" y="831.50"></text></g><g><title>mi_find_page (1 samples, 0.02%)</title><rect x="32.6806%" y="805" width="0.0211%" height="15" fill="rgb(220,168,23)" fg:x="1552" fg:w="1"/><text x="32.9306%" y="815.50"></text></g><g><title>mi_find_free_page (1 samples, 0.02%)</title><rect x="32.6806%" y="789" width="0.0211%" height="15" fill="rgb(242,38,24)" fg:x="1552" fg:w="1"/><text x="32.9306%" y="799.50"></text></g><g><title>_mi_page_free_collect (1 samples, 0.02%)</title><rect x="32.6806%" y="773" width="0.0211%" height="15" fill="rgb(225,182,9)" fg:x="1552" fg:w="1"/><text x="32.9306%" y="783.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::reserve_one_unchecked (44 samples, 0.93%)</title><rect x="31.8383%" y="1029" width="0.9265%" height="15" fill="rgb(243,178,37)" fg:x="1512" fg:w="44"/><text x="32.0883%" y="1039.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::try_grow (43 samples, 0.91%)</title><rect x="31.8593%" y="1013" width="0.9055%" height="15" fill="rgb(232,139,19)" fg:x="1513" fg:w="43"/><text x="32.1093%" y="1023.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.06%)</title><rect x="32.7016%" y="997" width="0.0632%" height="15" fill="rgb(225,201,24)" fg:x="1553" fg:w="3"/><text x="32.9516%" y="1007.50"></text></g><g><title>[libc.so.6] (3 samples, 0.06%)</title><rect x="32.7016%" y="981" width="0.0632%" height="15" fill="rgb(221,47,46)" fg:x="1553" fg:w="3"/><text x="32.9516%" y="991.50"></text></g><g><title>rutin::server::connection::Connection&lt;S&gt;::read_frames::_{{closure}}::_{{closure}} (1,518 samples, 31.96%)</title><rect x="0.8212%" y="1077" width="31.9646%" height="15" fill="rgb(249,23,13)" fg:x="39" fg:w="1518"/><text x="1.0712%" y="1087.50">rutin::server::connection::Connection&lt;S&gt;::read_frame..</text></g><g><title>rutin::server::connection::Connection&lt;S&gt;::read_frames::_{{closure}}::_{{closure}}::_{{closure}} (1,505 samples, 31.69%)</title><rect x="1.0950%" y="1061" width="31.6909%" height="15" fill="rgb(219,9,5)" fg:x="52" fg:w="1505"/><text x="1.3450%" y="1071.50">rutin::server::connection::Connection&lt;S&gt;::read_fram..</text></g><g><title>smallvec::SmallVec&lt;A&gt;::push (68 samples, 1.43%)</title><rect x="31.3540%" y="1045" width="1.4319%" height="15" fill="rgb(254,171,16)" fg:x="1489" fg:w="68"/><text x="31.6040%" y="1055.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple_mut (1 samples, 0.02%)</title><rect x="32.7648%" y="1029" width="0.0211%" height="15" fill="rgb(230,171,20)" fg:x="1556" fg:w="1"/><text x="33.0148%" y="1039.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (35 samples, 0.74%)</title><rect x="33.5439%" y="981" width="0.7370%" height="15" fill="rgb(210,71,41)" fg:x="1593" fg:w="35"/><text x="33.7939%" y="991.50"></text></g><g><title>[libc.so.6] (35 samples, 0.74%)</title><rect x="33.5439%" y="965" width="0.7370%" height="15" fill="rgb(206,173,20)" fg:x="1593" fg:w="35"/><text x="33.7939%" y="975.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (10 samples, 0.21%)</title><rect x="34.2809%" y="981" width="0.2106%" height="15" fill="rgb(233,88,34)" fg:x="1628" fg:w="10"/><text x="34.5309%" y="991.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="34.4704%" y="965" width="0.0211%" height="15" fill="rgb(223,209,46)" fg:x="1637" fg:w="1"/><text x="34.7204%" y="975.50"></text></g><g><title>core::ptr::read (10 samples, 0.21%)</title><rect x="34.5125%" y="965" width="0.2106%" height="15" fill="rgb(250,43,18)" fg:x="1639" fg:w="10"/><text x="34.7625%" y="975.50"></text></g><g><title>[libc.so.6] (10 samples, 0.21%)</title><rect x="34.5125%" y="949" width="0.2106%" height="15" fill="rgb(208,13,10)" fg:x="1639" fg:w="10"/><text x="34.7625%" y="959.50"></text></g><g><title>&lt;smallvec::IntoIter&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.25%)</title><rect x="34.4915%" y="981" width="0.2527%" height="15" fill="rgb(212,200,36)" fg:x="1638" fg:w="12"/><text x="34.7415%" y="991.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::as_ptr (1 samples, 0.02%)</title><rect x="34.7231%" y="965" width="0.0211%" height="15" fill="rgb(225,90,30)" fg:x="1649" fg:w="1"/><text x="34.9731%" y="975.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple (1 samples, 0.02%)</title><rect x="34.7231%" y="949" width="0.0211%" height="15" fill="rgb(236,182,39)" fg:x="1649" fg:w="1"/><text x="34.9731%" y="959.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::spilled (1 samples, 0.02%)</title><rect x="34.7231%" y="933" width="0.0211%" height="15" fill="rgb(212,144,35)" fg:x="1649" fg:w="1"/><text x="34.9731%" y="943.50"></text></g><g><title>[libc.so.6] (2 samples, 0.04%)</title><rect x="34.7442%" y="949" width="0.0421%" height="15" fill="rgb(228,63,44)" fg:x="1650" fg:w="2"/><text x="34.9942%" y="959.50"></text></g><g><title>[libc.so.6] (9 samples, 0.19%)</title><rect x="34.7863%" y="933" width="0.1895%" height="15" fill="rgb(228,109,6)" fg:x="1652" fg:w="9"/><text x="35.0363%" y="943.50"></text></g><g><title>rutin::server::connection::Connection&lt;S&gt;::read_frames::_{{closure}} (10 samples, 0.21%)</title><rect x="34.7863%" y="949" width="0.2106%" height="15" fill="rgb(238,117,24)" fg:x="1652" fg:w="10"/><text x="35.0363%" y="959.50"></text></g><g><title>rutin::server::connection::Connection&lt;S&gt;::read_frames::_{{closure}}::_{{closure}} (1 samples, 0.02%)</title><rect x="34.9758%" y="933" width="0.0211%" height="15" fill="rgb(242,26,26)" fg:x="1661" fg:w="1"/><text x="35.2258%" y="943.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.02%)</title><rect x="34.9968%" y="901" width="0.0211%" height="15" fill="rgb(221,92,48)" fg:x="1662" fg:w="1"/><text x="35.2468%" y="911.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.02%)</title><rect x="34.9968%" y="885" width="0.0211%" height="15" fill="rgb(209,209,32)" fg:x="1662" fg:w="1"/><text x="35.2468%" y="895.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="34.9968%" y="869" width="0.0211%" height="15" fill="rgb(221,70,22)" fg:x="1662" fg:w="1"/><text x="35.2468%" y="879.50"></text></g><g><title>flume::Hook&lt;T,S&gt;::trigger (3 samples, 0.06%)</title><rect x="35.0179%" y="869" width="0.0632%" height="15" fill="rgb(248,145,5)" fg:x="1663" fg:w="3"/><text x="35.2679%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (3 samples, 0.06%)</title><rect x="35.0179%" y="853" width="0.0632%" height="15" fill="rgb(226,116,26)" fg:x="1663" fg:w="3"/><text x="35.2679%" y="863.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (3 samples, 0.06%)</title><rect x="35.0179%" y="837" width="0.0632%" height="15" fill="rgb(244,5,17)" fg:x="1663" fg:w="3"/><text x="35.2679%" y="847.50"></text></g><g><title>alloc::alloc::exchange_malloc (3 samples, 0.06%)</title><rect x="35.0179%" y="821" width="0.0632%" height="15" fill="rgb(252,159,33)" fg:x="1663" fg:w="3"/><text x="35.2679%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.06%)</title><rect x="35.0179%" y="805" width="0.0632%" height="15" fill="rgb(206,71,0)" fg:x="1663" fg:w="3"/><text x="35.2679%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.06%)</title><rect x="35.0179%" y="789" width="0.0632%" height="15" fill="rgb(233,118,54)" fg:x="1663" fg:w="3"/><text x="35.2679%" y="799.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.06%)</title><rect x="35.0179%" y="773" width="0.0632%" height="15" fill="rgb(234,83,48)" fg:x="1663" fg:w="3"/><text x="35.2679%" y="783.50"></text></g><g><title>__rust_alloc (3 samples, 0.06%)</title><rect x="35.0179%" y="757" width="0.0632%" height="15" fill="rgb(228,3,54)" fg:x="1663" fg:w="3"/><text x="35.2679%" y="767.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (3 samples, 0.06%)</title><rect x="35.0179%" y="741" width="0.0632%" height="15" fill="rgb(226,155,13)" fg:x="1663" fg:w="3"/><text x="35.2679%" y="751.50"></text></g><g><title>_mi_page_malloc (3 samples, 0.06%)</title><rect x="35.0179%" y="725" width="0.0632%" height="15" fill="rgb(241,28,37)" fg:x="1663" fg:w="3"/><text x="35.2679%" y="735.50"></text></g><g><title>_mi_page_malloc_zero (3 samples, 0.06%)</title><rect x="35.0179%" y="709" width="0.0632%" height="15" fill="rgb(233,93,10)" fg:x="1663" fg:w="3"/><text x="35.2679%" y="719.50"></text></g><g><title>flume::Shared&lt;T&gt;::recv (6 samples, 0.13%)</title><rect x="35.0179%" y="901" width="0.1263%" height="15" fill="rgb(225,113,19)" fg:x="1663" fg:w="6"/><text x="35.2679%" y="911.50"></text></g><g><title>flume::async::RecvFut&lt;T&gt;::poll_inner::_{{closure}} (6 samples, 0.13%)</title><rect x="35.0179%" y="885" width="0.1263%" height="15" fill="rgb(241,2,18)" fg:x="1663" fg:w="6"/><text x="35.2679%" y="895.50"></text></g><g><title>flume::async::AsyncSignal::new (3 samples, 0.06%)</title><rect x="35.0811%" y="869" width="0.0632%" height="15" fill="rgb(228,207,21)" fg:x="1666" fg:w="3"/><text x="35.3311%" y="879.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (3 samples, 0.06%)</title><rect x="35.0811%" y="853" width="0.0632%" height="15" fill="rgb(213,211,35)" fg:x="1666" fg:w="3"/><text x="35.3311%" y="863.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (3 samples, 0.06%)</title><rect x="35.0811%" y="837" width="0.0632%" height="15" fill="rgb(209,83,10)" fg:x="1666" fg:w="3"/><text x="35.3311%" y="847.50"></text></g><g><title>tokio::runtime::task::core::Header::get_tracing_id (3 samples, 0.06%)</title><rect x="35.0811%" y="821" width="0.0632%" height="15" fill="rgb(209,164,1)" fg:x="1666" fg:w="3"/><text x="35.3311%" y="831.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (3 samples, 0.06%)</title><rect x="35.0811%" y="805" width="0.0632%" height="15" fill="rgb(213,184,43)" fg:x="1666" fg:w="3"/><text x="35.3311%" y="815.50"></text></g><g><title>flume::async::&lt;impl flume::Hook&lt;T,flume::async::AsyncSignal&gt;&gt;::update_waker (1 samples, 0.02%)</title><rect x="35.1442%" y="901" width="0.0211%" height="15" fill="rgb(231,61,34)" fg:x="1669" fg:w="1"/><text x="35.3942%" y="911.50"></text></g><g><title>spin::mutex::Mutex&lt;T,R&gt;::lock (1 samples, 0.02%)</title><rect x="35.1442%" y="885" width="0.0211%" height="15" fill="rgb(235,75,3)" fg:x="1669" fg:w="1"/><text x="35.3942%" y="895.50"></text></g><g><title>spin::mutex::spin::SpinMutex&lt;T,R&gt;::lock (1 samples, 0.02%)</title><rect x="35.1442%" y="869" width="0.0211%" height="15" fill="rgb(220,106,47)" fg:x="1669" fg:w="1"/><text x="35.3942%" y="879.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (1 samples, 0.02%)</title><rect x="35.1442%" y="853" width="0.0211%" height="15" fill="rgb(210,196,33)" fg:x="1669" fg:w="1"/><text x="35.3942%" y="863.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (1 samples, 0.02%)</title><rect x="35.1442%" y="837" width="0.0211%" height="15" fill="rgb(229,154,42)" fg:x="1669" fg:w="1"/><text x="35.3942%" y="847.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (21 samples, 0.44%)</title><rect x="34.7442%" y="981" width="0.4422%" height="15" fill="rgb(228,114,26)" fg:x="1650" fg:w="21"/><text x="34.9942%" y="991.50"></text></g><g><title>rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}}::_{{closure}}::_{{closure}}::_{{closure}}::_{{closure}} (21 samples, 0.44%)</title><rect x="34.7442%" y="965" width="0.4422%" height="15" fill="rgb(208,144,1)" fg:x="1650" fg:w="21"/><text x="34.9942%" y="975.50"></text></g><g><title>rutin::shared::post_office::Inbox::recv_async::_{{closure}} (9 samples, 0.19%)</title><rect x="34.9968%" y="949" width="0.1895%" height="15" fill="rgb(239,112,37)" fg:x="1662" fg:w="9"/><text x="35.2468%" y="959.50"></text></g><g><title>&lt;flume::async::RecvFut&lt;T&gt; as core::future::future::Future&gt;::poll (9 samples, 0.19%)</title><rect x="34.9968%" y="933" width="0.1895%" height="15" fill="rgb(210,96,50)" fg:x="1662" fg:w="9"/><text x="35.2468%" y="943.50"></text></g><g><title>flume::async::RecvFut&lt;T&gt;::poll_inner (9 samples, 0.19%)</title><rect x="34.9968%" y="917" width="0.1895%" height="15" fill="rgb(222,178,2)" fg:x="1662" fg:w="9"/><text x="35.2468%" y="927.50"></text></g><g><title>flume::wait_lock (1 samples, 0.02%)</title><rect x="35.1653%" y="901" width="0.0211%" height="15" fill="rgb(226,74,18)" fg:x="1670" fg:w="1"/><text x="35.4153%" y="911.50"></text></g><g><title>spin::mutex::Mutex&lt;T,R&gt;::try_lock (1 samples, 0.02%)</title><rect x="35.1653%" y="885" width="0.0211%" height="15" fill="rgb(225,67,54)" fg:x="1670" fg:w="1"/><text x="35.4153%" y="895.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.02%)</title><rect x="35.1653%" y="869" width="0.0211%" height="15" fill="rgb(251,92,32)" fg:x="1670" fg:w="1"/><text x="35.4153%" y="879.50"></text></g><g><title>[libc.so.6] (75 samples, 1.58%)</title><rect x="35.1864%" y="981" width="1.5793%" height="15" fill="rgb(228,149,22)" fg:x="1671" fg:w="75"/><text x="35.4364%" y="991.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain (2 samples, 0.04%)</title><rect x="36.7867%" y="901" width="0.0421%" height="15" fill="rgb(243,54,13)" fg:x="1747" fg:w="2"/><text x="37.0367%" y="911.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain_mut (2 samples, 0.04%)</title><rect x="36.7867%" y="885" width="0.0421%" height="15" fill="rgb(243,180,28)" fg:x="1747" fg:w="2"/><text x="37.0367%" y="895.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain::_{{closure}} (2 samples, 0.04%)</title><rect x="36.7867%" y="869" width="0.0421%" height="15" fill="rgb(208,167,24)" fg:x="1747" fg:w="2"/><text x="37.0367%" y="879.50"></text></g><g><title>flume::async::RecvFut&lt;T&gt;::reset_hook::_{{closure}} (2 samples, 0.04%)</title><rect x="36.7867%" y="853" width="0.0421%" height="15" fill="rgb(245,73,45)" fg:x="1747" fg:w="2"/><text x="37.0367%" y="863.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.04%)</title><rect x="36.7867%" y="837" width="0.0421%" height="15" fill="rgb(237,203,48)" fg:x="1747" fg:w="2"/><text x="37.0367%" y="847.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.02%)</title><rect x="36.8288%" y="901" width="0.0211%" height="15" fill="rgb(211,197,16)" fg:x="1749" fg:w="1"/><text x="37.0788%" y="911.50"></text></g><g><title>core::mem::replace (1 samples, 0.02%)</title><rect x="36.8288%" y="885" width="0.0211%" height="15" fill="rgb(243,99,51)" fg:x="1749" fg:w="1"/><text x="37.0788%" y="895.50"></text></g><g><title>core::ptr::read (1 samples, 0.02%)</title><rect x="36.8288%" y="869" width="0.0211%" height="15" fill="rgb(215,123,29)" fg:x="1749" fg:w="1"/><text x="37.0788%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::get_mut_unchecked (1 samples, 0.02%)</title><rect x="36.8499%" y="853" width="0.0211%" height="15" fill="rgb(239,186,37)" fg:x="1750" fg:w="1"/><text x="37.0999%" y="863.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.04%)</title><rect x="36.8499%" y="869" width="0.0421%" height="15" fill="rgb(252,136,39)" fg:x="1750" fg:w="2"/><text x="37.0999%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;flume::Hook&lt;rutin::shared::post_office::Letter,dyn flume::signal::Signal&gt;&gt; (1 samples, 0.02%)</title><rect x="36.8709%" y="853" width="0.0211%" height="15" fill="rgb(223,213,32)" fg:x="1751" fg:w="1"/><text x="37.1209%" y="863.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (1 samples, 0.02%)</title><rect x="36.8709%" y="837" width="0.0211%" height="15" fill="rgb(233,115,5)" fg:x="1751" fg:w="1"/><text x="37.1209%" y="847.50"></text></g><g><title>tokio::runtime::task::core::Header::get_tracing_id (1 samples, 0.02%)</title><rect x="36.8709%" y="821" width="0.0211%" height="15" fill="rgb(207,226,44)" fg:x="1751" fg:w="1"/><text x="37.1209%" y="831.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.02%)</title><rect x="36.8709%" y="805" width="0.0211%" height="15" fill="rgb(208,126,0)" fg:x="1751" fg:w="1"/><text x="37.1209%" y="815.50"></text></g><g><title>mi_free_block_delayed_mt (1 samples, 0.02%)</title><rect x="36.8920%" y="869" width="0.0211%" height="15" fill="rgb(244,66,21)" fg:x="1752" fg:w="1"/><text x="37.1420%" y="879.50"></text></g><g><title>mi_block_set_nextx (1 samples, 0.02%)</title><rect x="36.8920%" y="853" width="0.0211%" height="15" fill="rgb(222,97,12)" fg:x="1752" fg:w="1"/><text x="37.1420%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;flume::Hook&lt;rutin::shared::post_office::Letter,dyn flume::signal::Signal&gt;&gt;&gt; (4 samples, 0.08%)</title><rect x="36.8499%" y="901" width="0.0842%" height="15" fill="rgb(219,213,19)" fg:x="1750" fg:w="4"/><text x="37.0999%" y="911.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.08%)</title><rect x="36.8499%" y="885" width="0.0842%" height="15" fill="rgb(252,169,30)" fg:x="1750" fg:w="4"/><text x="37.0999%" y="895.50"></text></g><g><title>mi_free_block_mt (1 samples, 0.02%)</title><rect x="36.9130%" y="869" width="0.0211%" height="15" fill="rgb(206,32,51)" fg:x="1753" fg:w="1"/><text x="37.1630%" y="879.50"></text></g><g><title>mi_option_is_enabled (1 samples, 0.02%)</title><rect x="36.9130%" y="853" width="0.0211%" height="15" fill="rgb(250,172,42)" fg:x="1753" fg:w="1"/><text x="37.1630%" y="863.50"></text></g><g><title>mi_option_get (1 samples, 0.02%)</title><rect x="36.9130%" y="837" width="0.0211%" height="15" fill="rgb(209,34,43)" fg:x="1753" fg:w="1"/><text x="37.1630%" y="847.50"></text></g><g><title>mi_option_get (1 samples, 0.02%)</title><rect x="36.9130%" y="821" width="0.0211%" height="15" fill="rgb(223,11,35)" fg:x="1753" fg:w="1"/><text x="37.1630%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;(rutin::shared::post_office::Inbox::recv_async::{{closure}},rutin::server::connection::Connection::read_frames::{{closure}})&gt; (11 samples, 0.23%)</title><rect x="36.7656%" y="981" width="0.2316%" height="15" fill="rgb(251,219,26)" fg:x="1746" fg:w="11"/><text x="37.0156%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::shared::post_office::Inbox::recv_async::{{closure}}&gt; (11 samples, 0.23%)</title><rect x="36.7656%" y="965" width="0.2316%" height="15" fill="rgb(231,119,3)" fg:x="1746" fg:w="11"/><text x="37.0156%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;flume::async::RecvFut&lt;rutin::shared::post_office::Letter&gt;&gt; (10 samples, 0.21%)</title><rect x="36.7867%" y="949" width="0.2106%" height="15" fill="rgb(216,97,11)" fg:x="1747" fg:w="10"/><text x="37.0367%" y="959.50"></text></g><g><title>&lt;flume::async::RecvFut&lt;T&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.21%)</title><rect x="36.7867%" y="933" width="0.2106%" height="15" fill="rgb(223,59,9)" fg:x="1747" fg:w="10"/><text x="37.0367%" y="943.50"></text></g><g><title>flume::async::RecvFut&lt;T&gt;::reset_hook (10 samples, 0.21%)</title><rect x="36.7867%" y="917" width="0.2106%" height="15" fill="rgb(233,93,31)" fg:x="1747" fg:w="10"/><text x="37.0367%" y="927.50"></text></g><g><title>flume::wait_lock (3 samples, 0.06%)</title><rect x="36.9341%" y="901" width="0.0632%" height="15" fill="rgb(239,81,33)" fg:x="1754" fg:w="3"/><text x="37.1841%" y="911.50"></text></g><g><title>spin::mutex::Mutex&lt;T,R&gt;::try_lock (3 samples, 0.06%)</title><rect x="36.9341%" y="885" width="0.0632%" height="15" fill="rgb(213,120,34)" fg:x="1754" fg:w="3"/><text x="37.1841%" y="895.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.06%)</title><rect x="36.9341%" y="869" width="0.0632%" height="15" fill="rgb(243,49,53)" fg:x="1754" fg:w="3"/><text x="37.1841%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::cmd::dispatch&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}&gt; (5 samples, 0.11%)</title><rect x="36.9973%" y="981" width="0.1053%" height="15" fill="rgb(247,216,33)" fg:x="1757" fg:w="5"/><text x="37.2473%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (172 samples, 3.62%)</title><rect x="37.2710%" y="965" width="3.6218%" height="15" fill="rgb(226,26,14)" fg:x="1770" fg:w="172"/><text x="37.5210%" y="975.50">core..</text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (172 samples, 3.62%)</title><rect x="37.2710%" y="949" width="3.6218%" height="15" fill="rgb(215,49,53)" fg:x="1770" fg:w="172"/><text x="37.5210%" y="959.50">&lt;byt..</text></g><g><title>bytes::bytes_mut::shared_v_drop (167 samples, 3.52%)</title><rect x="37.3763%" y="933" width="3.5165%" height="15" fill="rgb(245,162,40)" fg:x="1775" fg:w="167"/><text x="37.6263%" y="943.50">byt..</text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (165 samples, 3.47%)</title><rect x="37.4184%" y="917" width="3.4744%" height="15" fill="rgb(229,68,17)" fg:x="1777" fg:w="165"/><text x="37.6684%" y="927.50">&lt;co..</text></g><g><title>bytes::bytes_mut::shared_v_drop::_{{closure}} (165 samples, 3.47%)</title><rect x="37.4184%" y="901" width="3.4744%" height="15" fill="rgb(213,182,10)" fg:x="1777" fg:w="165"/><text x="37.6684%" y="911.50">byt..</text></g><g><title>bytes::bytes_mut::release_shared (164 samples, 3.45%)</title><rect x="37.4395%" y="885" width="3.4534%" height="15" fill="rgb(245,125,30)" fg:x="1778" fg:w="164"/><text x="37.6895%" y="895.50">byt..</text></g><g><title>core::ptr::drop_in_place&lt;rutin::frame::Resp3&gt; (181 samples, 3.81%)</title><rect x="37.1025%" y="981" width="3.8113%" height="15" fill="rgb(232,202,2)" fg:x="1762" fg:w="181"/><text x="37.3525%" y="991.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;ahash::hash_map::AHashMap&lt;rutin::frame::Resp3,rutin::frame::Resp3&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="40.8928%" y="965" width="0.0211%" height="15" fill="rgb(237,140,51)" fg:x="1942" fg:w="1"/><text x="41.1428%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::server::connection::Connection::write_frame&lt;bytes::bytes::Bytes,bytestring::ByteString&gt;::{{closure}}&gt; (11 samples, 0.23%)</title><rect x="40.9139%" y="981" width="0.2316%" height="15" fill="rgb(236,157,25)" fg:x="1943" fg:w="11"/><text x="41.1639%" y="991.50"></text></g><g><title>core::mem::drop (1 samples, 0.02%)</title><rect x="41.1455%" y="933" width="0.0211%" height="15" fill="rgb(219,209,0)" fg:x="1954" fg:w="1"/><text x="41.3955%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;rutin::frame::Resp3&gt;&gt; (1 samples, 0.02%)</title><rect x="41.1455%" y="917" width="0.0211%" height="15" fill="rgb(240,116,54)" fg:x="1954" fg:w="1"/><text x="41.3955%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;rutin::frame::Resp3&gt;&gt; (1 samples, 0.02%)</title><rect x="41.1455%" y="901" width="0.0211%" height="15" fill="rgb(216,10,36)" fg:x="1954" fg:w="1"/><text x="41.3955%" y="911.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="41.1455%" y="885" width="0.0211%" height="15" fill="rgb(222,72,44)" fg:x="1954" fg:w="1"/><text x="41.3955%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="41.1455%" y="869" width="0.0211%" height="15" fill="rgb(232,159,9)" fg:x="1954" fg:w="1"/><text x="41.3955%" y="879.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="41.1455%" y="853" width="0.0211%" height="15" fill="rgb(210,39,32)" fg:x="1954" fg:w="1"/><text x="41.3955%" y="863.50"></text></g><g><title>__rust_dealloc (1 samples, 0.02%)</title><rect x="41.1455%" y="837" width="0.0211%" height="15" fill="rgb(216,194,45)" fg:x="1954" fg:w="1"/><text x="41.3955%" y="847.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (1 samples, 0.02%)</title><rect x="41.1455%" y="821" width="0.0211%" height="15" fill="rgb(218,18,35)" fg:x="1954" fg:w="1"/><text x="41.3955%" y="831.50"></text></g><g><title>mi_free (1 samples, 0.02%)</title><rect x="41.1455%" y="805" width="0.0211%" height="15" fill="rgb(207,83,51)" fg:x="1954" fg:w="1"/><text x="41.3955%" y="815.50"></text></g><g><title>_mi_segment_page_of (1 samples, 0.02%)</title><rect x="41.1455%" y="789" width="0.0211%" height="15" fill="rgb(225,63,43)" fg:x="1954" fg:w="1"/><text x="41.3955%" y="799.50"></text></g><g><title>mi_slice_first (1 samples, 0.02%)</title><rect x="41.1455%" y="773" width="0.0211%" height="15" fill="rgb(207,57,36)" fg:x="1954" fg:w="1"/><text x="41.3955%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;smallvec::IntoIter&lt;[rutin::frame::Resp3: 32]&gt;&gt; (2 samples, 0.04%)</title><rect x="41.1455%" y="981" width="0.0421%" height="15" fill="rgb(216,99,33)" fg:x="1954" fg:w="2"/><text x="41.3955%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;smallvec::SmallVec&lt;[rutin::frame::Resp3: 32]&gt;&gt; (2 samples, 0.04%)</title><rect x="41.1455%" y="965" width="0.0421%" height="15" fill="rgb(225,42,16)" fg:x="1954" fg:w="2"/><text x="41.3955%" y="975.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.04%)</title><rect x="41.1455%" y="949" width="0.0421%" height="15" fill="rgb(220,201,45)" fg:x="1954" fg:w="2"/><text x="41.3955%" y="959.50"></text></g><g><title>smallvec::SmallVecData&lt;A&gt;::heap_mut (1 samples, 0.02%)</title><rect x="41.1666%" y="933" width="0.0211%" height="15" fill="rgb(225,33,4)" fg:x="1955" fg:w="1"/><text x="41.4166%" y="943.50"></text></g><g><title>&lt;tracing_core::metadata::Level as core::cmp::PartialOrd&lt;tracing_core::metadata::LevelFilter&gt;&gt;::le (1 samples, 0.02%)</title><rect x="41.4824%" y="965" width="0.0211%" height="15" fill="rgb(224,33,50)" fg:x="1970" fg:w="1"/><text x="41.7324%" y="975.50"></text></g><g><title>[libc.so.6] (278 samples, 5.85%)</title><rect x="41.5035%" y="965" width="5.8539%" height="15" fill="rgb(246,198,51)" fg:x="1971" fg:w="278"/><text x="41.7535%" y="975.50">[libc.s..</text></g><g><title>core::ptr::drop_in_place&lt;rutin::cmd::dispatch&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}::{{closure}}&gt; (1 samples, 0.02%)</title><rect x="47.3573%" y="965" width="0.0211%" height="15" fill="rgb(205,22,4)" fg:x="2249" fg:w="1"/><text x="47.6073%" y="975.50"></text></g><g><title>&lt;tracing_core::metadata::Level as core::cmp::PartialOrd&lt;tracing_core::metadata::LevelFilter&gt;&gt;::le (1 samples, 0.02%)</title><rect x="48.8524%" y="949" width="0.0211%" height="15" fill="rgb(206,3,8)" fg:x="2320" fg:w="1"/><text x="49.1024%" y="959.50"></text></g><g><title>[libc.so.6] (56 samples, 1.18%)</title><rect x="48.8734%" y="949" width="1.1792%" height="15" fill="rgb(251,23,15)" fg:x="2321" fg:w="56"/><text x="49.1234%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::cmd::dispatch&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}::{{closure}}::{{closure}}&gt; (6 samples, 0.13%)</title><rect x="50.0526%" y="949" width="0.1263%" height="15" fill="rgb(252,88,28)" fg:x="2377" fg:w="6"/><text x="50.3026%" y="959.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (24 samples, 0.51%)</title><rect x="51.6951%" y="933" width="0.5054%" height="15" fill="rgb(212,127,14)" fg:x="2455" fg:w="24"/><text x="51.9451%" y="943.50"></text></g><g><title>&lt;rutin::cmd::CmdUnparsed as core::convert::TryFrom&lt;rutin::frame::Resp3&gt;&gt;::try_from (19 samples, 0.40%)</title><rect x="51.8004%" y="917" width="0.4001%" height="15" fill="rgb(247,145,37)" fg:x="2460" fg:w="19"/><text x="52.0504%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;ahash::hash_map::AHashMap&lt;rutin::frame::Resp3,rutin::frame::Resp3&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="52.1794%" y="901" width="0.0211%" height="15" fill="rgb(209,117,53)" fg:x="2478" fg:w="1"/><text x="52.4294%" y="911.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (26 samples, 0.55%)</title><rect x="52.2005%" y="933" width="0.5475%" height="15" fill="rgb(212,90,42)" fg:x="2479" fg:w="26"/><text x="52.4505%" y="943.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_empty (1 samples, 0.02%)</title><rect x="52.9796%" y="901" width="0.0211%" height="15" fill="rgb(218,164,37)" fg:x="2516" fg:w="1"/><text x="53.2296%" y="911.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (14 samples, 0.29%)</title><rect x="52.7901%" y="917" width="0.2948%" height="15" fill="rgb(246,65,34)" fg:x="2507" fg:w="14"/><text x="53.0401%" y="927.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (4 samples, 0.08%)</title><rect x="53.0006%" y="901" width="0.0842%" height="15" fill="rgb(231,100,33)" fg:x="2517" fg:w="4"/><text x="53.2506%" y="911.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (4 samples, 0.08%)</title><rect x="53.0006%" y="885" width="0.0842%" height="15" fill="rgb(228,126,14)" fg:x="2517" fg:w="4"/><text x="53.2506%" y="895.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (4 samples, 0.08%)</title><rect x="53.0006%" y="869" width="0.0842%" height="15" fill="rgb(215,173,21)" fg:x="2517" fg:w="4"/><text x="53.2506%" y="879.50"></text></g><g><title>&lt;rutin::cmd::CmdUnparsed as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (19 samples, 0.40%)</title><rect x="53.4849%" y="901" width="0.4001%" height="15" fill="rgb(210,6,40)" fg:x="2540" fg:w="19"/><text x="53.7349%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;ahash::hash_map::AHashMap&lt;rutin::frame::Resp3,rutin::frame::Resp3&gt;&gt;&gt; (19 samples, 0.40%)</title><rect x="53.4849%" y="885" width="0.4001%" height="15" fill="rgb(212,48,18)" fg:x="2540" fg:w="19"/><text x="53.7349%" y="895.50"></text></g><g><title>&lt;rutin::cmd::CmdUnparsed as core::iter::traits::iterator::Iterator&gt;::next (115 samples, 2.42%)</title><rect x="52.7479%" y="933" width="2.4216%" height="15" fill="rgb(230,214,11)" fg:x="2505" fg:w="115"/><text x="52.9979%" y="943.50">&lt;r..</text></g><g><title>core::option::Option&lt;T&gt;::and_then (99 samples, 2.08%)</title><rect x="53.0849%" y="917" width="2.0846%" height="15" fill="rgb(254,105,39)" fg:x="2521" fg:w="99"/><text x="53.3349%" y="927.50">c..</text></g><g><title>[libc.so.6] (61 samples, 1.28%)</title><rect x="53.8850%" y="901" width="1.2845%" height="15" fill="rgb(245,158,5)" fg:x="2559" fg:w="61"/><text x="54.1350%" y="911.50"></text></g><g><title>[libc.so.6] (69 samples, 1.45%)</title><rect x="55.1695%" y="933" width="1.4529%" height="15" fill="rgb(249,208,11)" fg:x="2620" fg:w="69"/><text x="55.4195%" y="943.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or_else (3 samples, 0.06%)</title><rect x="56.6224%" y="933" width="0.0632%" height="15" fill="rgb(210,39,28)" fg:x="2689" fg:w="3"/><text x="56.8724%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;rutin::cmd::commands::str::Get as rutin::cmd::CmdExecutor&gt;::apply&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}&gt; (2 samples, 0.04%)</title><rect x="56.6856%" y="933" width="0.0421%" height="15" fill="rgb(211,56,53)" fg:x="2692" fg:w="2"/><text x="56.9356%" y="943.50"></text></g><g><title>_mi_segment_page_of (1 samples, 0.02%)</title><rect x="57.1068%" y="661" width="0.0211%" height="15" fill="rgb(226,201,30)" fg:x="2712" fg:w="1"/><text x="57.3568%" y="671.50"></text></g><g><title>mi_slice_first (1 samples, 0.02%)</title><rect x="57.1068%" y="645" width="0.0211%" height="15" fill="rgb(239,101,34)" fg:x="2712" fg:w="1"/><text x="57.3568%" y="655.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (19 samples, 0.40%)</title><rect x="56.7488%" y="901" width="0.4001%" height="15" fill="rgb(226,209,5)" fg:x="2695" fg:w="19"/><text x="56.9988%" y="911.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (19 samples, 0.40%)</title><rect x="56.7488%" y="885" width="0.4001%" height="15" fill="rgb(250,105,47)" fg:x="2695" fg:w="19"/><text x="56.9988%" y="895.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop::_{{closure}} (19 samples, 0.40%)</title><rect x="56.7488%" y="869" width="0.4001%" height="15" fill="rgb(230,72,3)" fg:x="2695" fg:w="19"/><text x="56.9988%" y="879.50"></text></g><g><title>bytes::bytes_mut::release_shared (18 samples, 0.38%)</title><rect x="56.7698%" y="853" width="0.3790%" height="15" fill="rgb(232,218,39)" fg:x="2696" fg:w="18"/><text x="57.0198%" y="863.50"></text></g><g><title>core::mem::drop (3 samples, 0.06%)</title><rect x="57.0857%" y="837" width="0.0632%" height="15" fill="rgb(248,166,6)" fg:x="2711" fg:w="3"/><text x="57.3357%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;bytes::bytes_mut::Shared&gt;&gt; (3 samples, 0.06%)</title><rect x="57.0857%" y="821" width="0.0632%" height="15" fill="rgb(247,89,20)" fg:x="2711" fg:w="3"/><text x="57.3357%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::Shared&gt; (2 samples, 0.04%)</title><rect x="57.1068%" y="805" width="0.0421%" height="15" fill="rgb(248,130,54)" fg:x="2712" fg:w="2"/><text x="57.3568%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.04%)</title><rect x="57.1068%" y="789" width="0.0421%" height="15" fill="rgb(234,196,4)" fg:x="2712" fg:w="2"/><text x="57.3568%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.04%)</title><rect x="57.1068%" y="773" width="0.0421%" height="15" fill="rgb(250,143,31)" fg:x="2712" fg:w="2"/><text x="57.3568%" y="783.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.04%)</title><rect x="57.1068%" y="757" width="0.0421%" height="15" fill="rgb(211,110,34)" fg:x="2712" fg:w="2"/><text x="57.3568%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.04%)</title><rect x="57.1068%" y="741" width="0.0421%" height="15" fill="rgb(215,124,48)" fg:x="2712" fg:w="2"/><text x="57.3568%" y="751.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.04%)</title><rect x="57.1068%" y="725" width="0.0421%" height="15" fill="rgb(216,46,13)" fg:x="2712" fg:w="2"/><text x="57.3568%" y="735.50"></text></g><g><title>__rust_dealloc (2 samples, 0.04%)</title><rect x="57.1068%" y="709" width="0.0421%" height="15" fill="rgb(205,184,25)" fg:x="2712" fg:w="2"/><text x="57.3568%" y="719.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (2 samples, 0.04%)</title><rect x="57.1068%" y="693" width="0.0421%" height="15" fill="rgb(228,1,10)" fg:x="2712" fg:w="2"/><text x="57.3568%" y="703.50"></text></g><g><title>mi_free (2 samples, 0.04%)</title><rect x="57.1068%" y="677" width="0.0421%" height="15" fill="rgb(213,116,27)" fg:x="2712" fg:w="2"/><text x="57.3568%" y="687.50"></text></g><g><title>mi_checked_ptr_segment (1 samples, 0.02%)</title><rect x="57.1278%" y="661" width="0.0211%" height="15" fill="rgb(241,95,50)" fg:x="2713" fg:w="1"/><text x="57.3778%" y="671.50"></text></g><g><title>_mi_ptr_segment (1 samples, 0.02%)</title><rect x="57.1278%" y="645" width="0.0211%" height="15" fill="rgb(238,48,32)" fg:x="2713" fg:w="1"/><text x="57.3778%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (22 samples, 0.46%)</title><rect x="56.7277%" y="933" width="0.4633%" height="15" fill="rgb(235,113,49)" fg:x="2694" fg:w="22"/><text x="56.9777%" y="943.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (22 samples, 0.46%)</title><rect x="56.7277%" y="917" width="0.4633%" height="15" fill="rgb(205,127,43)" fg:x="2694" fg:w="22"/><text x="56.9777%" y="927.50"></text></g><g><title>mi_free_block_delayed_mt (2 samples, 0.04%)</title><rect x="57.1489%" y="901" width="0.0421%" height="15" fill="rgb(250,162,2)" fg:x="2714" fg:w="2"/><text x="57.3989%" y="911.50"></text></g><g><title>core::str::converts::from_utf8 (19 samples, 0.40%)</title><rect x="57.1910%" y="933" width="0.4001%" height="15" fill="rgb(220,13,41)" fg:x="2716" fg:w="19"/><text x="57.4410%" y="943.50"></text></g><g><title>core::str::validations::run_utf8_validation (10 samples, 0.21%)</title><rect x="57.3805%" y="917" width="0.2106%" height="15" fill="rgb(249,221,25)" fg:x="2725" fg:w="10"/><text x="57.6305%" y="927.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (2 samples, 0.04%)</title><rect x="57.5490%" y="901" width="0.0421%" height="15" fill="rgb(215,208,19)" fg:x="2733" fg:w="2"/><text x="57.7990%" y="911.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (14 samples, 0.29%)</title><rect x="57.5911%" y="933" width="0.2948%" height="15" fill="rgb(236,175,2)" fg:x="2735" fg:w="14"/><text x="57.8411%" y="943.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (14 samples, 0.29%)</title><rect x="57.5911%" y="917" width="0.2948%" height="15" fill="rgb(241,52,2)" fg:x="2735" fg:w="14"/><text x="57.8411%" y="927.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (14 samples, 0.29%)</title><rect x="57.5911%" y="901" width="0.2948%" height="15" fill="rgb(248,140,14)" fg:x="2735" fg:w="14"/><text x="57.8411%" y="911.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (14 samples, 0.29%)</title><rect x="57.5911%" y="885" width="0.2948%" height="15" fill="rgb(253,22,42)" fg:x="2735" fg:w="14"/><text x="57.8411%" y="895.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (5 samples, 0.11%)</title><rect x="59.2125%" y="917" width="0.1053%" height="15" fill="rgb(234,61,47)" fg:x="2812" fg:w="5"/><text x="59.4625%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::cmd::commands::str::Get&gt; (36 samples, 0.76%)</title><rect x="61.8025%" y="869" width="0.7581%" height="15" fill="rgb(208,226,15)" fg:x="2935" fg:w="36"/><text x="62.0525%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::shared::db::object::str::Str&gt; (36 samples, 0.76%)</title><rect x="61.8025%" y="853" width="0.7581%" height="15" fill="rgb(217,221,4)" fg:x="2935" fg:w="36"/><text x="62.0525%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (36 samples, 0.76%)</title><rect x="61.8025%" y="837" width="0.7581%" height="15" fill="rgb(212,174,34)" fg:x="2935" fg:w="36"/><text x="62.0525%" y="847.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (36 samples, 0.76%)</title><rect x="61.8025%" y="821" width="0.7581%" height="15" fill="rgb(253,83,4)" fg:x="2935" fg:w="36"/><text x="62.0525%" y="831.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (36 samples, 0.76%)</title><rect x="61.8025%" y="805" width="0.7581%" height="15" fill="rgb(250,195,49)" fg:x="2935" fg:w="36"/><text x="62.0525%" y="815.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (36 samples, 0.76%)</title><rect x="61.8025%" y="789" width="0.7581%" height="15" fill="rgb(241,192,25)" fg:x="2935" fg:w="36"/><text x="62.0525%" y="799.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop::_{{closure}} (36 samples, 0.76%)</title><rect x="61.8025%" y="773" width="0.7581%" height="15" fill="rgb(208,124,10)" fg:x="2935" fg:w="36"/><text x="62.0525%" y="783.50"></text></g><g><title>bytes::bytes_mut::release_shared (33 samples, 0.69%)</title><rect x="61.8657%" y="757" width="0.6949%" height="15" fill="rgb(222,33,0)" fg:x="2938" fg:w="33"/><text x="62.1157%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.02%)</title><rect x="62.5395%" y="741" width="0.0211%" height="15" fill="rgb(234,209,28)" fg:x="2970" fg:w="1"/><text x="62.7895%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.02%)</title><rect x="62.5395%" y="725" width="0.0211%" height="15" fill="rgb(224,11,23)" fg:x="2970" fg:w="1"/><text x="62.7895%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::shared::db::Db::visit_object&lt;&lt;rutin::cmd::commands::key::Ttl as rutin::cmd::CmdExecutor&gt;::execute&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;::{{closure}}&gt; (9 samples, 0.19%)</title><rect x="62.5605%" y="869" width="0.1895%" height="15" fill="rgb(232,99,1)" fg:x="2971" fg:w="9"/><text x="62.8105%" y="879.50"></text></g><g><title>[libc.so.6] (62 samples, 1.31%)</title><rect x="63.2765%" y="853" width="1.3055%" height="15" fill="rgb(237,95,45)" fg:x="3005" fg:w="62"/><text x="63.5265%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::shared::db::Db::visit_object&lt;&lt;rutin::cmd::commands::key::Ttl as rutin::cmd::CmdExecutor&gt;::execute&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;::{{closure}}::{{closure}}&gt; (3 samples, 0.06%)</title><rect x="64.5820%" y="853" width="0.0632%" height="15" fill="rgb(208,109,11)" fg:x="3067" fg:w="3"/><text x="64.8320%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;rutin::frame::Resp3&gt;&gt; (1 samples, 0.02%)</title><rect x="65.7191%" y="821" width="0.0211%" height="15" fill="rgb(216,190,48)" fg:x="3121" fg:w="1"/><text x="65.9691%" y="831.50"></text></g><g><title>rutin::shared::db::object::ObjectInner::on_str (2 samples, 0.04%)</title><rect x="65.7402%" y="821" width="0.0421%" height="15" fill="rgb(251,171,36)" fg:x="3122" fg:w="2"/><text x="65.9902%" y="831.50"></text></g><g><title>bytes::bytes_mut::increment_shared (165 samples, 3.47%)</title><rect x="65.8033%" y="773" width="3.4744%" height="15" fill="rgb(230,62,22)" fg:x="3125" fg:w="165"/><text x="66.0533%" y="783.50">byt..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.02%)</title><rect x="69.2567%" y="757" width="0.0211%" height="15" fill="rgb(225,114,35)" fg:x="3289" fg:w="1"/><text x="69.5067%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.02%)</title><rect x="69.2567%" y="741" width="0.0211%" height="15" fill="rgb(215,118,42)" fg:x="3289" fg:w="1"/><text x="69.5067%" y="751.50"></text></g><g><title>&lt;rutin::cmd::commands::str::Get as rutin::cmd::CmdExecutor&gt;::execute::_{{closure}}::_{{closure}}::_{{closure}}::_{{closure}} (182 samples, 3.83%)</title><rect x="65.5085%" y="837" width="3.8324%" height="15" fill="rgb(243,119,21)" fg:x="3111" fg:w="182"/><text x="65.7585%" y="847.50">&lt;rut..</text></g><g><title>rutin::shared::db::object::str::Str::to_bytes (169 samples, 3.56%)</title><rect x="65.7823%" y="821" width="3.5586%" height="15" fill="rgb(252,177,53)" fg:x="3124" fg:w="169"/><text x="66.0323%" y="831.50">ruti..</text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (169 samples, 3.56%)</title><rect x="65.7823%" y="805" width="3.5586%" height="15" fill="rgb(237,209,29)" fg:x="3124" fg:w="169"/><text x="66.0323%" y="815.50">&lt;byt..</text></g><g><title>bytes::bytes_mut::shared_v_clone (168 samples, 3.54%)</title><rect x="65.8033%" y="789" width="3.5376%" height="15" fill="rgb(212,65,23)" fg:x="3125" fg:w="168"/><text x="66.0533%" y="799.50">byt..</text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (3 samples, 0.06%)</title><rect x="69.2777%" y="773" width="0.0632%" height="15" fill="rgb(230,222,46)" fg:x="3290" fg:w="3"/><text x="69.5277%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 0.06%)</title><rect x="69.2777%" y="757" width="0.0632%" height="15" fill="rgb(215,135,32)" fg:x="3290" fg:w="3"/><text x="69.5277%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;dashmap::mapref::one::Ref&lt;rutin::shared::db::object::str::Str,rutin::shared::db::object::Object&gt;&gt; (213 samples, 4.49%)</title><rect x="69.3409%" y="837" width="4.4852%" height="15" fill="rgb(246,101,22)" fg:x="3293" fg:w="213"/><text x="69.5909%" y="847.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::raw::inner::RawTable&lt;(rutin::shared::db::object::str::Str,dashmap::util::SharedValue&lt;rutin::shared::db::object::Object&gt;)&gt;&gt;&gt; (213 samples, 4.49%)</title><rect x="69.3409%" y="821" width="4.4852%" height="15" fill="rgb(206,107,13)" fg:x="3293" fg:w="213"/><text x="69.5909%" y="831.50">core:..</text></g><g><title>&lt;lock_api::rwlock::RwLockReadGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (213 samples, 4.49%)</title><rect x="69.3409%" y="805" width="4.4852%" height="15" fill="rgb(250,100,44)" fg:x="3293" fg:w="213"/><text x="69.5909%" y="815.50">&lt;lock..</text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_shared (213 samples, 4.49%)</title><rect x="69.3409%" y="789" width="4.4852%" height="15" fill="rgb(231,147,38)" fg:x="3293" fg:w="213"/><text x="69.5909%" y="799.50">&lt;dash..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (213 samples, 4.49%)</title><rect x="69.3409%" y="773" width="4.4852%" height="15" fill="rgb(229,8,40)" fg:x="3293" fg:w="213"/><text x="69.5909%" y="783.50">core:..</text></g><g><title>core::sync::atomic::atomic_sub (213 samples, 4.49%)</title><rect x="69.3409%" y="757" width="4.4852%" height="15" fill="rgb(221,135,30)" fg:x="3293" fg:w="213"/><text x="69.5909%" y="767.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;rutin::shared::db::Db::get::{{closure}}&gt; (1 samples, 0.02%)</title><rect x="73.8261%" y="837" width="0.0211%" height="15" fill="rgb(249,193,18)" fg:x="3506" fg:w="1"/><text x="74.0761%" y="847.50"></text></g><g><title>[libc.so.6] (35 samples, 0.74%)</title><rect x="74.7105%" y="821" width="0.7370%" height="15" fill="rgb(209,133,39)" fg:x="3548" fg:w="35"/><text x="74.9605%" y="831.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.02%)</title><rect x="77.2794%" y="757" width="0.0211%" height="15" fill="rgb(232,100,14)" fg:x="3670" fg:w="1"/><text x="77.5294%" y="767.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.02%)</title><rect x="77.2794%" y="741" width="0.0211%" height="15" fill="rgb(224,185,1)" fg:x="3670" fg:w="1"/><text x="77.5294%" y="751.50"></text></g><g><title>core::slice::index::get_noubcheck (1 samples, 0.02%)</title><rect x="77.2794%" y="725" width="0.0211%" height="15" fill="rgb(223,139,8)" fg:x="3670" fg:w="1"/><text x="77.5294%" y="735.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (52 samples, 1.09%)</title><rect x="78.7324%" y="709" width="1.0950%" height="15" fill="rgb(232,213,38)" fg:x="3739" fg:w="52"/><text x="78.9824%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (40 samples, 0.84%)</title><rect x="79.8273%" y="709" width="0.8423%" height="15" fill="rgb(207,94,22)" fg:x="3791" fg:w="40"/><text x="80.0773%" y="719.50"></text></g><g><title>core::hint::spin_loop (25 samples, 0.53%)</title><rect x="80.6907%" y="677" width="0.5264%" height="15" fill="rgb(219,183,54)" fg:x="3832" fg:w="25"/><text x="80.9407%" y="687.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (25 samples, 0.53%)</title><rect x="80.6907%" y="661" width="0.5264%" height="15" fill="rgb(216,185,54)" fg:x="3832" fg:w="25"/><text x="80.9407%" y="671.50"></text></g><g><title>dashmap::lock::RawRwLock::lock_shared_slow (135 samples, 2.84%)</title><rect x="78.6692%" y="725" width="2.8427%" height="15" fill="rgb(254,217,39)" fg:x="3736" fg:w="135"/><text x="78.9192%" y="735.50">da..</text></g><g><title>parking_lot_core::spinwait::SpinWait::spin_no_yield (40 samples, 0.84%)</title><rect x="80.6696%" y="709" width="0.8423%" height="15" fill="rgb(240,178,23)" fg:x="3831" fg:w="40"/><text x="80.9196%" y="719.50"></text></g><g><title>parking_lot_core::spinwait::cpu_relax (39 samples, 0.82%)</title><rect x="80.6907%" y="693" width="0.8212%" height="15" fill="rgb(218,11,47)" fg:x="3832" fg:w="39"/><text x="80.9407%" y="703.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (14 samples, 0.29%)</title><rect x="81.2171%" y="677" width="0.2948%" height="15" fill="rgb(218,51,51)" fg:x="3857" fg:w="14"/><text x="81.4671%" y="687.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (14 samples, 0.29%)</title><rect x="81.2171%" y="661" width="0.2948%" height="15" fill="rgb(238,126,27)" fg:x="3857" fg:w="14"/><text x="81.4671%" y="671.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_read_shard (404 samples, 8.51%)</title><rect x="77.1952%" y="773" width="8.5071%" height="15" fill="rgb(249,202,22)" fg:x="3666" fg:w="404"/><text x="77.4452%" y="783.50">&lt;dashmap::Da..</text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::read (399 samples, 8.40%)</title><rect x="77.3005%" y="757" width="8.4018%" height="15" fill="rgb(254,195,49)" fg:x="3671" fg:w="399"/><text x="77.5505%" y="767.50">lock_api::rw..</text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_shared (399 samples, 8.40%)</title><rect x="77.3005%" y="741" width="8.4018%" height="15" fill="rgb(208,123,14)" fg:x="3671" fg:w="399"/><text x="77.5505%" y="751.50">&lt;dashmap::lo..</text></g><g><title>dashmap::lock::RawRwLock::try_lock_shared_fast (199 samples, 4.19%)</title><rect x="81.5119%" y="725" width="4.1904%" height="15" fill="rgb(224,200,8)" fg:x="3871" fg:w="199"/><text x="81.7619%" y="735.50">dashm..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (199 samples, 4.19%)</title><rect x="81.5119%" y="709" width="4.1904%" height="15" fill="rgb(217,61,36)" fg:x="3871" fg:w="199"/><text x="81.7619%" y="719.50">core:..</text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::determine_shard (3 samples, 0.06%)</title><rect x="85.7023%" y="773" width="0.0632%" height="15" fill="rgb(206,35,45)" fg:x="4070" fg:w="3"/><text x="85.9523%" y="783.50"></text></g><g><title>ahash::operations::folded_multiply (5 samples, 0.11%)</title><rect x="85.7654%" y="741" width="0.1053%" height="15" fill="rgb(217,65,33)" fg:x="4073" fg:w="5"/><text x="86.0154%" y="751.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (3 samples, 0.06%)</title><rect x="85.8075%" y="725" width="0.0632%" height="15" fill="rgb(222,158,48)" fg:x="4075" fg:w="3"/><text x="86.0575%" y="735.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (6 samples, 0.13%)</title><rect x="85.7654%" y="757" width="0.1263%" height="15" fill="rgb(254,2,54)" fg:x="4073" fg:w="6"/><text x="86.0154%" y="767.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.02%)</title><rect x="85.8707%" y="741" width="0.0211%" height="15" fill="rgb(250,143,38)" fg:x="4078" fg:w="1"/><text x="86.1207%" y="751.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::hash::Hash&gt;::hash (5 samples, 0.11%)</title><rect x="86.1023%" y="725" width="0.1053%" height="15" fill="rgb(248,25,0)" fg:x="4089" fg:w="5"/><text x="86.3523%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (5 samples, 0.11%)</title><rect x="86.1023%" y="709" width="0.1053%" height="15" fill="rgb(206,152,27)" fg:x="4089" fg:w="5"/><text x="86.3523%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (5 samples, 0.11%)</title><rect x="86.1023%" y="693" width="0.1053%" height="15" fill="rgb(240,77,30)" fg:x="4089" fg:w="5"/><text x="86.3523%" y="703.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (5 samples, 0.11%)</title><rect x="86.1023%" y="677" width="0.1053%" height="15" fill="rgb(231,5,3)" fg:x="4089" fg:w="5"/><text x="86.3523%" y="687.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (1 samples, 0.02%)</title><rect x="86.1866%" y="661" width="0.0211%" height="15" fill="rgb(207,226,32)" fg:x="4093" fg:w="1"/><text x="86.4366%" y="671.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_u64 (30 samples, 0.63%)</title><rect x="85.7654%" y="773" width="0.6317%" height="15" fill="rgb(222,207,47)" fg:x="4073" fg:w="30"/><text x="86.0154%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (24 samples, 0.51%)</title><rect x="85.8918%" y="757" width="0.5054%" height="15" fill="rgb(229,115,45)" fg:x="4079" fg:w="24"/><text x="86.1418%" y="767.50"></text></g><g><title>&lt;rutin::shared::db::object::str::Str as core::hash::Hash&gt;::hash (24 samples, 0.51%)</title><rect x="85.8918%" y="741" width="0.5054%" height="15" fill="rgb(224,191,6)" fg:x="4079" fg:w="24"/><text x="86.1418%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (9 samples, 0.19%)</title><rect x="86.2076%" y="725" width="0.1895%" height="15" fill="rgb(230,227,24)" fg:x="4094" fg:w="9"/><text x="86.4576%" y="735.50"></text></g><g><title>core::hash::Hasher::write_isize (9 samples, 0.19%)</title><rect x="86.2076%" y="709" width="0.1895%" height="15" fill="rgb(228,80,19)" fg:x="4094" fg:w="9"/><text x="86.4576%" y="719.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (9 samples, 0.19%)</title><rect x="86.2076%" y="693" width="0.1895%" height="15" fill="rgb(247,229,0)" fg:x="4094" fg:w="9"/><text x="86.4576%" y="703.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (9 samples, 0.19%)</title><rect x="86.2076%" y="677" width="0.1895%" height="15" fill="rgb(237,194,15)" fg:x="4094" fg:w="9"/><text x="86.4576%" y="687.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (9 samples, 0.19%)</title><rect x="86.2076%" y="661" width="0.1895%" height="15" fill="rgb(219,203,20)" fg:x="4094" fg:w="9"/><text x="86.4576%" y="671.50"></text></g><g><title>ahash::operations::folded_multiply (2 samples, 0.04%)</title><rect x="86.3550%" y="645" width="0.0421%" height="15" fill="rgb(234,128,8)" fg:x="4101" fg:w="2"/><text x="86.6050%" y="655.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (2 samples, 0.04%)</title><rect x="86.3550%" y="629" width="0.0421%" height="15" fill="rgb(248,202,8)" fg:x="4101" fg:w="2"/><text x="86.6050%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="86.4182%" y="741" width="0.0211%" height="15" fill="rgb(206,104,37)" fg:x="4104" fg:w="1"/><text x="86.6682%" y="751.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (1 samples, 0.02%)</title><rect x="86.4182%" y="725" width="0.0211%" height="15" fill="rgb(223,8,27)" fg:x="4104" fg:w="1"/><text x="86.6682%" y="735.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::nonzero_trailing_zeros (1 samples, 0.02%)</title><rect x="86.4182%" y="709" width="0.0211%" height="15" fill="rgb(216,217,28)" fg:x="4104" fg:w="1"/><text x="86.6682%" y="719.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (1 samples, 0.02%)</title><rect x="86.4182%" y="693" width="0.0211%" height="15" fill="rgb(249,199,1)" fg:x="4104" fg:w="1"/><text x="86.6682%" y="703.50"></text></g><g><title>bytes::bytes::Bytes::as_slice (2 samples, 0.04%)</title><rect x="86.5656%" y="645" width="0.0421%" height="15" fill="rgb(240,85,17)" fg:x="4111" fg:w="2"/><text x="86.8156%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::_{{closure}} (23 samples, 0.48%)</title><rect x="86.4393%" y="741" width="0.4843%" height="15" fill="rgb(206,108,45)" fg:x="4105" fg:w="23"/><text x="86.6893%" y="751.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get::_{{closure}} (23 samples, 0.48%)</title><rect x="86.4393%" y="725" width="0.4843%" height="15" fill="rgb(245,210,41)" fg:x="4105" fg:w="23"/><text x="86.6893%" y="735.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (23 samples, 0.48%)</title><rect x="86.4393%" y="709" width="0.4843%" height="15" fill="rgb(206,13,37)" fg:x="4105" fg:w="23"/><text x="86.6893%" y="719.50"></text></g><g><title>&lt;rutin::shared::db::object::str::Str as core::cmp::PartialEq&gt;::eq (23 samples, 0.48%)</title><rect x="86.4393%" y="693" width="0.4843%" height="15" fill="rgb(250,61,18)" fg:x="4105" fg:w="23"/><text x="86.6893%" y="703.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (17 samples, 0.36%)</title><rect x="86.5656%" y="677" width="0.3580%" height="15" fill="rgb(235,172,48)" fg:x="4111" fg:w="17"/><text x="86.8156%" y="687.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::cmp::PartialEq&gt;::eq (17 samples, 0.36%)</title><rect x="86.5656%" y="661" width="0.3580%" height="15" fill="rgb(249,201,17)" fg:x="4111" fg:w="17"/><text x="86.8156%" y="671.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (15 samples, 0.32%)</title><rect x="86.6077%" y="645" width="0.3159%" height="15" fill="rgb(219,208,6)" fg:x="4113" fg:w="15"/><text x="86.8577%" y="655.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (15 samples, 0.32%)</title><rect x="86.6077%" y="629" width="0.3159%" height="15" fill="rgb(248,31,23)" fg:x="4113" fg:w="15"/><text x="86.8577%" y="639.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (15 samples, 0.32%)</title><rect x="86.6077%" y="613" width="0.3159%" height="15" fill="rgb(245,15,42)" fg:x="4113" fg:w="15"/><text x="86.8577%" y="623.50"></text></g><g><title>[libc.so.6] (13 samples, 0.27%)</title><rect x="86.6498%" y="597" width="0.2737%" height="15" fill="rgb(222,217,39)" fg:x="4115" fg:w="13"/><text x="86.8998%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::probe_seq (17 samples, 0.36%)</title><rect x="86.9236%" y="741" width="0.3580%" height="15" fill="rgb(210,219,27)" fg:x="4128" fg:w="17"/><text x="87.1736%" y="751.50"></text></g><g><title>hashbrown::raw::inner::h2 (4 samples, 0.08%)</title><rect x="87.2815%" y="741" width="0.0842%" height="15" fill="rgb(252,166,36)" fg:x="4145" fg:w="4"/><text x="87.5315%" y="751.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (1 samples, 0.02%)</title><rect x="87.3658%" y="741" width="0.0211%" height="15" fill="rgb(245,132,34)" fg:x="4149" fg:w="1"/><text x="87.6158%" y="751.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.02%)</title><rect x="87.3658%" y="725" width="0.0211%" height="15" fill="rgb(236,54,3)" fg:x="4149" fg:w="1"/><text x="87.6158%" y="735.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="87.3658%" y="709" width="0.0211%" height="15" fill="rgb(241,173,43)" fg:x="4149" fg:w="1"/><text x="87.6158%" y="719.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (541 samples, 11.39%)</title><rect x="76.0160%" y="805" width="11.3919%" height="15" fill="rgb(215,190,9)" fg:x="3610" fg:w="541"/><text x="76.2660%" y="815.50">dashmap::DashMap&lt;..</text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (537 samples, 11.31%)</title><rect x="76.1002%" y="789" width="11.3076%" height="15" fill="rgb(242,101,16)" fg:x="3614" fg:w="537"/><text x="76.3502%" y="799.50">&lt;dashmap::DashMap..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (48 samples, 1.01%)</title><rect x="86.3971%" y="773" width="1.0107%" height="15" fill="rgb(223,190,21)" fg:x="4103" fg:w="48"/><text x="86.6471%" y="783.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_inner (48 samples, 1.01%)</title><rect x="86.3971%" y="757" width="1.0107%" height="15" fill="rgb(215,228,25)" fg:x="4103" fg:w="48"/><text x="86.6471%" y="767.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (1 samples, 0.02%)</title><rect x="87.3868%" y="741" width="0.0211%" height="15" fill="rgb(225,36,22)" fg:x="4150" fg:w="1"/><text x="87.6368%" y="751.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.02%)</title><rect x="87.3868%" y="725" width="0.0211%" height="15" fill="rgb(251,106,46)" fg:x="4150" fg:w="1"/><text x="87.6368%" y="735.50"></text></g><g><title>rutin::shared::db::object::Object::inner (1 samples, 0.02%)</title><rect x="87.4079%" y="805" width="0.0211%" height="15" fill="rgb(208,90,1)" fg:x="4151" fg:w="1"/><text x="87.6579%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.02%)</title><rect x="87.4079%" y="789" width="0.0211%" height="15" fill="rgb(243,10,4)" fg:x="4151" fg:w="1"/><text x="87.6579%" y="799.50"></text></g><g><title>core::cmp::PartialOrd::le (4 samples, 0.08%)</title><rect x="87.4289%" y="789" width="0.0842%" height="15" fill="rgb(212,137,27)" fg:x="4152" fg:w="4"/><text x="87.6789%" y="799.50"></text></g><g><title>&lt;tokio::time::instant::Instant as core::cmp::PartialOrd&gt;::partial_cmp (4 samples, 0.08%)</title><rect x="87.4289%" y="773" width="0.0842%" height="15" fill="rgb(231,220,49)" fg:x="4152" fg:w="4"/><text x="87.6789%" y="783.50"></text></g><g><title>&lt;std::time::Instant as core::cmp::PartialOrd&gt;::partial_cmp (4 samples, 0.08%)</title><rect x="87.4289%" y="757" width="0.0842%" height="15" fill="rgb(237,96,20)" fg:x="4152" fg:w="4"/><text x="87.6789%" y="767.50"></text></g><g><title>&lt;std::sys::pal::unix::time::Instant as core::cmp::PartialOrd&gt;::partial_cmp (4 samples, 0.08%)</title><rect x="87.4289%" y="741" width="0.0842%" height="15" fill="rgb(239,229,30)" fg:x="4152" fg:w="4"/><text x="87.6789%" y="751.50"></text></g><g><title>&lt;std::sys::pal::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (4 samples, 0.08%)</title><rect x="87.4289%" y="725" width="0.0842%" height="15" fill="rgb(219,65,33)" fg:x="4152" fg:w="4"/><text x="87.6789%" y="735.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (4 samples, 0.08%)</title><rect x="87.4289%" y="709" width="0.0842%" height="15" fill="rgb(243,134,7)" fg:x="4152" fg:w="4"/><text x="87.6789%" y="719.50"></text></g><g><title>rutin::shared::db::object::ObjectInner::is_expired (79 samples, 1.66%)</title><rect x="87.4289%" y="805" width="1.6635%" height="15" fill="rgb(216,177,54)" fg:x="4152" fg:w="79"/><text x="87.6789%" y="815.50"></text></g><g><title>tokio::time::instant::Instant::now (75 samples, 1.58%)</title><rect x="87.5132%" y="789" width="1.5793%" height="15" fill="rgb(211,160,20)" fg:x="4156" fg:w="75"/><text x="87.7632%" y="799.50"></text></g><g><title>tokio::time::instant::variant::now (75 samples, 1.58%)</title><rect x="87.5132%" y="773" width="1.5793%" height="15" fill="rgb(239,85,39)" fg:x="4156" fg:w="75"/><text x="87.7632%" y="783.50"></text></g><g><title>std::time::Instant::now (75 samples, 1.58%)</title><rect x="87.5132%" y="757" width="1.5793%" height="15" fill="rgb(232,125,22)" fg:x="4156" fg:w="75"/><text x="87.7632%" y="767.50"></text></g><g><title>std::sys::pal::unix::time::Instant::now (75 samples, 1.58%)</title><rect x="87.5132%" y="741" width="1.5793%" height="15" fill="rgb(244,57,34)" fg:x="4156" fg:w="75"/><text x="87.7632%" y="751.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (74 samples, 1.56%)</title><rect x="87.5342%" y="725" width="1.5582%" height="15" fill="rgb(214,203,32)" fg:x="4157" fg:w="74"/><text x="87.7842%" y="735.50"></text></g><g><title>clock_gettime (71 samples, 1.50%)</title><rect x="87.5974%" y="709" width="1.4951%" height="15" fill="rgb(207,58,43)" fg:x="4160" fg:w="71"/><text x="87.8474%" y="719.50"></text></g><g><title>__vdso_clock_gettime (70 samples, 1.47%)</title><rect x="87.6184%" y="693" width="1.4740%" height="15" fill="rgb(215,193,15)" fg:x="4161" fg:w="70"/><text x="87.8684%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicU32::store (1 samples, 0.02%)</title><rect x="91.4298%" y="789" width="0.0211%" height="15" fill="rgb(232,15,44)" fg:x="4342" fg:w="1"/><text x="91.6798%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_store (1 samples, 0.02%)</title><rect x="91.4298%" y="773" width="0.0211%" height="15" fill="rgb(212,3,48)" fg:x="4342" fg:w="1"/><text x="91.6798%" y="783.50"></text></g><g><title>rutin::shared::db::Db::get::_{{closure}}::_{{closure}} (763 samples, 16.07%)</title><rect x="75.4475%" y="821" width="16.0665%" height="15" fill="rgb(218,128,7)" fg:x="3583" fg:w="763"/><text x="75.6975%" y="831.50">rutin::shared::db::Db::ge..</text></g><g><title>rutin::shared::db::object::ObjectInner::update_lru (115 samples, 2.42%)</title><rect x="89.0924%" y="805" width="2.4216%" height="15" fill="rgb(226,216,39)" fg:x="4231" fg:w="115"/><text x="89.3424%" y="815.50">ru..</text></g><g><title>rutin::server::listener::get_lru_clock (3 samples, 0.06%)</title><rect x="91.4508%" y="789" width="0.0632%" height="15" fill="rgb(243,47,51)" fg:x="4343" fg:w="3"/><text x="91.7008%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (1 samples, 0.02%)</title><rect x="91.4929%" y="773" width="0.0211%" height="15" fill="rgb(241,183,40)" fg:x="4345" fg:w="1"/><text x="91.7429%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="91.4929%" y="757" width="0.0211%" height="15" fill="rgb(231,217,32)" fg:x="4345" fg:w="1"/><text x="91.7429%" y="767.50"></text></g><g><title>&lt;rutin::cmd::commands::str::Get as rutin::cmd::CmdExecutor&gt;::execute::_{{closure}}::_{{closure}}::_{{closure}} (1,419 samples, 29.88%)</title><rect x="61.6761%" y="885" width="29.8800%" height="15" fill="rgb(229,61,38)" fg:x="2929" fg:w="1419"/><text x="61.9261%" y="895.50">&lt;rutin::cmd::commands::str::Get as rutin::cmd::C..</text></g><g><title>rutin::shared::db::Db::visit_object::_{{closure}} (1,368 samples, 28.81%)</title><rect x="62.7501%" y="869" width="28.8061%" height="15" fill="rgb(225,210,5)" fg:x="2980" fg:w="1368"/><text x="63.0001%" y="879.50">rutin::shared::db::Db::visit_object::_{{closur..</text></g><g><title>rutin::shared::db::Db::visit_object::_{{closure}}::_{{closure}} (1,278 samples, 26.91%)</title><rect x="64.6452%" y="853" width="26.9109%" height="15" fill="rgb(231,79,45)" fg:x="3070" fg:w="1278"/><text x="64.8952%" y="863.50">rutin::shared::db::Db::visit_object::_{{clo..</text></g><g><title>rutin::shared::db::Db::get::_{{closure}} (841 samples, 17.71%)</title><rect x="73.8471%" y="837" width="17.7090%" height="15" fill="rgb(224,100,7)" fg:x="3507" fg:w="841"/><text x="74.0971%" y="847.50">rutin::shared::db::Db::get::..</text></g><g><title>tracing_core::metadata::LevelFilter::current (2 samples, 0.04%)</title><rect x="91.5140%" y="821" width="0.0421%" height="15" fill="rgb(241,198,18)" fg:x="4346" fg:w="2"/><text x="91.7640%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.04%)</title><rect x="91.5140%" y="805" width="0.0421%" height="15" fill="rgb(252,97,53)" fg:x="4346" fg:w="2"/><text x="91.7640%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.04%)</title><rect x="91.5140%" y="789" width="0.0421%" height="15" fill="rgb(220,88,7)" fg:x="4346" fg:w="2"/><text x="91.7640%" y="799.50"></text></g><g><title>&lt;rutin::cmd::commands::str::Get as rutin::cmd::CmdExecutor&gt;::execute::_{{closure}}::_{{closure}} (1,540 samples, 32.43%)</title><rect x="60.4338%" y="901" width="32.4279%" height="15" fill="rgb(213,176,14)" fg:x="2870" fg:w="1540"/><text x="60.6838%" y="911.50">&lt;rutin::cmd::commands::str::Get as rutin::cmd::CmdEx..</text></g><g><title>[libc.so.6] (62 samples, 1.31%)</title><rect x="91.5561%" y="885" width="1.3055%" height="15" fill="rgb(246,73,7)" fg:x="4348" fg:w="62"/><text x="91.8061%" y="895.50"></text></g><g><title>&lt;tracing_core::metadata::Level as core::cmp::PartialOrd&lt;tracing_core::metadata::LevelFilter&gt;&gt;::le (1 samples, 0.02%)</title><rect x="92.8617%" y="901" width="0.0211%" height="15" fill="rgb(245,64,36)" fg:x="4410" fg:w="1"/><text x="93.1117%" y="911.50"></text></g><g><title>[libc.so.6] (64 samples, 1.35%)</title><rect x="92.8827%" y="901" width="1.3477%" height="15" fill="rgb(245,80,10)" fg:x="4411" fg:w="64"/><text x="93.1327%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;rutin::cmd::commands::str::Get as rutin::cmd::CmdExecutor&gt;::execute&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}::{{closure}}&gt; (1 samples, 0.02%)</title><rect x="94.2304%" y="901" width="0.0211%" height="15" fill="rgb(232,107,50)" fg:x="4475" fg:w="1"/><text x="94.4804%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::Span&gt; (1 samples, 0.02%)</title><rect x="94.2514%" y="901" width="0.0211%" height="15" fill="rgb(253,3,0)" fg:x="4476" fg:w="1"/><text x="94.5014%" y="911.50"></text></g><g><title>&lt;tracing::span::Span as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="94.2514%" y="885" width="0.0211%" height="15" fill="rgb(212,99,53)" fg:x="4476" fg:w="1"/><text x="94.5014%" y="895.50"></text></g><g><title>&lt;rutin::cmd::commands::str::Get as rutin::cmd::CmdExecutor&gt;::execute::_{{closure}} (1,662 samples, 35.00%)</title><rect x="59.3178%" y="917" width="34.9968%" height="15" fill="rgb(249,111,54)" fg:x="2817" fg:w="1662"/><text x="59.5678%" y="927.50">&lt;rutin::cmd::commands::str::Get as rutin::cmd::CmdExecuto..</text></g><g><title>tracing_core::metadata::LevelFilter::current (2 samples, 0.04%)</title><rect x="94.2725%" y="901" width="0.0421%" height="15" fill="rgb(249,55,30)" fg:x="4477" fg:w="2"/><text x="94.5225%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.04%)</title><rect x="94.2725%" y="885" width="0.0421%" height="15" fill="rgb(237,47,42)" fg:x="4477" fg:w="2"/><text x="94.5225%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.04%)</title><rect x="94.2725%" y="869" width="0.0421%" height="15" fill="rgb(211,20,18)" fg:x="4477" fg:w="2"/><text x="94.5225%" y="879.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::deref::Deref&gt;::deref (5 samples, 0.11%)</title><rect x="94.7989%" y="869" width="0.1053%" height="15" fill="rgb(231,203,46)" fg:x="4502" fg:w="5"/><text x="95.0489%" y="879.50"></text></g><g><title>bytes::bytes::Bytes::as_slice (5 samples, 0.11%)</title><rect x="94.7989%" y="853" width="0.1053%" height="15" fill="rgb(237,142,3)" fg:x="4502" fg:w="5"/><text x="95.0489%" y="863.50"></text></g><g><title>atoi::ascii_to_digit (2 samples, 0.04%)</title><rect x="95.1569%" y="837" width="0.0421%" height="15" fill="rgb(241,107,1)" fg:x="4519" fg:w="2"/><text x="95.4069%" y="847.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (28 samples, 0.59%)</title><rect x="94.7568%" y="901" width="0.5896%" height="15" fill="rgb(229,83,13)" fg:x="4500" fg:w="28"/><text x="95.0068%" y="911.50"></text></g><g><title>&lt;rutin::shared::db::object::str::Str as core::convert::From&lt;bytes::bytes::Bytes&gt;&gt;::from (28 samples, 0.59%)</title><rect x="94.7568%" y="885" width="0.5896%" height="15" fill="rgb(241,91,40)" fg:x="4500" fg:w="28"/><text x="95.0068%" y="895.50"></text></g><g><title>atoi::atoi (21 samples, 0.44%)</title><rect x="94.9042%" y="869" width="0.4422%" height="15" fill="rgb(225,3,45)" fg:x="4507" fg:w="21"/><text x="95.1542%" y="879.50"></text></g><g><title>&lt;I as atoi::FromRadix10SignedChecked&gt;::from_radix_10_signed_checked (14 samples, 0.29%)</title><rect x="95.0516%" y="853" width="0.2948%" height="15" fill="rgb(244,223,14)" fg:x="4514" fg:w="14"/><text x="95.3016%" y="863.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (7 samples, 0.15%)</title><rect x="95.1990%" y="837" width="0.1474%" height="15" fill="rgb(224,124,37)" fg:x="4521" fg:w="7"/><text x="95.4490%" y="847.50"></text></g><g><title>&lt;I as atoi::FromRadix10SignedChecked&gt;::from_radix_10_signed_checked::_{{closure}} (7 samples, 0.15%)</title><rect x="95.1990%" y="821" width="0.1474%" height="15" fill="rgb(251,171,30)" fg:x="4521" fg:w="7"/><text x="95.4490%" y="831.50"></text></g><g><title>atoi::Sign::try_from (1 samples, 0.02%)</title><rect x="95.3253%" y="805" width="0.0211%" height="15" fill="rgb(236,46,54)" fg:x="4527" fg:w="1"/><text x="95.5753%" y="815.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (3 samples, 0.06%)</title><rect x="95.3464%" y="885" width="0.0632%" height="15" fill="rgb(245,213,5)" fg:x="4528" fg:w="3"/><text x="95.5964%" y="895.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (3 samples, 0.06%)</title><rect x="95.3464%" y="869" width="0.0632%" height="15" fill="rgb(230,144,27)" fg:x="4528" fg:w="3"/><text x="95.5964%" y="879.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (3 samples, 0.06%)</title><rect x="95.3464%" y="853" width="0.0632%" height="15" fill="rgb(220,86,6)" fg:x="4528" fg:w="3"/><text x="95.5964%" y="863.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (3 samples, 0.06%)</title><rect x="95.3464%" y="837" width="0.0632%" height="15" fill="rgb(240,20,13)" fg:x="4528" fg:w="3"/><text x="95.5964%" y="847.50"></text></g><g><title>&lt;rutin::cmd::CmdUnparsed as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (18 samples, 0.38%)</title><rect x="95.4938%" y="869" width="0.3790%" height="15" fill="rgb(217,89,34)" fg:x="4535" fg:w="18"/><text x="95.7438%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;ahash::hash_map::AHashMap&lt;rutin::frame::Resp3,rutin::frame::Resp3&gt;&gt;&gt; (2 samples, 0.04%)</title><rect x="95.8307%" y="853" width="0.0421%" height="15" fill="rgb(229,13,5)" fg:x="4551" fg:w="2"/><text x="96.0807%" y="863.50"></text></g><g><title>&lt;rutin::cmd::CmdUnparsed as core::iter::traits::iterator::Iterator&gt;::next (78 samples, 1.64%)</title><rect x="95.3464%" y="901" width="1.6425%" height="15" fill="rgb(244,67,35)" fg:x="4528" fg:w="78"/><text x="95.5964%" y="911.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (75 samples, 1.58%)</title><rect x="95.4096%" y="885" width="1.5793%" height="15" fill="rgb(221,40,2)" fg:x="4531" fg:w="75"/><text x="95.6596%" y="895.50"></text></g><g><title>[libc.so.6] (53 samples, 1.12%)</title><rect x="95.8728%" y="869" width="1.1160%" height="15" fill="rgb(237,157,21)" fg:x="4553" fg:w="53"/><text x="96.1228%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::cmd::CmdUnparsed&gt; (1 samples, 0.02%)</title><rect x="96.9888%" y="901" width="0.0211%" height="15" fill="rgb(222,94,11)" fg:x="4606" fg:w="1"/><text x="97.2388%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;rutin::frame::Resp3&gt;&gt; (1 samples, 0.02%)</title><rect x="96.9888%" y="885" width="0.0211%" height="15" fill="rgb(249,113,6)" fg:x="4606" fg:w="1"/><text x="97.2388%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;rutin::frame::Resp3&gt;&gt; (1 samples, 0.02%)</title><rect x="96.9888%" y="869" width="0.0211%" height="15" fill="rgb(238,137,36)" fg:x="4606" fg:w="1"/><text x="97.2388%" y="879.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="96.9888%" y="853" width="0.0211%" height="15" fill="rgb(210,102,26)" fg:x="4606" fg:w="1"/><text x="97.2388%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="96.9888%" y="837" width="0.0211%" height="15" fill="rgb(218,30,30)" fg:x="4606" fg:w="1"/><text x="97.2388%" y="847.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="96.9888%" y="821" width="0.0211%" height="15" fill="rgb(214,67,26)" fg:x="4606" fg:w="1"/><text x="97.2388%" y="831.50"></text></g><g><title>__rust_dealloc (1 samples, 0.02%)</title><rect x="96.9888%" y="805" width="0.0211%" height="15" fill="rgb(251,9,53)" fg:x="4606" fg:w="1"/><text x="97.2388%" y="815.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (1 samples, 0.02%)</title><rect x="96.9888%" y="789" width="0.0211%" height="15" fill="rgb(228,204,25)" fg:x="4606" fg:w="1"/><text x="97.2388%" y="799.50"></text></g><g><title>rutin::cmd::CmdUnparsed::len (1 samples, 0.02%)</title><rect x="97.0099%" y="901" width="0.0211%" height="15" fill="rgb(207,153,8)" fg:x="4607" fg:w="1"/><text x="97.2599%" y="911.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::len (1 samples, 0.02%)</title><rect x="97.0099%" y="885" width="0.0211%" height="15" fill="rgb(242,9,16)" fg:x="4607" fg:w="1"/><text x="97.2599%" y="895.50"></text></g><g><title>&lt;rutin::cmd::commands::str::Get as rutin::cmd::CmdExecutor&gt;::parse (131 samples, 2.76%)</title><rect x="94.3146%" y="917" width="2.7585%" height="15" fill="rgb(217,211,10)" fg:x="4479" fg:w="131"/><text x="94.5646%" y="927.50">&lt;r..</text></g><g><title>rutin::conf::security::AccessControl::is_forbidden_key (2 samples, 0.04%)</title><rect x="97.0310%" y="901" width="0.0421%" height="15" fill="rgb(219,228,52)" fg:x="4608" fg:w="2"/><text x="97.2810%" y="911.50"></text></g><g><title>_mi_page_retire (1 samples, 0.02%)</title><rect x="97.0731%" y="917" width="0.0211%" height="15" fill="rgb(231,92,29)" fg:x="4610" fg:w="1"/><text x="97.3231%" y="927.50"></text></g><g><title>_mi_page_unfull (3 samples, 0.06%)</title><rect x="97.0941%" y="917" width="0.0632%" height="15" fill="rgb(232,8,23)" fg:x="4611" fg:w="3"/><text x="97.3441%" y="927.50"></text></g><g><title>_mi_page_unfull (3 samples, 0.06%)</title><rect x="97.0941%" y="901" width="0.0632%" height="15" fill="rgb(216,211,34)" fg:x="4611" fg:w="3"/><text x="97.3441%" y="911.50"></text></g><g><title>mi_page_queue_enqueue_from (3 samples, 0.06%)</title><rect x="97.0941%" y="885" width="0.0632%" height="15" fill="rgb(236,151,0)" fg:x="4611" fg:w="3"/><text x="97.3441%" y="895.50"></text></g><g><title>mi_heap_queue_first_update (2 samples, 0.04%)</title><rect x="97.1152%" y="869" width="0.0421%" height="15" fill="rgb(209,168,3)" fg:x="4612" fg:w="2"/><text x="97.3652%" y="879.50"></text></g><g><title>_mi_stat_decrease (2 samples, 0.04%)</title><rect x="97.1573%" y="885" width="0.0421%" height="15" fill="rgb(208,129,28)" fg:x="4614" fg:w="2"/><text x="97.4073%" y="895.50"></text></g><g><title>mi_stat_update (2 samples, 0.04%)</title><rect x="97.1573%" y="869" width="0.0421%" height="15" fill="rgb(229,78,22)" fg:x="4614" fg:w="2"/><text x="97.4073%" y="879.50"></text></g><g><title>_mi_segment_page_free (3 samples, 0.06%)</title><rect x="97.1573%" y="917" width="0.0632%" height="15" fill="rgb(228,187,13)" fg:x="4614" fg:w="3"/><text x="97.4073%" y="927.50"></text></g><g><title>mi_segment_page_clear (3 samples, 0.06%)</title><rect x="97.1573%" y="901" width="0.0632%" height="15" fill="rgb(240,119,24)" fg:x="4614" fg:w="3"/><text x="97.4073%" y="911.50"></text></g><g><title>mi_segment_span_free_coalesce (1 samples, 0.02%)</title><rect x="97.1994%" y="885" width="0.0211%" height="15" fill="rgb(209,194,42)" fg:x="4616" fg:w="1"/><text x="97.4494%" y="895.50"></text></g><g><title>mi_segment_span_free (1 samples, 0.02%)</title><rect x="97.1994%" y="869" width="0.0211%" height="15" fill="rgb(247,200,46)" fg:x="4616" fg:w="1"/><text x="97.4494%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;rutin::cmd::commands::str::Get as rutin::cmd::CmdExecutor&gt;::execute&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}&gt; (11 samples, 0.23%)</title><rect x="97.2205%" y="917" width="0.2316%" height="15" fill="rgb(218,76,16)" fg:x="4617" fg:w="11"/><text x="97.4705%" y="927.50"></text></g><g><title>_mi_segment_page_of (2 samples, 0.04%)</title><rect x="97.4521%" y="901" width="0.0421%" height="15" fill="rgb(225,21,48)" fg:x="4628" fg:w="2"/><text x="97.7021%" y="911.50"></text></g><g><title>mi_slice_first (1 samples, 0.02%)</title><rect x="97.4732%" y="885" width="0.0211%" height="15" fill="rgb(239,223,50)" fg:x="4629" fg:w="1"/><text x="97.7232%" y="895.50"></text></g><g><title>mi_free (3 samples, 0.06%)</title><rect x="97.4521%" y="917" width="0.0632%" height="15" fill="rgb(244,45,21)" fg:x="4628" fg:w="3"/><text x="97.7021%" y="927.50"></text></g><g><title>mi_checked_ptr_segment (1 samples, 0.02%)</title><rect x="97.4942%" y="901" width="0.0211%" height="15" fill="rgb(232,33,43)" fg:x="4630" fg:w="1"/><text x="97.7442%" y="911.50"></text></g><g><title>_mi_ptr_segment (1 samples, 0.02%)</title><rect x="97.4942%" y="885" width="0.0211%" height="15" fill="rgb(209,8,3)" fg:x="4630" fg:w="1"/><text x="97.7442%" y="895.50"></text></g><g><title>rutin::cmd::CmdExecutor::apply::_{{closure}} (1,889 samples, 39.78%)</title><rect x="57.8859%" y="933" width="39.7768%" height="15" fill="rgb(214,25,53)" fg:x="2749" fg:w="1889"/><text x="58.1359%" y="943.50">rutin::cmd::CmdExecutor::apply::_{{closure}}</text></g><g><title>rutin::conf::security::AccessControl::is_forbidden_cmd (7 samples, 0.15%)</title><rect x="97.5153%" y="917" width="0.1474%" height="15" fill="rgb(254,186,54)" fg:x="4631" fg:w="7"/><text x="97.7653%" y="927.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (3 samples, 0.06%)</title><rect x="97.6837%" y="917" width="0.0632%" height="15" fill="rgb(208,174,49)" fg:x="4639" fg:w="3"/><text x="97.9337%" y="927.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.06%)</title><rect x="97.6837%" y="901" width="0.0632%" height="15" fill="rgb(233,191,51)" fg:x="4639" fg:w="3"/><text x="97.9337%" y="911.50"></text></g><g><title>[libc.so.6] (3 samples, 0.06%)</title><rect x="97.6837%" y="885" width="0.0632%" height="15" fill="rgb(222,134,10)" fg:x="4639" fg:w="3"/><text x="97.9337%" y="895.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.06%)</title><rect x="97.7469%" y="901" width="0.0632%" height="15" fill="rgb(230,226,20)" fg:x="4642" fg:w="3"/><text x="97.9969%" y="911.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (1 samples, 0.02%)</title><rect x="97.7890%" y="885" width="0.0211%" height="15" fill="rgb(251,111,25)" fg:x="4644" fg:w="1"/><text x="98.0390%" y="895.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (1 samples, 0.02%)</title><rect x="97.7890%" y="869" width="0.0211%" height="15" fill="rgb(224,40,46)" fg:x="4644" fg:w="1"/><text x="98.0390%" y="879.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (1 samples, 0.02%)</title><rect x="97.7890%" y="853" width="0.0211%" height="15" fill="rgb(236,108,47)" fg:x="4644" fg:w="1"/><text x="98.0390%" y="863.50"></text></g><g><title>rutin::cmd::dispatch::_{{closure}}::_{{closure}} (2,402 samples, 50.58%)</title><rect x="47.3784%" y="965" width="50.5791%" height="15" fill="rgb(234,93,0)" fg:x="2250" fg:w="2402"/><text x="47.6284%" y="975.50">rutin::cmd::dispatch::_{{closure}}::_{{closure}}</text></g><g><title>rutin::cmd::dispatch::_{{closure}}::_{{closure}}::_{{closure}} (2,269 samples, 47.78%)</title><rect x="50.1790%" y="949" width="47.7785%" height="15" fill="rgb(224,213,32)" fg:x="2383" fg:w="2269"/><text x="50.4290%" y="959.50">rutin::cmd::dispatch::_{{closure}}::_{{closure}}::_{{closure}}</text></g><g><title>rutin::util::uppercase (14 samples, 0.29%)</title><rect x="97.6627%" y="933" width="0.2948%" height="15" fill="rgb(251,11,48)" fg:x="4638" fg:w="14"/><text x="97.9127%" y="943.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::make_ascii_uppercase (10 samples, 0.21%)</title><rect x="97.7469%" y="917" width="0.2106%" height="15" fill="rgb(236,173,5)" fg:x="4642" fg:w="10"/><text x="97.9969%" y="927.50"></text></g><g><title>core::num::&lt;impl u8&gt;::make_ascii_uppercase (7 samples, 0.15%)</title><rect x="97.8101%" y="901" width="0.1474%" height="15" fill="rgb(230,95,12)" fg:x="4645" fg:w="7"/><text x="98.0601%" y="911.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_uppercase (5 samples, 0.11%)</title><rect x="97.8522%" y="885" width="0.1053%" height="15" fill="rgb(232,209,1)" fg:x="4647" fg:w="5"/><text x="98.1022%" y="895.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_lowercase (2 samples, 0.04%)</title><rect x="97.9154%" y="869" width="0.0421%" height="15" fill="rgb(232,6,1)" fg:x="4650" fg:w="2"/><text x="98.1654%" y="879.50"></text></g><g><title>rutin::cmd::dispatch::_{{closure}} (2,697 samples, 56.79%)</title><rect x="41.1876%" y="981" width="56.7909%" height="15" fill="rgb(210,224,50)" fg:x="1956" fg:w="2697"/><text x="41.4376%" y="991.50">rutin::cmd::dispatch::_{{closure}}</text></g><g><title>tracing_core::metadata::LevelFilter::current (1 samples, 0.02%)</title><rect x="97.9575%" y="965" width="0.0211%" height="15" fill="rgb(228,127,35)" fg:x="4652" fg:w="1"/><text x="98.2075%" y="975.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.02%)</title><rect x="97.9575%" y="949" width="0.0211%" height="15" fill="rgb(245,102,45)" fg:x="4652" fg:w="1"/><text x="98.2075%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="97.9575%" y="933" width="0.0211%" height="15" fill="rgb(214,1,49)" fg:x="4652" fg:w="1"/><text x="98.2075%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::Span&gt; (1 samples, 0.02%)</title><rect x="98.1680%" y="965" width="0.0211%" height="15" fill="rgb(226,163,40)" fg:x="4662" fg:w="1"/><text x="98.4180%" y="975.50"></text></g><g><title>&lt;tracing::span::Span as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="98.1680%" y="949" width="0.0211%" height="15" fill="rgb(239,212,28)" fg:x="4662" fg:w="1"/><text x="98.4180%" y="959.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::advance (1 samples, 0.02%)</title><rect x="98.9682%" y="917" width="0.0211%" height="15" fill="rgb(220,20,13)" fg:x="4700" fg:w="1"/><text x="99.2182%" y="927.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (1 samples, 0.02%)</title><rect x="98.9682%" y="901" width="0.0211%" height="15" fill="rgb(210,164,35)" fg:x="4700" fg:w="1"/><text x="99.2182%" y="911.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (1 samples, 0.02%)</title><rect x="98.9682%" y="885" width="0.0211%" height="15" fill="rgb(248,109,41)" fg:x="4700" fg:w="1"/><text x="99.2182%" y="895.50"></text></g><g><title>&lt;tokio::io::util::write_buf::WriteBuf&lt;W,B&gt; as core::future::future::Future&gt;::poll (4 samples, 0.08%)</title><rect x="98.9682%" y="933" width="0.0842%" height="15" fill="rgb(238,23,50)" fg:x="4700" fg:w="4"/><text x="99.2182%" y="943.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (3 samples, 0.06%)</title><rect x="98.9893%" y="917" width="0.0632%" height="15" fill="rgb(211,48,49)" fg:x="4701" fg:w="3"/><text x="99.2393%" y="927.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (3 samples, 0.06%)</title><rect x="98.9893%" y="901" width="0.0632%" height="15" fill="rgb(223,36,21)" fg:x="4701" fg:w="3"/><text x="99.2393%" y="911.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (3 samples, 0.06%)</title><rect x="98.9893%" y="885" width="0.0632%" height="15" fill="rgb(207,123,46)" fg:x="4701" fg:w="3"/><text x="99.2393%" y="895.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (3 samples, 0.06%)</title><rect x="98.9893%" y="869" width="0.0632%" height="15" fill="rgb(240,218,32)" fg:x="4701" fg:w="3"/><text x="99.2393%" y="879.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (3 samples, 0.06%)</title><rect x="98.9893%" y="853" width="0.0632%" height="15" fill="rgb(252,5,43)" fg:x="4701" fg:w="3"/><text x="99.2393%" y="863.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (3 samples, 0.06%)</title><rect x="98.9893%" y="837" width="0.0632%" height="15" fill="rgb(252,84,19)" fg:x="4701" fg:w="3"/><text x="99.2393%" y="847.50"></text></g><g><title>mio::sys::unix::selector::stateless_io_source::IoSourceState::do_io (3 samples, 0.06%)</title><rect x="98.9893%" y="821" width="0.0632%" height="15" fill="rgb(243,152,39)" fg:x="4701" fg:w="3"/><text x="99.2393%" y="831.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write::_{{closure}} (3 samples, 0.06%)</title><rect x="98.9893%" y="805" width="0.0632%" height="15" fill="rgb(234,160,15)" fg:x="4701" fg:w="3"/><text x="99.2393%" y="815.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (3 samples, 0.06%)</title><rect x="98.9893%" y="789" width="0.0632%" height="15" fill="rgb(237,34,20)" fg:x="4701" fg:w="3"/><text x="99.2393%" y="799.50"></text></g><g><title>std::sys_common::net::TcpStream::write (3 samples, 0.06%)</title><rect x="98.9893%" y="773" width="0.0632%" height="15" fill="rgb(229,97,13)" fg:x="4701" fg:w="3"/><text x="99.2393%" y="783.50"></text></g><g><title>__send (3 samples, 0.06%)</title><rect x="98.9893%" y="757" width="0.0632%" height="15" fill="rgb(234,71,50)" fg:x="4701" fg:w="3"/><text x="99.2393%" y="767.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::advance_mut (1 samples, 0.02%)</title><rect x="99.3051%" y="885" width="0.0211%" height="15" fill="rgb(253,155,4)" fg:x="4716" fg:w="1"/><text x="99.5551%" y="895.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (3 samples, 0.06%)</title><rect x="99.3262%" y="885" width="0.0632%" height="15" fill="rgb(222,185,37)" fg:x="4717" fg:w="3"/><text x="99.5762%" y="895.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (1 samples, 0.02%)</title><rect x="99.3683%" y="869" width="0.0211%" height="15" fill="rgb(251,177,13)" fg:x="4719" fg:w="1"/><text x="99.6183%" y="879.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="99.3683%" y="853" width="0.0211%" height="15" fill="rgb(250,179,40)" fg:x="4719" fg:w="1"/><text x="99.6183%" y="863.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="99.3683%" y="837" width="0.0211%" height="15" fill="rgb(242,44,2)" fg:x="4719" fg:w="1"/><text x="99.6183%" y="847.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (18 samples, 0.38%)</title><rect x="99.3051%" y="917" width="0.3790%" height="15" fill="rgb(216,177,13)" fg:x="4716" fg:w="18"/><text x="99.5551%" y="927.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (18 samples, 0.38%)</title><rect x="99.3051%" y="901" width="0.3790%" height="15" fill="rgb(216,106,43)" fg:x="4716" fg:w="18"/><text x="99.5551%" y="911.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.29%)</title><rect x="99.3893%" y="885" width="0.2948%" height="15" fill="rgb(216,183,2)" fg:x="4720" fg:w="14"/><text x="99.6393%" y="895.50"></text></g><g><title>[libc.so.6] (12 samples, 0.25%)</title><rect x="99.4315%" y="869" width="0.2527%" height="15" fill="rgb(249,75,3)" fg:x="4722" fg:w="12"/><text x="99.6815%" y="879.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::advance_mut (4 samples, 0.08%)</title><rect x="99.6841%" y="869" width="0.0842%" height="15" fill="rgb(219,67,39)" fg:x="4734" fg:w="4"/><text x="99.9341%" y="879.50"></text></g><g><title>bytes::bytes_mut::BytesMut::spare_capacity_mut (1 samples, 0.02%)</title><rect x="99.7684%" y="869" width="0.0211%" height="15" fill="rgb(253,228,2)" fg:x="4738" fg:w="1"/><text x="100.0184%" y="879.50"></text></g><g><title>bytes::buf::buf_mut::BufMut::put_u8 (6 samples, 0.13%)</title><rect x="99.6841%" y="917" width="0.1263%" height="15" fill="rgb(235,138,27)" fg:x="4734" fg:w="6"/><text x="99.9341%" y="927.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (6 samples, 0.13%)</title><rect x="99.6841%" y="901" width="0.1263%" height="15" fill="rgb(236,97,51)" fg:x="4734" fg:w="6"/><text x="99.9341%" y="911.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (6 samples, 0.13%)</title><rect x="99.6841%" y="885" width="0.1263%" height="15" fill="rgb(240,80,30)" fg:x="4734" fg:w="6"/><text x="99.9341%" y="895.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="99.7894%" y="869" width="0.0211%" height="15" fill="rgb(230,178,19)" fg:x="4739" fg:w="1"/><text x="100.0394%" y="879.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.02%)</title><rect x="99.8105%" y="917" width="0.0211%" height="15" fill="rgb(210,190,27)" fg:x="4740" fg:w="1"/><text x="100.0605%" y="927.50"></text></g><g><title>&lt;tokio::task::task_local::TaskLocalFuture&lt;T,F&gt; as core::future::future::Future&gt;::poll::_{{closure}} (3,185 samples, 67.07%)</title><rect x="32.8069%" y="1013" width="67.0668%" height="15" fill="rgb(222,107,31)" fg:x="1558" fg:w="3185"/><text x="33.0569%" y="1023.50">&lt;tokio::task::task_local::TaskLocalFuture&lt;T,F&gt; as core::future::future::Future&gt;::poll::_{{closure}}</text></g><g><title>rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}}::_{{closure}}::_{{closure}}::_{{closure}} (3,185 samples, 67.07%)</title><rect x="32.8069%" y="997" width="67.0668%" height="15" fill="rgb(216,127,34)" fg:x="1558" fg:w="3185"/><text x="33.0569%" y="1007.50">rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}}::_{{closure}}::_{{closure}}::_{{closure}}</text></g><g><title>rutin::server::connection::Connection&lt;S&gt;::write_frames::_{{closure}} (90 samples, 1.90%)</title><rect x="97.9785%" y="981" width="1.8951%" height="15" fill="rgb(234,116,52)" fg:x="4653" fg:w="90"/><text x="98.2285%" y="991.50">r..</text></g><g><title>rutin::server::connection::Connection&lt;S&gt;::write_frames::_{{closure}}::_{{closure}} (80 samples, 1.68%)</title><rect x="98.1891%" y="965" width="1.6846%" height="15" fill="rgb(222,124,15)" fg:x="4663" fg:w="80"/><text x="98.4391%" y="975.50"></text></g><g><title>rutin::server::connection::Connection&lt;S&gt;::write_frames::_{{closure}}::_{{closure}}::_{{closure}} (47 samples, 0.99%)</title><rect x="98.8840%" y="949" width="0.9897%" height="15" fill="rgb(231,179,28)" fg:x="4696" fg:w="47"/><text x="99.1340%" y="959.50"></text></g><g><title>rutin::frame::Resp3&lt;B,S&gt;::encode_buf (39 samples, 0.82%)</title><rect x="99.0524%" y="933" width="0.8212%" height="15" fill="rgb(226,93,45)" fg:x="4704" fg:w="39"/><text x="99.3024%" y="943.50"></text></g><g><title>itoa::Buffer::format (2 samples, 0.04%)</title><rect x="99.8315%" y="917" width="0.0421%" height="15" fill="rgb(215,8,51)" fg:x="4741" fg:w="2"/><text x="100.0815%" y="927.50"></text></g><g><title>itoa::&lt;impl itoa::private::Sealed for usize&gt;::write (2 samples, 0.04%)</title><rect x="99.8315%" y="901" width="0.0421%" height="15" fill="rgb(223,106,5)" fg:x="4741" fg:w="2"/><text x="100.0815%" y="911.50"></text></g><g><title>rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}}::_{{closure}} (3,187 samples, 67.11%)</title><rect x="32.7858%" y="1077" width="67.1089%" height="15" fill="rgb(250,191,5)" fg:x="1557" fg:w="3187"/><text x="33.0358%" y="1087.50">rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}}::_{{closure}}</text></g><g><title>rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}}::_{{closure}}::_{{closure}} (3,187 samples, 67.11%)</title><rect x="32.7858%" y="1061" width="67.1089%" height="15" fill="rgb(242,132,44)" fg:x="1557" fg:w="3187"/><text x="33.0358%" y="1071.50">rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}}::_{{closure}}::_{{closure}}</text></g><g><title>&lt;tokio::task::task_local::TaskLocalFuture&lt;T,F&gt; as core::future::future::Future&gt;::poll (3,187 samples, 67.11%)</title><rect x="32.7858%" y="1045" width="67.1089%" height="15" fill="rgb(251,152,29)" fg:x="1557" fg:w="3187"/><text x="33.0358%" y="1055.50">&lt;tokio::task::task_local::TaskLocalFuture&lt;T,F&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::task::task_local::LocalKey&lt;T&gt;::scope_inner (3,186 samples, 67.09%)</title><rect x="32.8069%" y="1029" width="67.0878%" height="15" fill="rgb(218,179,5)" fg:x="1558" fg:w="3186"/><text x="33.0569%" y="1039.50">tokio::task::task_local::LocalKey&lt;T&gt;::scope_inner</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.02%)</title><rect x="99.8737%" y="1013" width="0.0211%" height="15" fill="rgb(227,67,19)" fg:x="4743" fg:w="1"/><text x="100.1237%" y="1023.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.02%)</title><rect x="99.8737%" y="997" width="0.0211%" height="15" fill="rgb(233,119,31)" fg:x="4743" fg:w="1"/><text x="100.1237%" y="1007.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.02%)</title><rect x="99.8947%" y="1077" width="0.0211%" height="15" fill="rgb(241,120,22)" fg:x="4744" fg:w="1"/><text x="100.1447%" y="1087.50"></text></g><g><title>clock_gettime (1 samples, 0.02%)</title><rect x="99.8947%" y="1061" width="0.0211%" height="15" fill="rgb(224,102,30)" fg:x="4744" fg:w="1"/><text x="100.1447%" y="1071.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (3 samples, 0.06%)</title><rect x="99.9158%" y="1029" width="0.0632%" height="15" fill="rgb(210,164,37)" fg:x="4745" fg:w="3"/><text x="100.1658%" y="1039.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.06%)</title><rect x="99.9158%" y="1013" width="0.0632%" height="15" fill="rgb(226,191,16)" fg:x="4745" fg:w="3"/><text x="100.1658%" y="1023.50"></text></g><g><title>std::panicking::try (3 samples, 0.06%)</title><rect x="99.9158%" y="997" width="0.0632%" height="15" fill="rgb(214,40,45)" fg:x="4745" fg:w="3"/><text x="100.1658%" y="1007.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.06%)</title><rect x="99.9158%" y="981" width="0.0632%" height="15" fill="rgb(244,29,26)" fg:x="4745" fg:w="3"/><text x="100.1658%" y="991.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3 samples, 0.06%)</title><rect x="99.9158%" y="965" width="0.0632%" height="15" fill="rgb(216,16,5)" fg:x="4745" fg:w="3"/><text x="100.1658%" y="975.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (3 samples, 0.06%)</title><rect x="99.9158%" y="949" width="0.0632%" height="15" fill="rgb(249,76,35)" fg:x="4745" fg:w="3"/><text x="100.1658%" y="959.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (3 samples, 0.06%)</title><rect x="99.9158%" y="933" width="0.0632%" height="15" fill="rgb(207,11,44)" fg:x="4745" fg:w="3"/><text x="100.1658%" y="943.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (3 samples, 0.06%)</title><rect x="99.9158%" y="917" width="0.0632%" height="15" fill="rgb(228,190,49)" fg:x="4745" fg:w="3"/><text x="100.1658%" y="927.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (3 samples, 0.06%)</title><rect x="99.9158%" y="901" width="0.0632%" height="15" fill="rgb(214,173,12)" fg:x="4745" fg:w="3"/><text x="100.1658%" y="911.50"></text></g><g><title>all (4,749 samples, 100%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(218,26,35)" fg:x="0" fg:w="4749"/><text x="0.2500%" y="1119.50"></text></g><g><title>tokio-runtime-w (4,748 samples, 99.98%)</title><rect x="0.0211%" y="1093" width="99.9789%" height="15" fill="rgb(220,200,19)" fg:x="1" fg:w="4748"/><text x="0.2711%" y="1103.50">tokio-runtime-w</text></g><g><title>tokio::runtime::task::raw::poll (4 samples, 0.08%)</title><rect x="99.9158%" y="1077" width="0.0842%" height="15" fill="rgb(239,95,49)" fg:x="4745" fg:w="4"/><text x="100.1658%" y="1087.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (4 samples, 0.08%)</title><rect x="99.9158%" y="1061" width="0.0842%" height="15" fill="rgb(235,85,53)" fg:x="4745" fg:w="4"/><text x="100.1658%" y="1071.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (4 samples, 0.08%)</title><rect x="99.9158%" y="1045" width="0.0842%" height="15" fill="rgb(233,133,31)" fg:x="4745" fg:w="4"/><text x="100.1658%" y="1055.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running (1 samples, 0.02%)</title><rect x="99.9789%" y="1029" width="0.0211%" height="15" fill="rgb(218,25,20)" fg:x="4748" fg:w="1"/><text x="100.2289%" y="1039.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (1 samples, 0.02%)</title><rect x="99.9789%" y="1013" width="0.0211%" height="15" fill="rgb(252,210,38)" fg:x="4748" fg:w="1"/><text x="100.2289%" y="1023.50"></text></g></svg></svg>