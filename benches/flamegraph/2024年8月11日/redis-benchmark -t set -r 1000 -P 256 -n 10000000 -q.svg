<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1174" onload="init(evt)" viewBox="0 0 1200 1174" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1174" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1157.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1157.00"> </text><svg id="frames" x="10" width="1180" total_samples="5135"><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 0.06%)</title><rect x="0.0000%" y="1093" width="0.0584%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1103.50"></text></g><g><title>rutin::server::listener::Server::run::_{{closure}}::_{{closure}} (3 samples, 0.06%)</title><rect x="0.0000%" y="1077" width="0.0584%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1087.50"></text></g><g><title>rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}} (3 samples, 0.06%)</title><rect x="0.0000%" y="1061" width="0.0584%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1071.50"></text></g><g><title>rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}}::_{{closure}} (2 samples, 0.04%)</title><rect x="0.0195%" y="1045" width="0.0389%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="2"/><text x="0.2695%" y="1055.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::powf (1 samples, 0.02%)</title><rect x="0.0584%" y="389" width="0.0195%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="1"/><text x="0.3084%" y="399.50"></text></g><g><title>pow (1 samples, 0.02%)</title><rect x="0.0584%" y="373" width="0.0195%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="1"/><text x="0.3084%" y="383.50"></text></g><g><title>compiler_builtins::math::pow (1 samples, 0.02%)</title><rect x="0.0584%" y="357" width="0.0195%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="1"/><text x="0.3084%" y="367.50"></text></g><g><title>compiler_builtins::math::libm::pow::pow (1 samples, 0.02%)</title><rect x="0.0584%" y="341" width="0.0195%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="1"/><text x="0.3084%" y="351.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.02%)</title><rect x="0.0779%" y="389" width="0.0195%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="1"/><text x="0.3279%" y="399.50"></text></g><g><title>std::sys::pal::unix::time::Instant::now (1 samples, 0.02%)</title><rect x="0.0779%" y="373" width="0.0195%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="1"/><text x="0.3279%" y="383.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.02%)</title><rect x="0.0779%" y="357" width="0.0195%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="1"/><text x="0.3279%" y="367.50"></text></g><g><title>clock_gettime (1 samples, 0.02%)</title><rect x="0.0779%" y="341" width="0.0195%" height="15" fill="rgb(240,193,28)" fg:x="4" fg:w="1"/><text x="0.3279%" y="351.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.02%)</title><rect x="0.0779%" y="325" width="0.0195%" height="15" fill="rgb(216,20,37)" fg:x="4" fg:w="1"/><text x="0.3279%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::end_processing_scheduled_tasks (3 samples, 0.06%)</title><rect x="0.0584%" y="405" width="0.0584%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="3"/><text x="0.3084%" y="415.50"></text></g><g><title>tokio::runtime::metrics::batch::MetricsBatch::end_processing_scheduled_tasks (1 samples, 0.02%)</title><rect x="0.0974%" y="389" width="0.0195%" height="15" fill="rgb(217,207,13)" fg:x="5" fg:w="1"/><text x="0.3474%" y="399.50"></text></g><g><title>std::time::Instant::elapsed (1 samples, 0.02%)</title><rect x="0.0974%" y="373" width="0.0195%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="1"/><text x="0.3474%" y="383.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (1 samples, 0.02%)</title><rect x="0.0974%" y="357" width="0.0195%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="1"/><text x="0.3474%" y="367.50"></text></g><g><title>std::time::Instant::duration_since (1 samples, 0.02%)</title><rect x="0.0974%" y="341" width="0.0195%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="1"/><text x="0.3474%" y="351.50"></text></g><g><title>std::time::Instant::checked_duration_since (1 samples, 0.02%)</title><rect x="0.0974%" y="325" width="0.0195%" height="15" fill="rgb(221,200,47)" fg:x="5" fg:w="1"/><text x="0.3474%" y="335.50"></text></g><g><title>std::sys::pal::unix::time::Instant::checked_sub_instant (1 samples, 0.02%)</title><rect x="0.0974%" y="309" width="0.0195%" height="15" fill="rgb(226,26,5)" fg:x="5" fg:w="1"/><text x="0.3474%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::ok (1 samples, 0.02%)</title><rect x="0.0974%" y="293" width="0.0195%" height="15" fill="rgb(249,33,26)" fg:x="5" fg:w="1"/><text x="0.3474%" y="303.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.02%)</title><rect x="0.1168%" y="389" width="0.0195%" height="15" fill="rgb(235,183,28)" fg:x="6" fg:w="1"/><text x="0.3668%" y="399.50"></text></g><g><title>std::sys::pal::unix::time::Instant::now (1 samples, 0.02%)</title><rect x="0.1168%" y="373" width="0.0195%" height="15" fill="rgb(221,5,38)" fg:x="6" fg:w="1"/><text x="0.3668%" y="383.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.02%)</title><rect x="0.1168%" y="357" width="0.0195%" height="15" fill="rgb(247,18,42)" fg:x="6" fg:w="1"/><text x="0.3668%" y="367.50"></text></g><g><title>clock_gettime (1 samples, 0.02%)</title><rect x="0.1168%" y="341" width="0.0195%" height="15" fill="rgb(241,131,45)" fg:x="6" fg:w="1"/><text x="0.3668%" y="351.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.02%)</title><rect x="0.1168%" y="325" width="0.0195%" height="15" fill="rgb(249,31,29)" fg:x="6" fg:w="1"/><text x="0.3668%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::start_processing_scheduled_tasks (2 samples, 0.04%)</title><rect x="0.1168%" y="405" width="0.0389%" height="15" fill="rgb(225,111,53)" fg:x="6" fg:w="2"/><text x="0.3668%" y="415.50"></text></g><g><title>tokio::runtime::metrics::batch::MetricsBatch::start_processing_scheduled_tasks (1 samples, 0.02%)</title><rect x="0.1363%" y="389" width="0.0195%" height="15" fill="rgb(238,160,17)" fg:x="7" fg:w="1"/><text x="0.3863%" y="399.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.02%)</title><rect x="0.1363%" y="373" width="0.0195%" height="15" fill="rgb(214,148,48)" fg:x="7" fg:w="1"/><text x="0.3863%" y="383.50"></text></g><g><title>std::sys::pal::unix::time::Instant::now (1 samples, 0.02%)</title><rect x="0.1363%" y="357" width="0.0195%" height="15" fill="rgb(232,36,49)" fg:x="7" fg:w="1"/><text x="0.3863%" y="367.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.02%)</title><rect x="0.1363%" y="341" width="0.0195%" height="15" fill="rgb(209,103,24)" fg:x="7" fg:w="1"/><text x="0.3863%" y="351.50"></text></g><g><title>clock_gettime (1 samples, 0.02%)</title><rect x="0.1363%" y="325" width="0.0195%" height="15" fill="rgb(229,88,8)" fg:x="7" fg:w="1"/><text x="0.3863%" y="335.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.02%)</title><rect x="0.1363%" y="309" width="0.0195%" height="15" fill="rgb(213,181,19)" fg:x="7" fg:w="1"/><text x="0.3863%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::maintenance (1 samples, 0.02%)</title><rect x="0.1558%" y="405" width="0.0195%" height="15" fill="rgb(254,191,54)" fg:x="8" fg:w="1"/><text x="0.4058%" y="415.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (1 samples, 0.02%)</title><rect x="0.1558%" y="389" width="0.0195%" height="15" fill="rgb(241,83,37)" fg:x="8" fg:w="1"/><text x="0.4058%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park_timeout (1 samples, 0.02%)</title><rect x="0.1558%" y="373" width="0.0195%" height="15" fill="rgb(233,36,39)" fg:x="8" fg:w="1"/><text x="0.4058%" y="383.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (1 samples, 0.02%)</title><rect x="0.1558%" y="357" width="0.0195%" height="15" fill="rgb(226,3,54)" fg:x="8" fg:w="1"/><text x="0.4058%" y="367.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (1 samples, 0.02%)</title><rect x="0.1558%" y="341" width="0.0195%" height="15" fill="rgb(245,192,40)" fg:x="8" fg:w="1"/><text x="0.4058%" y="351.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (1 samples, 0.02%)</title><rect x="0.1558%" y="325" width="0.0195%" height="15" fill="rgb(238,167,29)" fg:x="8" fg:w="1"/><text x="0.4058%" y="335.50"></text></g><g><title>tokio::util::wake_list::WakeList::wake_all (1 samples, 0.02%)</title><rect x="0.1558%" y="309" width="0.0195%" height="15" fill="rgb(232,182,51)" fg:x="8" fg:w="1"/><text x="0.4058%" y="319.50"></text></g><g><title>core::task::wake::Waker::wake (1 samples, 0.02%)</title><rect x="0.1558%" y="293" width="0.0195%" height="15" fill="rgb(231,60,39)" fg:x="8" fg:w="1"/><text x="0.4058%" y="303.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.02%)</title><rect x="0.1558%" y="277" width="0.0195%" height="15" fill="rgb(208,69,12)" fg:x="8" fg:w="1"/><text x="0.4058%" y="287.50"></text></g><g><title>tokio::runtime::task::core::Header::get_tracing_id (1 samples, 0.02%)</title><rect x="0.1558%" y="261" width="0.0195%" height="15" fill="rgb(235,93,37)" fg:x="8" fg:w="1"/><text x="0.4058%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.02%)</title><rect x="0.1558%" y="245" width="0.0195%" height="15" fill="rgb(213,116,39)" fg:x="8" fg:w="1"/><text x="0.4058%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1 samples, 0.02%)</title><rect x="0.1753%" y="325" width="0.0195%" height="15" fill="rgb(222,207,29)" fg:x="9" fg:w="1"/><text x="0.4253%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.02%)</title><rect x="0.1753%" y="309" width="0.0195%" height="15" fill="rgb(206,96,30)" fg:x="9" fg:w="1"/><text x="0.4253%" y="319.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (1 samples, 0.02%)</title><rect x="0.2142%" y="277" width="0.0195%" height="15" fill="rgb(218,138,4)" fg:x="11" fg:w="1"/><text x="0.4642%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (1 samples, 0.02%)</title><rect x="0.2142%" y="261" width="0.0195%" height="15" fill="rgb(250,191,14)" fg:x="11" fg:w="1"/><text x="0.4642%" y="271.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (1 samples, 0.02%)</title><rect x="0.2142%" y="245" width="0.0195%" height="15" fill="rgb(239,60,40)" fg:x="11" fg:w="1"/><text x="0.4642%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicI32::load (2 samples, 0.04%)</title><rect x="0.2337%" y="213" width="0.0389%" height="15" fill="rgb(206,27,48)" fg:x="12" fg:w="2"/><text x="0.4837%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.04%)</title><rect x="0.2337%" y="197" width="0.0389%" height="15" fill="rgb(225,35,8)" fg:x="12" fg:w="2"/><text x="0.4837%" y="207.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_condvar (6 samples, 0.12%)</title><rect x="0.1753%" y="341" width="0.1168%" height="15" fill="rgb(250,213,24)" fg:x="9" fg:w="6"/><text x="0.4253%" y="351.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (5 samples, 0.10%)</title><rect x="0.1947%" y="325" width="0.0974%" height="15" fill="rgb(247,123,22)" fg:x="10" fg:w="5"/><text x="0.4447%" y="335.50"></text></g><g><title>parking_lot::condvar::Condvar::wait (5 samples, 0.10%)</title><rect x="0.1947%" y="309" width="0.0974%" height="15" fill="rgb(231,138,38)" fg:x="10" fg:w="5"/><text x="0.4447%" y="319.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (5 samples, 0.10%)</title><rect x="0.1947%" y="293" width="0.0974%" height="15" fill="rgb(231,145,46)" fg:x="10" fg:w="5"/><text x="0.4447%" y="303.50"></text></g><g><title>parking_lot_core::parking_lot::park (3 samples, 0.06%)</title><rect x="0.2337%" y="277" width="0.0584%" height="15" fill="rgb(251,118,11)" fg:x="12" fg:w="3"/><text x="0.4837%" y="287.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (3 samples, 0.06%)</title><rect x="0.2337%" y="261" width="0.0584%" height="15" fill="rgb(217,147,25)" fg:x="12" fg:w="3"/><text x="0.4837%" y="271.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (3 samples, 0.06%)</title><rect x="0.2337%" y="245" width="0.0584%" height="15" fill="rgb(247,81,37)" fg:x="12" fg:w="3"/><text x="0.4837%" y="255.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (3 samples, 0.06%)</title><rect x="0.2337%" y="229" width="0.0584%" height="15" fill="rgb(209,12,38)" fg:x="12" fg:w="3"/><text x="0.4837%" y="239.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (1 samples, 0.02%)</title><rect x="0.2726%" y="213" width="0.0195%" height="15" fill="rgb(227,1,9)" fg:x="14" fg:w="1"/><text x="0.5226%" y="223.50"></text></g><g><title>syscall (1 samples, 0.02%)</title><rect x="0.2726%" y="197" width="0.0195%" height="15" fill="rgb(248,47,43)" fg:x="14" fg:w="1"/><text x="0.5226%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.04%)</title><rect x="0.2921%" y="245" width="0.0389%" height="15" fill="rgb(221,10,30)" fg:x="15" fg:w="2"/><text x="0.5421%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2 samples, 0.04%)</title><rect x="0.2921%" y="229" width="0.0389%" height="15" fill="rgb(210,229,1)" fg:x="15" fg:w="2"/><text x="0.5421%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.04%)</title><rect x="0.2921%" y="213" width="0.0389%" height="15" fill="rgb(222,148,37)" fg:x="15" fg:w="2"/><text x="0.5421%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.04%)</title><rect x="0.2921%" y="197" width="0.0389%" height="15" fill="rgb(234,67,33)" fg:x="15" fg:w="2"/><text x="0.5421%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.04%)</title><rect x="0.2921%" y="181" width="0.0389%" height="15" fill="rgb(247,98,35)" fg:x="15" fg:w="2"/><text x="0.5421%" y="191.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2 samples, 0.04%)</title><rect x="0.2921%" y="165" width="0.0389%" height="15" fill="rgb(247,138,52)" fg:x="15" fg:w="2"/><text x="0.5421%" y="175.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal::_{{closure}} (2 samples, 0.04%)</title><rect x="0.2921%" y="149" width="0.0389%" height="15" fill="rgb(213,79,30)" fg:x="15" fg:w="2"/><text x="0.5421%" y="159.50"></text></g><g><title>tokio::runtime::time::Inner::lock_sharded_wheel (2 samples, 0.04%)</title><rect x="0.2921%" y="133" width="0.0389%" height="15" fill="rgb(246,177,23)" fg:x="15" fg:w="2"/><text x="0.5421%" y="143.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (2 samples, 0.04%)</title><rect x="0.2921%" y="117" width="0.0389%" height="15" fill="rgb(230,62,27)" fg:x="15" fg:w="2"/><text x="0.5421%" y="127.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (2 samples, 0.04%)</title><rect x="0.2921%" y="101" width="0.0389%" height="15" fill="rgb(216,154,8)" fg:x="15" fg:w="2"/><text x="0.5421%" y="111.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (2 samples, 0.04%)</title><rect x="0.2921%" y="85" width="0.0389%" height="15" fill="rgb(244,35,45)" fg:x="15" fg:w="2"/><text x="0.5421%" y="95.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (2 samples, 0.04%)</title><rect x="0.2921%" y="69" width="0.0389%" height="15" fill="rgb(251,115,12)" fg:x="15" fg:w="2"/><text x="0.5421%" y="79.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (2 samples, 0.04%)</title><rect x="0.2921%" y="53" width="0.0389%" height="15" fill="rgb(240,54,50)" fg:x="15" fg:w="2"/><text x="0.5421%" y="63.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.06%)</title><rect x="0.2921%" y="309" width="0.0584%" height="15" fill="rgb(233,84,52)" fg:x="15" fg:w="3"/><text x="0.5421%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.06%)</title><rect x="0.2921%" y="293" width="0.0584%" height="15" fill="rgb(207,117,47)" fg:x="15" fg:w="3"/><text x="0.5421%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.06%)</title><rect x="0.2921%" y="277" width="0.0584%" height="15" fill="rgb(249,43,39)" fg:x="15" fg:w="3"/><text x="0.5421%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3 samples, 0.06%)</title><rect x="0.2921%" y="261" width="0.0584%" height="15" fill="rgb(209,38,44)" fg:x="15" fg:w="3"/><text x="0.5421%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.02%)</title><rect x="0.3311%" y="245" width="0.0195%" height="15" fill="rgb(236,212,23)" fg:x="17" fg:w="1"/><text x="0.5811%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="0.3311%" y="229" width="0.0195%" height="15" fill="rgb(242,79,21)" fg:x="17" fg:w="1"/><text x="0.5811%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="0.3311%" y="213" width="0.0195%" height="15" fill="rgb(211,96,35)" fg:x="17" fg:w="1"/><text x="0.5811%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1 samples, 0.02%)</title><rect x="0.3311%" y="197" width="0.0195%" height="15" fill="rgb(253,215,40)" fg:x="17" fg:w="1"/><text x="0.5811%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="0.3311%" y="181" width="0.0195%" height="15" fill="rgb(211,81,21)" fg:x="17" fg:w="1"/><text x="0.5811%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="0.3311%" y="165" width="0.0195%" height="15" fill="rgb(208,190,38)" fg:x="17" fg:w="1"/><text x="0.5811%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="0.3311%" y="149" width="0.0195%" height="15" fill="rgb(235,213,38)" fg:x="17" fg:w="1"/><text x="0.5811%" y="159.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="0.3311%" y="133" width="0.0195%" height="15" fill="rgb(237,122,38)" fg:x="17" fg:w="1"/><text x="0.5811%" y="143.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.02%)</title><rect x="0.3311%" y="117" width="0.0195%" height="15" fill="rgb(244,218,35)" fg:x="17" fg:w="1"/><text x="0.5811%" y="127.50"></text></g><g><title>mi_heap_malloc_aligned_at (1 samples, 0.02%)</title><rect x="0.3311%" y="101" width="0.0195%" height="15" fill="rgb(240,68,47)" fg:x="17" fg:w="1"/><text x="0.5811%" y="111.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at (1 samples, 0.02%)</title><rect x="0.3311%" y="85" width="0.0195%" height="15" fill="rgb(210,16,53)" fg:x="17" fg:w="1"/><text x="0.5811%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="0.3505%" y="165" width="0.0195%" height="15" fill="rgb(235,124,12)" fg:x="18" fg:w="1"/><text x="0.6005%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="0.3505%" y="149" width="0.0195%" height="15" fill="rgb(224,169,11)" fg:x="18" fg:w="1"/><text x="0.6005%" y="159.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="0.3505%" y="133" width="0.0195%" height="15" fill="rgb(250,166,2)" fg:x="18" fg:w="1"/><text x="0.6005%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min (3 samples, 0.06%)</title><rect x="0.3505%" y="309" width="0.0584%" height="15" fill="rgb(242,216,29)" fg:x="18" fg:w="3"/><text x="0.6005%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (3 samples, 0.06%)</title><rect x="0.3505%" y="293" width="0.0584%" height="15" fill="rgb(230,116,27)" fg:x="18" fg:w="3"/><text x="0.6005%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (3 samples, 0.06%)</title><rect x="0.3505%" y="277" width="0.0584%" height="15" fill="rgb(228,99,48)" fg:x="18" fg:w="3"/><text x="0.6005%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.06%)</title><rect x="0.3505%" y="261" width="0.0584%" height="15" fill="rgb(253,11,6)" fg:x="18" fg:w="3"/><text x="0.6005%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find_map (3 samples, 0.06%)</title><rect x="0.3505%" y="245" width="0.0584%" height="15" fill="rgb(247,143,39)" fg:x="18" fg:w="3"/><text x="0.6005%" y="255.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3 samples, 0.06%)</title><rect x="0.3505%" y="229" width="0.0584%" height="15" fill="rgb(236,97,10)" fg:x="18" fg:w="3"/><text x="0.6005%" y="239.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal::_{{closure}} (3 samples, 0.06%)</title><rect x="0.3505%" y="213" width="0.0584%" height="15" fill="rgb(233,208,19)" fg:x="18" fg:w="3"/><text x="0.6005%" y="223.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration_time (3 samples, 0.06%)</title><rect x="0.3505%" y="197" width="0.0584%" height="15" fill="rgb(216,164,2)" fg:x="18" fg:w="3"/><text x="0.6005%" y="207.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (3 samples, 0.06%)</title><rect x="0.3505%" y="181" width="0.0584%" height="15" fill="rgb(220,129,5)" fg:x="18" fg:w="3"/><text x="0.6005%" y="191.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (2 samples, 0.04%)</title><rect x="0.3700%" y="165" width="0.0389%" height="15" fill="rgb(242,17,10)" fg:x="19" fg:w="2"/><text x="0.6200%" y="175.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_occupied_slot (2 samples, 0.04%)</title><rect x="0.3700%" y="149" width="0.0389%" height="15" fill="rgb(242,107,0)" fg:x="19" fg:w="2"/><text x="0.6200%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="0.4090%" y="277" width="0.0195%" height="15" fill="rgb(251,28,31)" fg:x="21" fg:w="1"/><text x="0.6590%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::time::wheel::Wheel&gt;]&gt; (1 samples, 0.02%)</title><rect x="0.4090%" y="261" width="0.0195%" height="15" fill="rgb(233,223,10)" fg:x="21" fg:w="1"/><text x="0.6590%" y="271.50"></text></g><g><title>core::mem::drop (2 samples, 0.04%)</title><rect x="0.4090%" y="309" width="0.0389%" height="15" fill="rgb(215,21,27)" fg:x="21" fg:w="2"/><text x="0.6590%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::time::wheel::Wheel&gt;&gt;&gt; (2 samples, 0.04%)</title><rect x="0.4090%" y="293" width="0.0389%" height="15" fill="rgb(232,23,21)" fg:x="21" fg:w="2"/><text x="0.6590%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::time::wheel::Wheel&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="0.4284%" y="277" width="0.0195%" height="15" fill="rgb(244,5,23)" fg:x="22" fg:w="1"/><text x="0.6784%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="0.4284%" y="261" width="0.0195%" height="15" fill="rgb(226,81,46)" fg:x="22" fg:w="1"/><text x="0.6784%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="0.4284%" y="245" width="0.0195%" height="15" fill="rgb(247,70,30)" fg:x="22" fg:w="1"/><text x="0.6784%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="0.4284%" y="229" width="0.0195%" height="15" fill="rgb(212,68,19)" fg:x="22" fg:w="1"/><text x="0.6784%" y="239.50"></text></g><g><title>__rust_dealloc (1 samples, 0.02%)</title><rect x="0.4284%" y="213" width="0.0195%" height="15" fill="rgb(240,187,13)" fg:x="22" fg:w="1"/><text x="0.6784%" y="223.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (1 samples, 0.02%)</title><rect x="0.4284%" y="197" width="0.0195%" height="15" fill="rgb(223,113,26)" fg:x="22" fg:w="1"/><text x="0.6784%" y="207.50"></text></g><g><title>_mi_page_retire (1 samples, 0.02%)</title><rect x="0.4284%" y="181" width="0.0195%" height="15" fill="rgb(206,192,2)" fg:x="22" fg:w="1"/><text x="0.6784%" y="191.50"></text></g><g><title>core::mem::drop (1 samples, 0.02%)</title><rect x="0.4479%" y="277" width="0.0195%" height="15" fill="rgb(241,108,4)" fg:x="23" fg:w="1"/><text x="0.6979%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::io::scheduled_io::Waiters&gt;&gt; (1 samples, 0.02%)</title><rect x="0.4479%" y="261" width="0.0195%" height="15" fill="rgb(247,173,49)" fg:x="23" fg:w="1"/><text x="0.6979%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::io::scheduled_io::Waiters&gt;&gt; (1 samples, 0.02%)</title><rect x="0.4479%" y="245" width="0.0195%" height="15" fill="rgb(224,114,35)" fg:x="23" fg:w="1"/><text x="0.6979%" y="255.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="0.4479%" y="229" width="0.0195%" height="15" fill="rgb(245,159,27)" fg:x="23" fg:w="1"/><text x="0.6979%" y="239.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (1 samples, 0.02%)</title><rect x="0.4479%" y="213" width="0.0195%" height="15" fill="rgb(245,172,44)" fg:x="23" fg:w="1"/><text x="0.6979%" y="223.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (1 samples, 0.02%)</title><rect x="0.4479%" y="197" width="0.0195%" height="15" fill="rgb(236,23,11)" fg:x="23" fg:w="1"/><text x="0.6979%" y="207.50"></text></g><g><title>tokio::runtime::task::core::Header::get_tracing_id (1 samples, 0.02%)</title><rect x="0.4674%" y="229" width="0.0195%" height="15" fill="rgb(205,117,38)" fg:x="24" fg:w="1"/><text x="0.7174%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.02%)</title><rect x="0.4674%" y="213" width="0.0195%" height="15" fill="rgb(237,72,25)" fg:x="24" fg:w="1"/><text x="0.7174%" y="223.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (3 samples, 0.06%)</title><rect x="0.4479%" y="309" width="0.0584%" height="15" fill="rgb(244,70,9)" fg:x="23" fg:w="3"/><text x="0.6979%" y="319.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (3 samples, 0.06%)</title><rect x="0.4479%" y="293" width="0.0584%" height="15" fill="rgb(217,125,39)" fg:x="23" fg:w="3"/><text x="0.6979%" y="303.50"></text></g><g><title>tokio::util::wake_list::WakeList::wake_all (2 samples, 0.04%)</title><rect x="0.4674%" y="277" width="0.0389%" height="15" fill="rgb(235,36,10)" fg:x="24" fg:w="2"/><text x="0.7174%" y="287.50"></text></g><g><title>core::task::wake::Waker::wake (2 samples, 0.04%)</title><rect x="0.4674%" y="261" width="0.0389%" height="15" fill="rgb(251,123,47)" fg:x="24" fg:w="2"/><text x="0.7174%" y="271.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (2 samples, 0.04%)</title><rect x="0.4674%" y="245" width="0.0389%" height="15" fill="rgb(221,13,13)" fg:x="24" fg:w="2"/><text x="0.7174%" y="255.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (1 samples, 0.02%)</title><rect x="0.4869%" y="229" width="0.0195%" height="15" fill="rgb(238,131,9)" fg:x="25" fg:w="1"/><text x="0.7369%" y="239.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (1 samples, 0.02%)</title><rect x="0.4869%" y="213" width="0.0195%" height="15" fill="rgb(211,50,8)" fg:x="25" fg:w="1"/><text x="0.7369%" y="223.50"></text></g><g><title>tokio::runtime::task::raw::schedule (1 samples, 0.02%)</title><rect x="0.4869%" y="197" width="0.0195%" height="15" fill="rgb(245,182,24)" fg:x="25" fg:w="1"/><text x="0.7369%" y="207.50"></text></g><g><title>core::mem::drop (1 samples, 0.02%)</title><rect x="0.5063%" y="117" width="0.0195%" height="15" fill="rgb(242,14,37)" fg:x="26" fg:w="1"/><text x="0.7563%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::time::wheel::Wheel&gt;&gt; (1 samples, 0.02%)</title><rect x="0.5063%" y="101" width="0.0195%" height="15" fill="rgb(246,228,12)" fg:x="26" fg:w="1"/><text x="0.7563%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::time::wheel::Wheel&gt;&gt; (1 samples, 0.02%)</title><rect x="0.5063%" y="85" width="0.0195%" height="15" fill="rgb(213,55,15)" fg:x="26" fg:w="1"/><text x="0.7563%" y="95.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="0.5063%" y="69" width="0.0195%" height="15" fill="rgb(209,9,3)" fg:x="26" fg:w="1"/><text x="0.7563%" y="79.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (1 samples, 0.02%)</title><rect x="0.5063%" y="53" width="0.0195%" height="15" fill="rgb(230,59,30)" fg:x="26" fg:w="1"/><text x="0.7563%" y="63.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (1 samples, 0.02%)</title><rect x="0.5063%" y="37" width="0.0195%" height="15" fill="rgb(209,121,21)" fg:x="26" fg:w="1"/><text x="0.7563%" y="47.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (19 samples, 0.37%)</title><rect x="0.1753%" y="389" width="0.3700%" height="15" fill="rgb(220,109,13)" fg:x="9" fg:w="19"/><text x="0.4253%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (19 samples, 0.37%)</title><rect x="0.1753%" y="373" width="0.3700%" height="15" fill="rgb(232,18,1)" fg:x="9" fg:w="19"/><text x="0.4253%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park (19 samples, 0.37%)</title><rect x="0.1753%" y="357" width="0.3700%" height="15" fill="rgb(215,41,42)" fg:x="9" fg:w="19"/><text x="0.4253%" y="367.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_driver (13 samples, 0.25%)</title><rect x="0.2921%" y="341" width="0.2532%" height="15" fill="rgb(224,123,36)" fg:x="15" fg:w="13"/><text x="0.5421%" y="351.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (13 samples, 0.25%)</title><rect x="0.2921%" y="325" width="0.2532%" height="15" fill="rgb(240,125,3)" fg:x="15" fg:w="13"/><text x="0.5421%" y="335.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process (2 samples, 0.04%)</title><rect x="0.5063%" y="309" width="0.0389%" height="15" fill="rgb(205,98,50)" fg:x="26" fg:w="2"/><text x="0.7563%" y="319.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (2 samples, 0.04%)</title><rect x="0.5063%" y="293" width="0.0389%" height="15" fill="rgb(205,185,37)" fg:x="26" fg:w="2"/><text x="0.7563%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min (2 samples, 0.04%)</title><rect x="0.5063%" y="277" width="0.0389%" height="15" fill="rgb(238,207,15)" fg:x="26" fg:w="2"/><text x="0.7563%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (2 samples, 0.04%)</title><rect x="0.5063%" y="261" width="0.0389%" height="15" fill="rgb(213,199,42)" fg:x="26" fg:w="2"/><text x="0.7563%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (2 samples, 0.04%)</title><rect x="0.5063%" y="245" width="0.0389%" height="15" fill="rgb(235,201,11)" fg:x="26" fg:w="2"/><text x="0.7563%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.04%)</title><rect x="0.5063%" y="229" width="0.0389%" height="15" fill="rgb(207,46,11)" fg:x="26" fg:w="2"/><text x="0.7563%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (2 samples, 0.04%)</title><rect x="0.5063%" y="213" width="0.0389%" height="15" fill="rgb(241,35,35)" fg:x="26" fg:w="2"/><text x="0.7563%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.04%)</title><rect x="0.5063%" y="197" width="0.0389%" height="15" fill="rgb(243,32,47)" fg:x="26" fg:w="2"/><text x="0.7563%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (2 samples, 0.04%)</title><rect x="0.5063%" y="181" width="0.0389%" height="15" fill="rgb(247,202,23)" fg:x="26" fg:w="2"/><text x="0.7563%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (2 samples, 0.04%)</title><rect x="0.5063%" y="165" width="0.0389%" height="15" fill="rgb(219,102,11)" fg:x="26" fg:w="2"/><text x="0.7563%" y="175.50"></text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time::_{{closure}} (2 samples, 0.04%)</title><rect x="0.5063%" y="149" width="0.0389%" height="15" fill="rgb(243,110,44)" fg:x="26" fg:w="2"/><text x="0.7563%" y="159.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_sharded_time (2 samples, 0.04%)</title><rect x="0.5063%" y="133" width="0.0389%" height="15" fill="rgb(222,74,54)" fg:x="26" fg:w="2"/><text x="0.7563%" y="143.50"></text></g><g><title>tokio::runtime::time::Inner::lock_sharded_wheel (1 samples, 0.02%)</title><rect x="0.5258%" y="117" width="0.0195%" height="15" fill="rgb(216,99,12)" fg:x="27" fg:w="1"/><text x="0.7758%" y="127.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (1 samples, 0.02%)</title><rect x="0.5258%" y="101" width="0.0195%" height="15" fill="rgb(226,22,26)" fg:x="27" fg:w="1"/><text x="0.7758%" y="111.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (1 samples, 0.02%)</title><rect x="0.5258%" y="85" width="0.0195%" height="15" fill="rgb(217,163,10)" fg:x="27" fg:w="1"/><text x="0.7758%" y="95.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (1 samples, 0.02%)</title><rect x="0.5258%" y="69" width="0.0195%" height="15" fill="rgb(213,25,53)" fg:x="27" fg:w="1"/><text x="0.7758%" y="79.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (1 samples, 0.02%)</title><rect x="0.5258%" y="53" width="0.0195%" height="15" fill="rgb(252,105,26)" fg:x="27" fg:w="1"/><text x="0.7758%" y="63.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (1 samples, 0.02%)</title><rect x="0.5258%" y="37" width="0.0195%" height="15" fill="rgb(220,39,43)" fg:x="27" fg:w="1"/><text x="0.7758%" y="47.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::maintenance (1 samples, 0.02%)</title><rect x="0.5453%" y="389" width="0.0195%" height="15" fill="rgb(229,68,48)" fg:x="28" fg:w="1"/><text x="0.7953%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park (21 samples, 0.41%)</title><rect x="0.1753%" y="405" width="0.4090%" height="15" fill="rgb(252,8,32)" fg:x="9" fg:w="21"/><text x="0.4253%" y="415.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_to_parked (1 samples, 0.02%)</title><rect x="0.5648%" y="389" width="0.0195%" height="15" fill="rgb(223,20,43)" fg:x="29" fg:w="1"/><text x="0.8148%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::transition_worker_to_parked (1 samples, 0.02%)</title><rect x="0.5648%" y="373" width="0.0195%" height="15" fill="rgb(229,81,49)" fg:x="29" fg:w="1"/><text x="0.8148%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (1 samples, 0.02%)</title><rect x="0.5648%" y="357" width="0.0195%" height="15" fill="rgb(236,28,36)" fg:x="29" fg:w="1"/><text x="0.8148%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (1 samples, 0.02%)</title><rect x="0.5648%" y="341" width="0.0195%" height="15" fill="rgb(249,185,26)" fg:x="29" fg:w="1"/><text x="0.8148%" y="351.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="0.5648%" y="325" width="0.0195%" height="15" fill="rgb(249,174,33)" fg:x="29" fg:w="1"/><text x="0.8148%" y="335.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (1 samples, 0.02%)</title><rect x="0.5648%" y="309" width="0.0195%" height="15" fill="rgb(233,201,37)" fg:x="29" fg:w="1"/><text x="0.8148%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (1 samples, 0.02%)</title><rect x="0.5648%" y="293" width="0.0195%" height="15" fill="rgb(221,78,26)" fg:x="29" fg:w="1"/><text x="0.8148%" y="303.50"></text></g><g><title>tokio::runtime::coop::budget (1 samples, 0.02%)</title><rect x="0.5842%" y="389" width="0.0195%" height="15" fill="rgb(250,127,30)" fg:x="30" fg:w="1"/><text x="0.8342%" y="399.50"></text></g><g><title>tokio::runtime::coop::with_budget (1 samples, 0.02%)</title><rect x="0.5842%" y="373" width="0.0195%" height="15" fill="rgb(230,49,44)" fg:x="30" fg:w="1"/><text x="0.8342%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::_{{closure}} (1 samples, 0.02%)</title><rect x="0.5842%" y="357" width="0.0195%" height="15" fill="rgb(229,67,23)" fg:x="30" fg:w="1"/><text x="0.8342%" y="367.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::reset_lifo_enabled (1 samples, 0.02%)</title><rect x="0.5842%" y="341" width="0.0195%" height="15" fill="rgb(249,83,47)" fg:x="30" fg:w="1"/><text x="0.8342%" y="351.50"></text></g><g><title>syscall (1 samples, 0.02%)</title><rect x="0.6037%" y="357" width="0.0195%" height="15" fill="rgb(215,43,3)" fg:x="31" fg:w="1"/><text x="0.8537%" y="367.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::transition_worker_from_searching (1 samples, 0.02%)</title><rect x="0.6232%" y="357" width="0.0195%" height="15" fill="rgb(238,154,13)" fg:x="32" fg:w="1"/><text x="0.8732%" y="367.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::State::dec_num_searching (1 samples, 0.02%)</title><rect x="0.6232%" y="341" width="0.0195%" height="15" fill="rgb(219,56,2)" fg:x="32" fg:w="1"/><text x="0.8732%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (4 samples, 0.08%)</title><rect x="0.5842%" y="405" width="0.0779%" height="15" fill="rgb(233,0,4)" fg:x="30" fg:w="4"/><text x="0.8342%" y="415.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_from_searching (3 samples, 0.06%)</title><rect x="0.6037%" y="389" width="0.0584%" height="15" fill="rgb(235,30,7)" fg:x="31" fg:w="3"/><text x="0.8537%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::transition_worker_from_searching (3 samples, 0.06%)</title><rect x="0.6037%" y="373" width="0.0584%" height="15" fill="rgb(250,79,13)" fg:x="31" fg:w="3"/><text x="0.8537%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (1 samples, 0.02%)</title><rect x="0.6426%" y="357" width="0.0195%" height="15" fill="rgb(211,146,34)" fg:x="33" fg:w="1"/><text x="0.8926%" y="367.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (1 samples, 0.02%)</title><rect x="0.6426%" y="341" width="0.0195%" height="15" fill="rgb(228,22,38)" fg:x="33" fg:w="1"/><text x="0.8926%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark_condvar (1 samples, 0.02%)</title><rect x="0.6426%" y="325" width="0.0195%" height="15" fill="rgb(235,168,5)" fg:x="33" fg:w="1"/><text x="0.8926%" y="335.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (1 samples, 0.02%)</title><rect x="0.6426%" y="309" width="0.0195%" height="15" fill="rgb(221,155,16)" fg:x="33" fg:w="1"/><text x="0.8926%" y="319.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (1 samples, 0.02%)</title><rect x="0.6426%" y="293" width="0.0195%" height="15" fill="rgb(215,215,53)" fg:x="33" fg:w="1"/><text x="0.8926%" y="303.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (1 samples, 0.02%)</title><rect x="0.6426%" y="277" width="0.0195%" height="15" fill="rgb(223,4,10)" fg:x="33" fg:w="1"/><text x="0.8926%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (1 samples, 0.02%)</title><rect x="0.6426%" y="261" width="0.0195%" height="15" fill="rgb(234,103,6)" fg:x="33" fg:w="1"/><text x="0.8926%" y="271.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (1 samples, 0.02%)</title><rect x="0.6426%" y="245" width="0.0195%" height="15" fill="rgb(227,97,0)" fg:x="33" fg:w="1"/><text x="0.8926%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (1 samples, 0.02%)</title><rect x="0.6621%" y="389" width="0.0195%" height="15" fill="rgb(234,150,53)" fg:x="34" fg:w="1"/><text x="0.9121%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_task::_{{closure}} (1 samples, 0.02%)</title><rect x="0.6621%" y="373" width="0.0195%" height="15" fill="rgb(228,201,54)" fg:x="34" fg:w="1"/><text x="0.9121%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_local_task (1 samples, 0.02%)</title><rect x="0.6621%" y="357" width="0.0195%" height="15" fill="rgb(222,22,37)" fg:x="34" fg:w="1"/><text x="0.9121%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (1 samples, 0.02%)</title><rect x="0.6621%" y="341" width="0.0195%" height="15" fill="rgb(237,53,32)" fg:x="34" fg:w="1"/><text x="0.9121%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_local_task::_{{closure}} (1 samples, 0.02%)</title><rect x="0.6621%" y="325" width="0.0195%" height="15" fill="rgb(233,25,53)" fg:x="34" fg:w="1"/><text x="0.9121%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Local&lt;T&gt;::pop (1 samples, 0.02%)</title><rect x="0.6621%" y="309" width="0.0195%" height="15" fill="rgb(210,40,34)" fg:x="34" fg:w="1"/><text x="0.9121%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::unpack (1 samples, 0.02%)</title><rect x="0.6621%" y="293" width="0.0195%" height="15" fill="rgb(241,220,44)" fg:x="34" fg:w="1"/><text x="0.9121%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_task (2 samples, 0.04%)</title><rect x="0.6621%" y="405" width="0.0389%" height="15" fill="rgb(235,28,35)" fg:x="34" fg:w="2"/><text x="0.9121%" y="415.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::tune_global_queue_interval (1 samples, 0.02%)</title><rect x="0.6816%" y="389" width="0.0195%" height="15" fill="rgb(210,56,17)" fg:x="35" fg:w="1"/><text x="0.9316%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::tuned_global_queue_interval (1 samples, 0.02%)</title><rect x="0.6816%" y="373" width="0.0195%" height="15" fill="rgb(224,130,29)" fg:x="35" fg:w="1"/><text x="0.9316%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::steal_work (1 samples, 0.02%)</title><rect x="0.7011%" y="405" width="0.0195%" height="15" fill="rgb(235,212,8)" fg:x="36" fg:w="1"/><text x="0.9511%" y="415.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (1 samples, 0.02%)</title><rect x="0.7011%" y="389" width="0.0195%" height="15" fill="rgb(223,33,50)" fg:x="36" fg:w="1"/><text x="0.9511%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into2 (1 samples, 0.02%)</title><rect x="0.7011%" y="373" width="0.0195%" height="15" fill="rgb(219,149,13)" fg:x="36" fg:w="1"/><text x="0.9511%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::unpack (1 samples, 0.02%)</title><rect x="0.7011%" y="357" width="0.0195%" height="15" fill="rgb(250,156,29)" fg:x="36" fg:w="1"/><text x="0.9511%" y="367.50"></text></g><g><title>[libc.so.6] (35 samples, 0.68%)</title><rect x="0.0584%" y="1093" width="0.6816%" height="15" fill="rgb(216,193,19)" fg:x="3" fg:w="35"/><text x="0.3084%" y="1103.50"></text></g><g><title>[libc.so.6] (35 samples, 0.68%)</title><rect x="0.0584%" y="1077" width="0.6816%" height="15" fill="rgb(216,135,14)" fg:x="3" fg:w="35"/><text x="0.3084%" y="1087.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (35 samples, 0.68%)</title><rect x="0.0584%" y="1061" width="0.6816%" height="15" fill="rgb(241,47,5)" fg:x="3" fg:w="35"/><text x="0.3084%" y="1071.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (35 samples, 0.68%)</title><rect x="0.0584%" y="1045" width="0.6816%" height="15" fill="rgb(233,42,35)" fg:x="3" fg:w="35"/><text x="0.3084%" y="1055.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (35 samples, 0.68%)</title><rect x="0.0584%" y="1029" width="0.6816%" height="15" fill="rgb(231,13,6)" fg:x="3" fg:w="35"/><text x="0.3084%" y="1039.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (35 samples, 0.68%)</title><rect x="0.0584%" y="1013" width="0.6816%" height="15" fill="rgb(207,181,40)" fg:x="3" fg:w="35"/><text x="0.3084%" y="1023.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (35 samples, 0.68%)</title><rect x="0.0584%" y="997" width="0.6816%" height="15" fill="rgb(254,173,49)" fg:x="3" fg:w="35"/><text x="0.3084%" y="1007.50"></text></g><g><title>std::panic::catch_unwind (35 samples, 0.68%)</title><rect x="0.0584%" y="981" width="0.6816%" height="15" fill="rgb(221,1,38)" fg:x="3" fg:w="35"/><text x="0.3084%" y="991.50"></text></g><g><title>std::panicking::try (35 samples, 0.68%)</title><rect x="0.0584%" y="965" width="0.6816%" height="15" fill="rgb(206,124,46)" fg:x="3" fg:w="35"/><text x="0.3084%" y="975.50"></text></g><g><title>std::panicking::try::do_call (35 samples, 0.68%)</title><rect x="0.0584%" y="949" width="0.6816%" height="15" fill="rgb(249,21,11)" fg:x="3" fg:w="35"/><text x="0.3084%" y="959.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (35 samples, 0.68%)</title><rect x="0.0584%" y="933" width="0.6816%" height="15" fill="rgb(222,201,40)" fg:x="3" fg:w="35"/><text x="0.3084%" y="943.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (35 samples, 0.68%)</title><rect x="0.0584%" y="917" width="0.6816%" height="15" fill="rgb(235,61,29)" fg:x="3" fg:w="35"/><text x="0.3084%" y="927.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (35 samples, 0.68%)</title><rect x="0.0584%" y="901" width="0.6816%" height="15" fill="rgb(219,207,3)" fg:x="3" fg:w="35"/><text x="0.3084%" y="911.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::_{{closure}} (35 samples, 0.68%)</title><rect x="0.0584%" y="885" width="0.6816%" height="15" fill="rgb(222,56,46)" fg:x="3" fg:w="35"/><text x="0.3084%" y="895.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (35 samples, 0.68%)</title><rect x="0.0584%" y="869" width="0.6816%" height="15" fill="rgb(239,76,54)" fg:x="3" fg:w="35"/><text x="0.3084%" y="879.50"></text></g><g><title>tokio::runtime::blocking::pool::Task::run (35 samples, 0.68%)</title><rect x="0.0584%" y="853" width="0.6816%" height="15" fill="rgb(231,124,27)" fg:x="3" fg:w="35"/><text x="0.3084%" y="863.50"></text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (35 samples, 0.68%)</title><rect x="0.0584%" y="837" width="0.6816%" height="15" fill="rgb(249,195,6)" fg:x="3" fg:w="35"/><text x="0.3084%" y="847.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (35 samples, 0.68%)</title><rect x="0.0584%" y="821" width="0.6816%" height="15" fill="rgb(237,174,47)" fg:x="3" fg:w="35"/><text x="0.3084%" y="831.50"></text></g><g><title>tokio::runtime::task::raw::poll (35 samples, 0.68%)</title><rect x="0.0584%" y="805" width="0.6816%" height="15" fill="rgb(206,201,31)" fg:x="3" fg:w="35"/><text x="0.3084%" y="815.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (35 samples, 0.68%)</title><rect x="0.0584%" y="789" width="0.6816%" height="15" fill="rgb(231,57,52)" fg:x="3" fg:w="35"/><text x="0.3084%" y="799.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (35 samples, 0.68%)</title><rect x="0.0584%" y="773" width="0.6816%" height="15" fill="rgb(248,177,22)" fg:x="3" fg:w="35"/><text x="0.3084%" y="783.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (35 samples, 0.68%)</title><rect x="0.0584%" y="757" width="0.6816%" height="15" fill="rgb(215,211,37)" fg:x="3" fg:w="35"/><text x="0.3084%" y="767.50"></text></g><g><title>std::panic::catch_unwind (35 samples, 0.68%)</title><rect x="0.0584%" y="741" width="0.6816%" height="15" fill="rgb(241,128,51)" fg:x="3" fg:w="35"/><text x="0.3084%" y="751.50"></text></g><g><title>std::panicking::try (35 samples, 0.68%)</title><rect x="0.0584%" y="725" width="0.6816%" height="15" fill="rgb(227,165,31)" fg:x="3" fg:w="35"/><text x="0.3084%" y="735.50"></text></g><g><title>std::panicking::try::do_call (35 samples, 0.68%)</title><rect x="0.0584%" y="709" width="0.6816%" height="15" fill="rgb(228,167,24)" fg:x="3" fg:w="35"/><text x="0.3084%" y="719.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (35 samples, 0.68%)</title><rect x="0.0584%" y="693" width="0.6816%" height="15" fill="rgb(228,143,12)" fg:x="3" fg:w="35"/><text x="0.3084%" y="703.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (35 samples, 0.68%)</title><rect x="0.0584%" y="677" width="0.6816%" height="15" fill="rgb(249,149,8)" fg:x="3" fg:w="35"/><text x="0.3084%" y="687.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (35 samples, 0.68%)</title><rect x="0.0584%" y="661" width="0.6816%" height="15" fill="rgb(243,35,44)" fg:x="3" fg:w="35"/><text x="0.3084%" y="671.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (35 samples, 0.68%)</title><rect x="0.0584%" y="645" width="0.6816%" height="15" fill="rgb(246,89,9)" fg:x="3" fg:w="35"/><text x="0.3084%" y="655.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (35 samples, 0.68%)</title><rect x="0.0584%" y="629" width="0.6816%" height="15" fill="rgb(233,213,13)" fg:x="3" fg:w="35"/><text x="0.3084%" y="639.50"></text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (35 samples, 0.68%)</title><rect x="0.0584%" y="613" width="0.6816%" height="15" fill="rgb(233,141,41)" fg:x="3" fg:w="35"/><text x="0.3084%" y="623.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (35 samples, 0.68%)</title><rect x="0.0584%" y="597" width="0.6816%" height="15" fill="rgb(239,167,4)" fg:x="3" fg:w="35"/><text x="0.3084%" y="607.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::_{{closure}} (35 samples, 0.68%)</title><rect x="0.0584%" y="581" width="0.6816%" height="15" fill="rgb(209,217,16)" fg:x="3" fg:w="35"/><text x="0.3084%" y="591.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (35 samples, 0.68%)</title><rect x="0.0584%" y="565" width="0.6816%" height="15" fill="rgb(219,88,35)" fg:x="3" fg:w="35"/><text x="0.3084%" y="575.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (35 samples, 0.68%)</title><rect x="0.0584%" y="549" width="0.6816%" height="15" fill="rgb(220,193,23)" fg:x="3" fg:w="35"/><text x="0.3084%" y="559.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}} (35 samples, 0.68%)</title><rect x="0.0584%" y="533" width="0.6816%" height="15" fill="rgb(230,90,52)" fg:x="3" fg:w="35"/><text x="0.3084%" y="543.50"></text></g><g><title>tokio::runtime::context::set_scheduler (35 samples, 0.68%)</title><rect x="0.0584%" y="517" width="0.6816%" height="15" fill="rgb(252,106,19)" fg:x="3" fg:w="35"/><text x="0.3084%" y="527.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (35 samples, 0.68%)</title><rect x="0.0584%" y="501" width="0.6816%" height="15" fill="rgb(206,74,20)" fg:x="3" fg:w="35"/><text x="0.3084%" y="511.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (35 samples, 0.68%)</title><rect x="0.0584%" y="485" width="0.6816%" height="15" fill="rgb(230,138,44)" fg:x="3" fg:w="35"/><text x="0.3084%" y="495.50"></text></g><g><title>tokio::runtime::context::set_scheduler::_{{closure}} (35 samples, 0.68%)</title><rect x="0.0584%" y="469" width="0.6816%" height="15" fill="rgb(235,182,43)" fg:x="3" fg:w="35"/><text x="0.3084%" y="479.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (35 samples, 0.68%)</title><rect x="0.0584%" y="453" width="0.6816%" height="15" fill="rgb(242,16,51)" fg:x="3" fg:w="35"/><text x="0.3084%" y="463.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}::_{{closure}} (35 samples, 0.68%)</title><rect x="0.0584%" y="437" width="0.6816%" height="15" fill="rgb(248,9,4)" fg:x="3" fg:w="35"/><text x="0.3084%" y="447.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (35 samples, 0.68%)</title><rect x="0.0584%" y="421" width="0.6816%" height="15" fill="rgb(210,31,22)" fg:x="3" fg:w="35"/><text x="0.3084%" y="431.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::tick (1 samples, 0.02%)</title><rect x="0.7205%" y="405" width="0.0195%" height="15" fill="rgb(239,54,39)" fg:x="37" fg:w="1"/><text x="0.9705%" y="415.50"></text></g><g><title>[libc.so.6] (31 samples, 0.60%)</title><rect x="1.4411%" y="933" width="0.6037%" height="15" fill="rgb(230,99,41)" fg:x="74" fg:w="31"/><text x="1.6911%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::shared::db::object::Object::trigger_lock_event::{{closure}}::{{closure}}&gt; (3 samples, 0.06%)</title><rect x="2.0448%" y="933" width="0.0584%" height="15" fill="rgb(253,106,12)" fg:x="105" fg:w="3"/><text x="2.2948%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::Span&gt; (2 samples, 0.04%)</title><rect x="2.1032%" y="933" width="0.0389%" height="15" fill="rgb(213,46,41)" fg:x="108" fg:w="2"/><text x="2.3532%" y="943.50"></text></g><g><title>&lt;tracing::span::Span as core::ops::drop::Drop&gt;::drop (2 samples, 0.04%)</title><rect x="2.1032%" y="917" width="0.0389%" height="15" fill="rgb(215,133,35)" fg:x="108" fg:w="2"/><text x="2.3532%" y="927.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.02%)</title><rect x="3.1159%" y="869" width="0.0195%" height="15" fill="rgb(213,28,5)" fg:x="160" fg:w="1"/><text x="3.3659%" y="879.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.02%)</title><rect x="3.1159%" y="853" width="0.0195%" height="15" fill="rgb(215,77,49)" fg:x="160" fg:w="1"/><text x="3.3659%" y="863.50"></text></g><g><title>core::slice::index::get_noubcheck (1 samples, 0.02%)</title><rect x="3.1159%" y="837" width="0.0195%" height="15" fill="rgb(248,100,22)" fg:x="160" fg:w="1"/><text x="3.3659%" y="847.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (109 samples, 2.12%)</title><rect x="3.1548%" y="837" width="2.1227%" height="15" fill="rgb(208,67,9)" fg:x="162" fg:w="109"/><text x="3.4048%" y="847.50">c..</text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (109 samples, 2.12%)</title><rect x="3.1548%" y="821" width="2.1227%" height="15" fill="rgb(219,133,21)" fg:x="162" fg:w="109"/><text x="3.4048%" y="831.50">c..</text></g><g><title>parking_lot_core::parking_lot::park (2 samples, 0.04%)</title><rect x="5.4138%" y="821" width="0.0389%" height="15" fill="rgb(246,46,29)" fg:x="278" fg:w="2"/><text x="5.6638%" y="831.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (2 samples, 0.04%)</title><rect x="5.4138%" y="805" width="0.0389%" height="15" fill="rgb(246,185,52)" fg:x="278" fg:w="2"/><text x="5.6638%" y="815.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (2 samples, 0.04%)</title><rect x="5.4138%" y="789" width="0.0389%" height="15" fill="rgb(252,136,11)" fg:x="278" fg:w="2"/><text x="5.6638%" y="799.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (2 samples, 0.04%)</title><rect x="5.4138%" y="773" width="0.0389%" height="15" fill="rgb(219,138,53)" fg:x="278" fg:w="2"/><text x="5.6638%" y="783.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (1 samples, 0.02%)</title><rect x="5.4333%" y="757" width="0.0195%" height="15" fill="rgb(211,51,23)" fg:x="279" fg:w="1"/><text x="5.6833%" y="767.50"></text></g><g><title>syscall (1 samples, 0.02%)</title><rect x="5.4333%" y="741" width="0.0195%" height="15" fill="rgb(247,221,28)" fg:x="279" fg:w="1"/><text x="5.6833%" y="751.50"></text></g><g><title>core::hint::spin_loop (2 samples, 0.04%)</title><rect x="5.4528%" y="789" width="0.0389%" height="15" fill="rgb(251,222,45)" fg:x="280" fg:w="2"/><text x="5.7028%" y="799.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (2 samples, 0.04%)</title><rect x="5.4528%" y="773" width="0.0389%" height="15" fill="rgb(217,162,53)" fg:x="280" fg:w="2"/><text x="5.7028%" y="783.50"></text></g><g><title>parking_lot_core::spinwait::cpu_relax (7 samples, 0.14%)</title><rect x="5.4528%" y="805" width="0.1363%" height="15" fill="rgb(229,93,14)" fg:x="280" fg:w="7"/><text x="5.7028%" y="815.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (5 samples, 0.10%)</title><rect x="5.4917%" y="789" width="0.0974%" height="15" fill="rgb(209,67,49)" fg:x="282" fg:w="5"/><text x="5.7417%" y="799.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (5 samples, 0.10%)</title><rect x="5.4917%" y="773" width="0.0974%" height="15" fill="rgb(213,87,29)" fg:x="282" fg:w="5"/><text x="5.7417%" y="783.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_write_shard (128 samples, 2.49%)</title><rect x="3.1159%" y="885" width="2.4927%" height="15" fill="rgb(205,151,52)" fg:x="160" fg:w="128"/><text x="3.3659%" y="895.50">&lt;d..</text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::write (127 samples, 2.47%)</title><rect x="3.1353%" y="869" width="2.4732%" height="15" fill="rgb(253,215,39)" fg:x="161" fg:w="127"/><text x="3.3853%" y="879.50">lo..</text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_exclusive (127 samples, 2.47%)</title><rect x="3.1353%" y="853" width="2.4732%" height="15" fill="rgb(221,220,41)" fg:x="161" fg:w="127"/><text x="3.3853%" y="863.50">&lt;d..</text></g><g><title>dashmap::lock::RawRwLock::lock_exclusive_slow (17 samples, 0.33%)</title><rect x="5.2775%" y="837" width="0.3311%" height="15" fill="rgb(218,133,21)" fg:x="271" fg:w="17"/><text x="5.5275%" y="847.50"></text></g><g><title>parking_lot_core::spinwait::SpinWait::spin (8 samples, 0.16%)</title><rect x="5.4528%" y="821" width="0.1558%" height="15" fill="rgb(221,193,43)" fg:x="280" fg:w="8"/><text x="5.7028%" y="831.50"></text></g><g><title>parking_lot_core::thread_parker::imp::thread_yield (1 samples, 0.02%)</title><rect x="5.5891%" y="805" width="0.0195%" height="15" fill="rgb(240,128,52)" fg:x="287" fg:w="1"/><text x="5.8391%" y="815.50"></text></g><g><title>std::thread::yield_now (1 samples, 0.02%)</title><rect x="5.5891%" y="789" width="0.0195%" height="15" fill="rgb(253,114,12)" fg:x="287" fg:w="1"/><text x="5.8391%" y="799.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::yield_now (1 samples, 0.02%)</title><rect x="5.5891%" y="773" width="0.0195%" height="15" fill="rgb(215,223,47)" fg:x="287" fg:w="1"/><text x="5.8391%" y="783.50"></text></g><g><title>__sched_yield (1 samples, 0.02%)</title><rect x="5.5891%" y="757" width="0.0195%" height="15" fill="rgb(248,225,23)" fg:x="287" fg:w="1"/><text x="5.8391%" y="767.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::determine_shard (1 samples, 0.02%)</title><rect x="5.6086%" y="885" width="0.0195%" height="15" fill="rgb(250,108,0)" fg:x="288" fg:w="1"/><text x="5.8586%" y="895.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (4 samples, 0.08%)</title><rect x="5.6280%" y="869" width="0.0779%" height="15" fill="rgb(228,208,7)" fg:x="289" fg:w="4"/><text x="5.8780%" y="879.50"></text></g><g><title>ahash::operations::folded_multiply (4 samples, 0.08%)</title><rect x="5.6280%" y="853" width="0.0779%" height="15" fill="rgb(244,45,10)" fg:x="289" fg:w="4"/><text x="5.8780%" y="863.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (4 samples, 0.08%)</title><rect x="5.6280%" y="837" width="0.0779%" height="15" fill="rgb(207,125,25)" fg:x="289" fg:w="4"/><text x="5.8780%" y="847.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.04%)</title><rect x="5.7059%" y="869" width="0.0389%" height="15" fill="rgb(210,195,18)" fg:x="293" fg:w="2"/><text x="5.9559%" y="879.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (2 samples, 0.04%)</title><rect x="5.7059%" y="853" width="0.0389%" height="15" fill="rgb(249,80,12)" fg:x="293" fg:w="2"/><text x="5.9559%" y="863.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (3 samples, 0.06%)</title><rect x="5.9202%" y="789" width="0.0584%" height="15" fill="rgb(221,65,9)" fg:x="304" fg:w="3"/><text x="6.1702%" y="799.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::hash::Hash&gt;::hash (4 samples, 0.08%)</title><rect x="5.9202%" y="853" width="0.0779%" height="15" fill="rgb(235,49,36)" fg:x="304" fg:w="4"/><text x="6.1702%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (4 samples, 0.08%)</title><rect x="5.9202%" y="837" width="0.0779%" height="15" fill="rgb(225,32,20)" fg:x="304" fg:w="4"/><text x="6.1702%" y="847.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (4 samples, 0.08%)</title><rect x="5.9202%" y="821" width="0.0779%" height="15" fill="rgb(215,141,46)" fg:x="304" fg:w="4"/><text x="6.1702%" y="831.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (4 samples, 0.08%)</title><rect x="5.9202%" y="805" width="0.0779%" height="15" fill="rgb(250,160,47)" fg:x="304" fg:w="4"/><text x="6.1702%" y="815.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (1 samples, 0.02%)</title><rect x="5.9786%" y="789" width="0.0195%" height="15" fill="rgb(216,222,40)" fg:x="307" fg:w="1"/><text x="6.2286%" y="799.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_u64 (23 samples, 0.45%)</title><rect x="5.6280%" y="885" width="0.4479%" height="15" fill="rgb(234,217,39)" fg:x="289" fg:w="23"/><text x="5.8780%" y="895.50"></text></g><g><title>&lt;rutin::shared::db::object::str::Str as core::hash::Hash&gt;::hash (17 samples, 0.33%)</title><rect x="5.7449%" y="869" width="0.3311%" height="15" fill="rgb(207,178,40)" fg:x="295" fg:w="17"/><text x="5.9949%" y="879.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (4 samples, 0.08%)</title><rect x="5.9981%" y="853" width="0.0779%" height="15" fill="rgb(221,136,13)" fg:x="308" fg:w="4"/><text x="6.2481%" y="863.50"></text></g><g><title>core::hash::Hasher::write_isize (4 samples, 0.08%)</title><rect x="5.9981%" y="837" width="0.0779%" height="15" fill="rgb(249,199,10)" fg:x="308" fg:w="4"/><text x="6.2481%" y="847.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (4 samples, 0.08%)</title><rect x="5.9981%" y="821" width="0.0779%" height="15" fill="rgb(249,222,13)" fg:x="308" fg:w="4"/><text x="6.2481%" y="831.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (4 samples, 0.08%)</title><rect x="5.9981%" y="805" width="0.0779%" height="15" fill="rgb(244,185,38)" fg:x="308" fg:w="4"/><text x="6.2481%" y="815.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (4 samples, 0.08%)</title><rect x="5.9981%" y="789" width="0.0779%" height="15" fill="rgb(236,202,9)" fg:x="308" fg:w="4"/><text x="6.2481%" y="799.50"></text></g><g><title>ahash::operations::folded_multiply (2 samples, 0.04%)</title><rect x="6.0370%" y="773" width="0.0389%" height="15" fill="rgb(250,229,37)" fg:x="310" fg:w="2"/><text x="6.2870%" y="783.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (2 samples, 0.04%)</title><rect x="6.0370%" y="757" width="0.0389%" height="15" fill="rgb(206,174,23)" fg:x="310" fg:w="2"/><text x="6.2870%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="6.0954%" y="869" width="0.0195%" height="15" fill="rgb(211,33,43)" fg:x="313" fg:w="1"/><text x="6.3454%" y="879.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="6.1538%" y="853" width="0.0195%" height="15" fill="rgb(245,58,50)" fg:x="316" fg:w="1"/><text x="6.4038%" y="863.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (1 samples, 0.02%)</title><rect x="6.1538%" y="837" width="0.0195%" height="15" fill="rgb(244,68,36)" fg:x="316" fg:w="1"/><text x="6.4038%" y="847.50"></text></g><g><title>bytes::bytes::Bytes::as_slice (9 samples, 0.18%)</title><rect x="8.5492%" y="757" width="0.1753%" height="15" fill="rgb(232,229,15)" fg:x="439" fg:w="9"/><text x="8.7992%" y="767.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_entry::_{{closure}} (200 samples, 3.89%)</title><rect x="6.1928%" y="837" width="3.8948%" height="15" fill="rgb(254,30,23)" fg:x="318" fg:w="200"/><text x="6.4428%" y="847.50">&lt;das..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (200 samples, 3.89%)</title><rect x="6.1928%" y="821" width="3.8948%" height="15" fill="rgb(235,160,14)" fg:x="318" fg:w="200"/><text x="6.4428%" y="831.50">core..</text></g><g><title>&lt;rutin::shared::db::object::str::Str as core::cmp::PartialEq&gt;::eq (200 samples, 3.89%)</title><rect x="6.1928%" y="805" width="3.8948%" height="15" fill="rgb(212,155,44)" fg:x="318" fg:w="200"/><text x="6.4428%" y="815.50">&lt;rut..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (79 samples, 1.54%)</title><rect x="8.5492%" y="789" width="1.5385%" height="15" fill="rgb(226,2,50)" fg:x="439" fg:w="79"/><text x="8.7992%" y="799.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::cmp::PartialEq&gt;::eq (79 samples, 1.54%)</title><rect x="8.5492%" y="773" width="1.5385%" height="15" fill="rgb(234,177,6)" fg:x="439" fg:w="79"/><text x="8.7992%" y="783.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (70 samples, 1.36%)</title><rect x="8.7244%" y="757" width="1.3632%" height="15" fill="rgb(217,24,9)" fg:x="448" fg:w="70"/><text x="8.9744%" y="767.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (70 samples, 1.36%)</title><rect x="8.7244%" y="741" width="1.3632%" height="15" fill="rgb(220,13,46)" fg:x="448" fg:w="70"/><text x="8.9744%" y="751.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (70 samples, 1.36%)</title><rect x="8.7244%" y="725" width="1.3632%" height="15" fill="rgb(239,221,27)" fg:x="448" fg:w="70"/><text x="8.9744%" y="735.50"></text></g><g><title>[libc.so.6] (67 samples, 1.30%)</title><rect x="8.7829%" y="709" width="1.3048%" height="15" fill="rgb(222,198,25)" fg:x="451" fg:w="67"/><text x="9.0329%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (205 samples, 3.99%)</title><rect x="6.1733%" y="853" width="3.9922%" height="15" fill="rgb(211,99,13)" fg:x="317" fg:w="205"/><text x="6.4233%" y="863.50">hash..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (4 samples, 0.08%)</title><rect x="10.0876%" y="837" width="0.0779%" height="15" fill="rgb(232,111,31)" fg:x="518" fg:w="4"/><text x="10.3376%" y="847.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (4 samples, 0.08%)</title><rect x="10.0876%" y="821" width="0.0779%" height="15" fill="rgb(245,82,37)" fg:x="518" fg:w="4"/><text x="10.3376%" y="831.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (4 samples, 0.08%)</title><rect x="10.0876%" y="805" width="0.0779%" height="15" fill="rgb(227,149,46)" fg:x="518" fg:w="4"/><text x="10.3376%" y="815.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (4 samples, 0.08%)</title><rect x="10.0876%" y="789" width="0.0779%" height="15" fill="rgb(218,36,50)" fg:x="518" fg:w="4"/><text x="10.3376%" y="799.50"></text></g><g><title>hashbrown::raw::inner::h2 (4 samples, 0.08%)</title><rect x="10.1655%" y="853" width="0.0779%" height="15" fill="rgb(226,80,48)" fg:x="522" fg:w="4"/><text x="10.4155%" y="863.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (42 samples, 0.82%)</title><rect x="10.2434%" y="853" width="0.8179%" height="15" fill="rgb(238,224,15)" fg:x="526" fg:w="42"/><text x="10.4934%" y="863.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (42 samples, 0.82%)</title><rect x="10.2434%" y="837" width="0.8179%" height="15" fill="rgb(241,136,10)" fg:x="526" fg:w="42"/><text x="10.4934%" y="847.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (42 samples, 0.82%)</title><rect x="10.2434%" y="821" width="0.8179%" height="15" fill="rgb(208,32,45)" fg:x="526" fg:w="42"/><text x="10.4934%" y="831.50"></text></g><g><title>rutin::cmd::dispatch::_{{closure}} (533 samples, 10.38%)</title><rect x="0.7400%" y="1093" width="10.3797%" height="15" fill="rgb(207,135,9)" fg:x="38" fg:w="533"/><text x="0.9900%" y="1103.50">rutin::cmd::dis..</text></g><g><title>rutin::cmd::dispatch::_{{closure}}::_{{closure}} (533 samples, 10.38%)</title><rect x="0.7400%" y="1077" width="10.3797%" height="15" fill="rgb(206,86,44)" fg:x="38" fg:w="533"/><text x="0.9900%" y="1087.50">rutin::cmd::dis..</text></g><g><title>rutin::cmd::dispatch::_{{closure}}::_{{closure}}::_{{closure}} (533 samples, 10.38%)</title><rect x="0.7400%" y="1061" width="10.3797%" height="15" fill="rgb(245,177,15)" fg:x="38" fg:w="533"/><text x="0.9900%" y="1071.50">rutin::cmd::dis..</text></g><g><title>rutin::cmd::CmdExecutor::apply::_{{closure}} (533 samples, 10.38%)</title><rect x="0.7400%" y="1045" width="10.3797%" height="15" fill="rgb(206,64,50)" fg:x="38" fg:w="533"/><text x="0.9900%" y="1055.50">rutin::cmd::Cmd..</text></g><g><title>&lt;rutin::cmd::commands::str::Set as rutin::cmd::CmdExecutor&gt;::execute::_{{closure}} (533 samples, 10.38%)</title><rect x="0.7400%" y="1029" width="10.3797%" height="15" fill="rgb(234,36,40)" fg:x="38" fg:w="533"/><text x="0.9900%" y="1039.50">&lt;rutin::cmd::co..</text></g><g><title>&lt;rutin::cmd::commands::str::Set as rutin::cmd::CmdExecutor&gt;::execute::_{{closure}}::_{{closure}} (533 samples, 10.38%)</title><rect x="0.7400%" y="1013" width="10.3797%" height="15" fill="rgb(213,64,8)" fg:x="38" fg:w="533"/><text x="0.9900%" y="1023.50">&lt;rutin::cmd::co..</text></g><g><title>&lt;rutin::cmd::commands::str::Set as rutin::cmd::CmdExecutor&gt;::execute::_{{closure}}::_{{closure}}::_{{closure}} (533 samples, 10.38%)</title><rect x="0.7400%" y="997" width="10.3797%" height="15" fill="rgb(210,75,36)" fg:x="38" fg:w="533"/><text x="0.9900%" y="1007.50">&lt;rutin::cmd::co..</text></g><g><title>rutin::shared::db::Db::get_mut::_{{closure}} (533 samples, 10.38%)</title><rect x="0.7400%" y="981" width="10.3797%" height="15" fill="rgb(229,88,21)" fg:x="38" fg:w="533"/><text x="0.9900%" y="991.50">rutin::shared::..</text></g><g><title>rutin::shared::db::Db::get_mut::_{{closure}}::_{{closure}} (533 samples, 10.38%)</title><rect x="0.7400%" y="965" width="10.3797%" height="15" fill="rgb(252,204,47)" fg:x="38" fg:w="533"/><text x="0.9900%" y="975.50">rutin::shared::..</text></g><g><title>rutin::shared::db::object::Object::trigger_lock_event::_{{closure}} (533 samples, 10.38%)</title><rect x="0.7400%" y="949" width="10.3797%" height="15" fill="rgb(208,77,27)" fg:x="38" fg:w="533"/><text x="0.9900%" y="959.50">rutin::shared::..</text></g><g><title>rutin::shared::db::object::Object::trigger_lock_event::_{{closure}}::_{{closure}} (461 samples, 8.98%)</title><rect x="2.1422%" y="933" width="8.9776%" height="15" fill="rgb(221,76,26)" fg:x="110" fg:w="461"/><text x="2.3922%" y="943.50">rutin::shared..</text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::entry (421 samples, 8.20%)</title><rect x="2.9211%" y="917" width="8.1986%" height="15" fill="rgb(225,139,18)" fg:x="150" fg:w="421"/><text x="3.1711%" y="927.50">dashmap::Da..</text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_entry (418 samples, 8.14%)</title><rect x="2.9796%" y="901" width="8.1402%" height="15" fill="rgb(230,137,11)" fg:x="153" fg:w="418"/><text x="3.2296%" y="911.50">&lt;dashmap::D..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (259 samples, 5.04%)</title><rect x="6.0759%" y="885" width="5.0438%" height="15" fill="rgb(212,28,1)" fg:x="312" fg:w="259"/><text x="6.3259%" y="895.50">hashbr..</text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (257 samples, 5.00%)</title><rect x="6.1149%" y="869" width="5.0049%" height="15" fill="rgb(248,164,17)" fg:x="314" fg:w="257"/><text x="6.3649%" y="879.50">hashbr..</text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (3 samples, 0.06%)</title><rect x="11.0613%" y="853" width="0.0584%" height="15" fill="rgb(222,171,42)" fg:x="568" fg:w="3"/><text x="11.3113%" y="863.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.06%)</title><rect x="11.0613%" y="837" width="0.0584%" height="15" fill="rgb(243,84,45)" fg:x="568" fg:w="3"/><text x="11.3113%" y="847.50"></text></g><g><title>[libc.so.6] (8 samples, 0.16%)</title><rect x="11.1198%" y="1077" width="0.1558%" height="15" fill="rgb(252,49,23)" fg:x="571" fg:w="8"/><text x="11.3698%" y="1087.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.08%)</title><rect x="11.4508%" y="1061" width="0.0779%" height="15" fill="rgb(215,19,7)" fg:x="588" fg:w="4"/><text x="11.7008%" y="1071.50"></text></g><g><title>&lt;futures_util::future::poll_immediate::PollImmediate&lt;F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="11.5287%" y="1061" width="0.0195%" height="15" fill="rgb(238,81,41)" fg:x="592" fg:w="1"/><text x="11.7787%" y="1071.50"></text></g><g><title>&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="11.5287%" y="1045" width="0.0195%" height="15" fill="rgb(210,199,37)" fg:x="592" fg:w="1"/><text x="11.7787%" y="1055.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.02%)</title><rect x="11.5287%" y="1029" width="0.0195%" height="15" fill="rgb(244,192,49)" fg:x="592" fg:w="1"/><text x="11.7787%" y="1039.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.02%)</title><rect x="11.5287%" y="1013" width="0.0195%" height="15" fill="rgb(226,211,11)" fg:x="592" fg:w="1"/><text x="11.7787%" y="1023.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (1 samples, 0.02%)</title><rect x="11.5287%" y="997" width="0.0195%" height="15" fill="rgb(236,162,54)" fg:x="592" fg:w="1"/><text x="11.7787%" y="1007.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (1 samples, 0.02%)</title><rect x="11.5287%" y="981" width="0.0195%" height="15" fill="rgb(220,229,9)" fg:x="592" fg:w="1"/><text x="11.7787%" y="991.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_read_ready (1 samples, 0.02%)</title><rect x="11.5287%" y="965" width="0.0195%" height="15" fill="rgb(250,87,22)" fg:x="592" fg:w="1"/><text x="11.7787%" y="975.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.02%)</title><rect x="11.5287%" y="949" width="0.0195%" height="15" fill="rgb(239,43,17)" fg:x="592" fg:w="1"/><text x="11.7787%" y="959.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (1 samples, 0.02%)</title><rect x="11.5287%" y="933" width="0.0195%" height="15" fill="rgb(231,177,25)" fg:x="592" fg:w="1"/><text x="11.7787%" y="943.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="11.5287%" y="917" width="0.0195%" height="15" fill="rgb(219,179,1)" fg:x="592" fg:w="1"/><text x="11.7787%" y="927.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.02%)</title><rect x="11.5287%" y="901" width="0.0195%" height="15" fill="rgb(238,219,53)" fg:x="592" fg:w="1"/><text x="11.7787%" y="911.50"></text></g><g><title>tokio::runtime::task::core::Header::get_tracing_id (1 samples, 0.02%)</title><rect x="11.5287%" y="885" width="0.0195%" height="15" fill="rgb(232,167,36)" fg:x="592" fg:w="1"/><text x="11.7787%" y="895.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.02%)</title><rect x="11.5287%" y="869" width="0.0195%" height="15" fill="rgb(244,19,51)" fg:x="592" fg:w="1"/><text x="11.7787%" y="879.50"></text></g><g><title>&lt;tracing_core::metadata::Level as core::cmp::PartialOrd&lt;tracing_core::metadata::LevelFilter&gt;&gt;::le (1 samples, 0.02%)</title><rect x="11.5482%" y="1061" width="0.0195%" height="15" fill="rgb(224,6,22)" fg:x="593" fg:w="1"/><text x="11.7982%" y="1071.50"></text></g><g><title>[libc.so.6] (125 samples, 2.43%)</title><rect x="11.5677%" y="1061" width="2.4343%" height="15" fill="rgb(224,145,5)" fg:x="594" fg:w="125"/><text x="11.8177%" y="1071.50">[l..</text></g><g><title>bytes::bytes_mut::BytesMut::is_empty (1 samples, 0.02%)</title><rect x="14.0019%" y="1061" width="0.0195%" height="15" fill="rgb(234,130,49)" fg:x="719" fg:w="1"/><text x="14.2519%" y="1071.50"></text></g><g><title>&lt;tracing_core::metadata::Level as core::cmp::PartialOrd&lt;tracing_core::metadata::LevelFilter&gt;&gt;::le (2 samples, 0.04%)</title><rect x="14.2551%" y="1045" width="0.0389%" height="15" fill="rgb(254,6,2)" fg:x="732" fg:w="2"/><text x="14.5051%" y="1055.50"></text></g><g><title>[libc.so.6] (74 samples, 1.44%)</title><rect x="14.2941%" y="1045" width="1.4411%" height="15" fill="rgb(208,96,46)" fg:x="734" fg:w="74"/><text x="14.5441%" y="1055.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.02%)</title><rect x="18.2668%" y="1013" width="0.0195%" height="15" fill="rgb(239,3,39)" fg:x="938" fg:w="1"/><text x="18.5168%" y="1023.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (2 samples, 0.04%)</title><rect x="18.3252%" y="933" width="0.0389%" height="15" fill="rgb(233,210,1)" fg:x="941" fg:w="2"/><text x="18.5752%" y="943.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (2 samples, 0.04%)</title><rect x="18.3252%" y="917" width="0.0389%" height="15" fill="rgb(244,137,37)" fg:x="941" fg:w="2"/><text x="18.5752%" y="927.50"></text></g><g><title>mio::sys::unix::selector::stateless_io_source::IoSourceState::do_io (2 samples, 0.04%)</title><rect x="18.3252%" y="901" width="0.0389%" height="15" fill="rgb(240,136,2)" fg:x="941" fg:w="2"/><text x="18.5752%" y="911.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::_{{closure}} (2 samples, 0.04%)</title><rect x="18.3252%" y="885" width="0.0389%" height="15" fill="rgb(239,18,37)" fg:x="941" fg:w="2"/><text x="18.5752%" y="895.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (2 samples, 0.04%)</title><rect x="18.3252%" y="869" width="0.0389%" height="15" fill="rgb(218,185,22)" fg:x="941" fg:w="2"/><text x="18.5752%" y="879.50"></text></g><g><title>std::sys_common::net::TcpStream::read (2 samples, 0.04%)</title><rect x="18.3252%" y="853" width="0.0389%" height="15" fill="rgb(225,218,4)" fg:x="941" fg:w="2"/><text x="18.5752%" y="863.50"></text></g><g><title>std::sys::pal::unix::net::Socket::read (2 samples, 0.04%)</title><rect x="18.3252%" y="837" width="0.0389%" height="15" fill="rgb(230,182,32)" fg:x="941" fg:w="2"/><text x="18.5752%" y="847.50"></text></g><g><title>std::sys::pal::unix::net::Socket::recv_with_flags (2 samples, 0.04%)</title><rect x="18.3252%" y="821" width="0.0389%" height="15" fill="rgb(242,56,43)" fg:x="941" fg:w="2"/><text x="18.5752%" y="831.50"></text></g><g><title>recv (2 samples, 0.04%)</title><rect x="18.3252%" y="805" width="0.0389%" height="15" fill="rgb(233,99,24)" fg:x="941" fg:w="2"/><text x="18.5752%" y="815.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (1 samples, 0.02%)</title><rect x="18.3836%" y="901" width="0.0195%" height="15" fill="rgb(234,209,42)" fg:x="944" fg:w="1"/><text x="18.6336%" y="911.50"></text></g><g><title>tokio::runtime::context::budget (1 samples, 0.02%)</title><rect x="18.3836%" y="885" width="0.0195%" height="15" fill="rgb(227,7,12)" fg:x="944" fg:w="1"/><text x="18.6336%" y="895.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.02%)</title><rect x="18.3836%" y="869" width="0.0195%" height="15" fill="rgb(245,203,43)" fg:x="944" fg:w="1"/><text x="18.6336%" y="879.50"></text></g><g><title>tokio::runtime::context::budget::_{{closure}} (1 samples, 0.02%)</title><rect x="18.3836%" y="853" width="0.0195%" height="15" fill="rgb(238,205,33)" fg:x="944" fg:w="1"/><text x="18.6336%" y="863.50"></text></g><g><title>tokio::runtime::coop::poll_proceed::_{{closure}} (1 samples, 0.02%)</title><rect x="18.3836%" y="837" width="0.0195%" height="15" fill="rgb(231,56,7)" fg:x="944" fg:w="1"/><text x="18.6336%" y="847.50"></text></g><g><title>&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (7 samples, 0.14%)</title><rect x="18.2863%" y="1013" width="0.1363%" height="15" fill="rgb(244,186,29)" fg:x="939" fg:w="7"/><text x="18.5363%" y="1023.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (6 samples, 0.12%)</title><rect x="18.3057%" y="997" width="0.1168%" height="15" fill="rgb(234,111,31)" fg:x="940" fg:w="6"/><text x="18.5557%" y="1007.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (6 samples, 0.12%)</title><rect x="18.3057%" y="981" width="0.1168%" height="15" fill="rgb(241,149,10)" fg:x="940" fg:w="6"/><text x="18.5557%" y="991.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (6 samples, 0.12%)</title><rect x="18.3057%" y="965" width="0.1168%" height="15" fill="rgb(249,206,44)" fg:x="940" fg:w="6"/><text x="18.5557%" y="975.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (6 samples, 0.12%)</title><rect x="18.3057%" y="949" width="0.1168%" height="15" fill="rgb(251,153,30)" fg:x="940" fg:w="6"/><text x="18.5557%" y="959.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_read_ready (3 samples, 0.06%)</title><rect x="18.3642%" y="933" width="0.0584%" height="15" fill="rgb(239,152,38)" fg:x="943" fg:w="3"/><text x="18.6142%" y="943.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (2 samples, 0.04%)</title><rect x="18.3836%" y="917" width="0.0389%" height="15" fill="rgb(249,139,47)" fg:x="944" fg:w="2"/><text x="18.6336%" y="927.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (1 samples, 0.02%)</title><rect x="18.4031%" y="901" width="0.0195%" height="15" fill="rgb(244,64,35)" fg:x="945" fg:w="1"/><text x="18.6531%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::io::scheduled_io::Waiters&gt;&gt; (1 samples, 0.02%)</title><rect x="18.4031%" y="885" width="0.0195%" height="15" fill="rgb(216,46,15)" fg:x="945" fg:w="1"/><text x="18.6531%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::io::scheduled_io::Waiters&gt;&gt; (1 samples, 0.02%)</title><rect x="18.4031%" y="869" width="0.0195%" height="15" fill="rgb(250,74,19)" fg:x="945" fg:w="1"/><text x="18.6531%" y="879.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="18.4031%" y="853" width="0.0195%" height="15" fill="rgb(249,42,33)" fg:x="945" fg:w="1"/><text x="18.6531%" y="863.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (1 samples, 0.02%)</title><rect x="18.4031%" y="837" width="0.0195%" height="15" fill="rgb(242,149,17)" fg:x="945" fg:w="1"/><text x="18.6531%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (1 samples, 0.02%)</title><rect x="18.4031%" y="821" width="0.0195%" height="15" fill="rgb(244,29,21)" fg:x="945" fg:w="1"/><text x="18.6531%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.02%)</title><rect x="18.4031%" y="805" width="0.0195%" height="15" fill="rgb(220,130,37)" fg:x="945" fg:w="1"/><text x="18.6531%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::{{closure}}::{{closure}}::{{closure}}::_decode_async&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}&gt; (5 samples, 0.10%)</title><rect x="18.4226%" y="1013" width="0.0974%" height="15" fill="rgb(211,67,2)" fg:x="946" fg:w="5"/><text x="18.6726%" y="1023.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::remaining (6 samples, 0.12%)</title><rect x="26.7770%" y="949" width="0.1168%" height="15" fill="rgb(235,68,52)" fg:x="1375" fg:w="6"/><text x="27.0270%" y="959.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::remaining (6 samples, 0.12%)</title><rect x="26.7770%" y="933" width="0.1168%" height="15" fill="rgb(246,142,3)" fg:x="1375" fg:w="6"/><text x="27.0270%" y="943.50"></text></g><g><title>bytes::bytes_mut::BytesMut::len (6 samples, 0.12%)</title><rect x="26.7770%" y="917" width="0.1168%" height="15" fill="rgb(241,25,7)" fg:x="1375" fg:w="6"/><text x="27.0270%" y="927.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (4 samples, 0.08%)</title><rect x="26.8939%" y="949" width="0.0779%" height="15" fill="rgb(242,119,39)" fg:x="1381" fg:w="4"/><text x="27.1439%" y="959.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (3 samples, 0.06%)</title><rect x="26.9133%" y="933" width="0.0584%" height="15" fill="rgb(241,98,45)" fg:x="1382" fg:w="3"/><text x="27.1633%" y="943.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (16 samples, 0.31%)</title><rect x="26.6796%" y="965" width="0.3116%" height="15" fill="rgb(254,28,30)" fg:x="1370" fg:w="16"/><text x="26.9296%" y="975.50"></text></g><g><title>core::fmt::Arguments::new_v1 (1 samples, 0.02%)</title><rect x="26.9718%" y="949" width="0.0195%" height="15" fill="rgb(241,142,54)" fg:x="1385" fg:w="1"/><text x="27.2218%" y="959.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.02%)</title><rect x="26.9912%" y="965" width="0.0195%" height="15" fill="rgb(222,85,15)" fg:x="1386" fg:w="1"/><text x="27.2412%" y="975.50"></text></g><g><title>[libc.so.6] (75 samples, 1.46%)</title><rect x="27.0107%" y="965" width="1.4606%" height="15" fill="rgb(210,85,47)" fg:x="1387" fg:w="75"/><text x="27.2607%" y="975.50"></text></g><g><title>bytes::bytes::Bytes::with_vtable (20 samples, 0.39%)</title><rect x="28.6076%" y="949" width="0.3895%" height="15" fill="rgb(224,206,25)" fg:x="1469" fg:w="20"/><text x="28.8576%" y="959.50"></text></g><g><title>bytes::bytes_mut::BytesMut::freeze (33 samples, 0.64%)</title><rect x="28.4713%" y="965" width="0.6426%" height="15" fill="rgb(243,201,19)" fg:x="1462" fg:w="33"/><text x="28.7213%" y="975.50"></text></g><g><title>bytes::bytes_mut::BytesMut::kind (6 samples, 0.12%)</title><rect x="28.9971%" y="949" width="0.1168%" height="15" fill="rgb(236,59,4)" fg:x="1489" fg:w="6"/><text x="29.2471%" y="959.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (4 samples, 0.08%)</title><rect x="29.2697%" y="933" width="0.0779%" height="15" fill="rgb(254,179,45)" fg:x="1503" fg:w="4"/><text x="29.5197%" y="943.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (8 samples, 0.16%)</title><rect x="29.2502%" y="949" width="0.1558%" height="15" fill="rgb(226,14,10)" fg:x="1502" fg:w="8"/><text x="29.5002%" y="959.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.06%)</title><rect x="29.3476%" y="933" width="0.0584%" height="15" fill="rgb(244,27,41)" fg:x="1507" fg:w="3"/><text x="29.5976%" y="943.50"></text></g><g><title>bytes::bytes_mut::BytesMut::len (8 samples, 0.16%)</title><rect x="29.4060%" y="949" width="0.1558%" height="15" fill="rgb(235,35,32)" fg:x="1510" fg:w="8"/><text x="29.6560%" y="959.50"></text></g><g><title>bytes::bytes_mut::BytesMut::kind (1 samples, 0.02%)</title><rect x="29.5813%" y="933" width="0.0195%" height="15" fill="rgb(218,68,31)" fg:x="1519" fg:w="1"/><text x="29.8313%" y="943.50"></text></g><g><title>bytes::bytes_mut::BytesMut::promote_to_shared (2 samples, 0.04%)</title><rect x="29.6008%" y="933" width="0.0389%" height="15" fill="rgb(207,120,37)" fg:x="1520" fg:w="2"/><text x="29.8508%" y="943.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.04%)</title><rect x="29.6008%" y="917" width="0.0389%" height="15" fill="rgb(227,98,0)" fg:x="1520" fg:w="2"/><text x="29.8508%" y="927.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.04%)</title><rect x="29.6008%" y="901" width="0.0389%" height="15" fill="rgb(207,7,3)" fg:x="1520" fg:w="2"/><text x="29.8508%" y="911.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.04%)</title><rect x="29.6008%" y="885" width="0.0389%" height="15" fill="rgb(206,98,19)" fg:x="1520" fg:w="2"/><text x="29.8508%" y="895.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.04%)</title><rect x="29.6008%" y="869" width="0.0389%" height="15" fill="rgb(217,5,26)" fg:x="1520" fg:w="2"/><text x="29.8508%" y="879.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.04%)</title><rect x="29.6008%" y="853" width="0.0389%" height="15" fill="rgb(235,190,38)" fg:x="1520" fg:w="2"/><text x="29.8508%" y="863.50"></text></g><g><title>__rust_alloc (2 samples, 0.04%)</title><rect x="29.6008%" y="837" width="0.0389%" height="15" fill="rgb(247,86,24)" fg:x="1520" fg:w="2"/><text x="29.8508%" y="847.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (2 samples, 0.04%)</title><rect x="29.6008%" y="821" width="0.0389%" height="15" fill="rgb(205,101,16)" fg:x="1520" fg:w="2"/><text x="29.8508%" y="831.50"></text></g><g><title>mi_heap_malloc_aligned_at (2 samples, 0.04%)</title><rect x="29.6008%" y="805" width="0.0389%" height="15" fill="rgb(246,168,33)" fg:x="1520" fg:w="2"/><text x="29.8508%" y="815.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at (2 samples, 0.04%)</title><rect x="29.6008%" y="789" width="0.0389%" height="15" fill="rgb(231,114,1)" fg:x="1520" fg:w="2"/><text x="29.8508%" y="799.50"></text></g><g><title>bytes::bytes_mut::increment_shared (64 samples, 1.25%)</title><rect x="29.6397%" y="933" width="1.2463%" height="15" fill="rgb(207,184,53)" fg:x="1522" fg:w="64"/><text x="29.8897%" y="943.50"></text></g><g><title>bytes::bytes_mut::BytesMut::shallow_clone (71 samples, 1.38%)</title><rect x="29.5618%" y="949" width="1.3827%" height="15" fill="rgb(224,95,51)" fg:x="1518" fg:w="71"/><text x="29.8118%" y="959.50"></text></g><g><title>core::ptr::read (3 samples, 0.06%)</title><rect x="30.8861%" y="933" width="0.0584%" height="15" fill="rgb(212,188,45)" fg:x="1586" fg:w="3"/><text x="31.1361%" y="943.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (97 samples, 1.89%)</title><rect x="29.1139%" y="965" width="1.8890%" height="15" fill="rgb(223,154,38)" fg:x="1495" fg:w="97"/><text x="29.3639%" y="975.50">b..</text></g><g><title>core::fmt::Arguments::new_v1 (3 samples, 0.06%)</title><rect x="30.9445%" y="949" width="0.0584%" height="15" fill="rgb(251,22,52)" fg:x="1589" fg:w="3"/><text x="31.1945%" y="959.50"></text></g><g><title>bytes::bytes_mut::BytesMut::kind (1 samples, 0.02%)</title><rect x="31.1392%" y="933" width="0.0195%" height="15" fill="rgb(229,209,22)" fg:x="1599" fg:w="1"/><text x="31.3892%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::BytesMut&gt; (77 samples, 1.50%)</title><rect x="31.0029%" y="965" width="1.4995%" height="15" fill="rgb(234,138,34)" fg:x="1592" fg:w="77"/><text x="31.2529%" y="975.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (72 samples, 1.40%)</title><rect x="31.1003%" y="949" width="1.4021%" height="15" fill="rgb(212,95,11)" fg:x="1597" fg:w="72"/><text x="31.3503%" y="959.50"></text></g><g><title>bytes::bytes_mut::release_shared (69 samples, 1.34%)</title><rect x="31.1587%" y="933" width="1.3437%" height="15" fill="rgb(240,179,47)" fg:x="1600" fg:w="69"/><text x="31.4087%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.02%)</title><rect x="32.4830%" y="917" width="0.0195%" height="15" fill="rgb(240,163,11)" fg:x="1668" fg:w="1"/><text x="32.7330%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.02%)</title><rect x="32.4830%" y="901" width="0.0195%" height="15" fill="rgb(236,37,12)" fg:x="1668" fg:w="1"/><text x="32.7330%" y="911.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.02%)</title><rect x="32.5024%" y="965" width="0.0195%" height="15" fill="rgb(232,164,16)" fg:x="1669" fg:w="1"/><text x="32.7524%" y="975.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.06%)</title><rect x="34.3720%" y="869" width="0.0584%" height="15" fill="rgb(244,205,15)" fg:x="1765" fg:w="3"/><text x="34.6220%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.06%)</title><rect x="34.3720%" y="853" width="0.0584%" height="15" fill="rgb(223,117,47)" fg:x="1765" fg:w="3"/><text x="34.6220%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.06%)</title><rect x="34.3720%" y="837" width="0.0584%" height="15" fill="rgb(244,107,35)" fg:x="1765" fg:w="3"/><text x="34.6220%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (3 samples, 0.06%)</title><rect x="34.3720%" y="821" width="0.0584%" height="15" fill="rgb(205,140,8)" fg:x="1765" fg:w="3"/><text x="34.6220%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.06%)</title><rect x="34.3720%" y="805" width="0.0584%" height="15" fill="rgb(228,84,46)" fg:x="1765" fg:w="3"/><text x="34.6220%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.06%)</title><rect x="34.3720%" y="789" width="0.0584%" height="15" fill="rgb(254,188,9)" fg:x="1765" fg:w="3"/><text x="34.6220%" y="799.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.06%)</title><rect x="34.3720%" y="773" width="0.0584%" height="15" fill="rgb(206,112,54)" fg:x="1765" fg:w="3"/><text x="34.6220%" y="783.50"></text></g><g><title>__rust_alloc (3 samples, 0.06%)</title><rect x="34.3720%" y="757" width="0.0584%" height="15" fill="rgb(216,84,49)" fg:x="1765" fg:w="3"/><text x="34.6220%" y="767.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (3 samples, 0.06%)</title><rect x="34.3720%" y="741" width="0.0584%" height="15" fill="rgb(214,194,35)" fg:x="1765" fg:w="3"/><text x="34.6220%" y="751.50"></text></g><g><title>_mi_page_malloc (3 samples, 0.06%)</title><rect x="34.3720%" y="725" width="0.0584%" height="15" fill="rgb(249,28,3)" fg:x="1765" fg:w="3"/><text x="34.6220%" y="735.50"></text></g><g><title>_mi_page_malloc_zero (3 samples, 0.06%)</title><rect x="34.3720%" y="709" width="0.0584%" height="15" fill="rgb(222,56,52)" fg:x="1765" fg:w="3"/><text x="34.6220%" y="719.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::chunk_mut (4 samples, 0.08%)</title><rect x="34.3720%" y="933" width="0.0779%" height="15" fill="rgb(245,217,50)" fg:x="1765" fg:w="4"/><text x="34.6220%" y="943.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::chunk_mut (4 samples, 0.08%)</title><rect x="34.3720%" y="917" width="0.0779%" height="15" fill="rgb(213,201,24)" fg:x="1765" fg:w="4"/><text x="34.6220%" y="927.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (4 samples, 0.08%)</title><rect x="34.3720%" y="901" width="0.0779%" height="15" fill="rgb(248,116,28)" fg:x="1765" fg:w="4"/><text x="34.6220%" y="911.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (4 samples, 0.08%)</title><rect x="34.3720%" y="885" width="0.0779%" height="15" fill="rgb(219,72,43)" fg:x="1765" fg:w="4"/><text x="34.6220%" y="895.50"></text></g><g><title>bytes::bytes_mut::BytesMut::len (1 samples, 0.02%)</title><rect x="34.4304%" y="869" width="0.0195%" height="15" fill="rgb(209,138,14)" fg:x="1768" fg:w="1"/><text x="34.6804%" y="879.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (9 samples, 0.18%)</title><rect x="34.4888%" y="869" width="0.1753%" height="15" fill="rgb(222,18,33)" fg:x="1771" fg:w="9"/><text x="34.7388%" y="879.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (9 samples, 0.18%)</title><rect x="34.4888%" y="853" width="0.1753%" height="15" fill="rgb(213,199,7)" fg:x="1771" fg:w="9"/><text x="34.7388%" y="863.50"></text></g><g><title>mio::sys::unix::selector::stateless_io_source::IoSourceState::do_io (9 samples, 0.18%)</title><rect x="34.4888%" y="837" width="0.1753%" height="15" fill="rgb(250,110,10)" fg:x="1771" fg:w="9"/><text x="34.7388%" y="847.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::_{{closure}} (9 samples, 0.18%)</title><rect x="34.4888%" y="821" width="0.1753%" height="15" fill="rgb(248,123,6)" fg:x="1771" fg:w="9"/><text x="34.7388%" y="831.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (9 samples, 0.18%)</title><rect x="34.4888%" y="805" width="0.1753%" height="15" fill="rgb(206,91,31)" fg:x="1771" fg:w="9"/><text x="34.7388%" y="815.50"></text></g><g><title>std::sys_common::net::TcpStream::read (9 samples, 0.18%)</title><rect x="34.4888%" y="789" width="0.1753%" height="15" fill="rgb(211,154,13)" fg:x="1771" fg:w="9"/><text x="34.7388%" y="799.50"></text></g><g><title>std::sys::pal::unix::net::Socket::read (9 samples, 0.18%)</title><rect x="34.4888%" y="773" width="0.1753%" height="15" fill="rgb(225,148,7)" fg:x="1771" fg:w="9"/><text x="34.7388%" y="783.50"></text></g><g><title>std::sys::pal::unix::net::Socket::recv_with_flags (9 samples, 0.18%)</title><rect x="34.4888%" y="757" width="0.1753%" height="15" fill="rgb(220,160,43)" fg:x="1771" fg:w="9"/><text x="34.7388%" y="767.50"></text></g><g><title>recv (9 samples, 0.18%)</title><rect x="34.4888%" y="741" width="0.1753%" height="15" fill="rgb(213,52,39)" fg:x="1771" fg:w="9"/><text x="34.7388%" y="751.50"></text></g><g><title>[libc.so.6] (4 samples, 0.08%)</title><rect x="34.5862%" y="725" width="0.0779%" height="15" fill="rgb(243,137,7)" fg:x="1776" fg:w="4"/><text x="34.8362%" y="735.50"></text></g><g><title>&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (17 samples, 0.33%)</title><rect x="34.3720%" y="949" width="0.3311%" height="15" fill="rgb(230,79,13)" fg:x="1765" fg:w="17"/><text x="34.6220%" y="959.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (13 samples, 0.25%)</title><rect x="34.4499%" y="933" width="0.2532%" height="15" fill="rgb(247,105,23)" fg:x="1769" fg:w="13"/><text x="34.6999%" y="943.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (13 samples, 0.25%)</title><rect x="34.4499%" y="917" width="0.2532%" height="15" fill="rgb(223,179,41)" fg:x="1769" fg:w="13"/><text x="34.6999%" y="927.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (11 samples, 0.21%)</title><rect x="34.4888%" y="901" width="0.2142%" height="15" fill="rgb(218,9,34)" fg:x="1771" fg:w="11"/><text x="34.7388%" y="911.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (11 samples, 0.21%)</title><rect x="34.4888%" y="885" width="0.2142%" height="15" fill="rgb(222,106,8)" fg:x="1771" fg:w="11"/><text x="34.7388%" y="895.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_read_ready (2 samples, 0.04%)</title><rect x="34.6641%" y="869" width="0.0389%" height="15" fill="rgb(211,220,0)" fg:x="1780" fg:w="2"/><text x="34.9141%" y="879.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (2 samples, 0.04%)</title><rect x="34.6641%" y="853" width="0.0389%" height="15" fill="rgb(229,52,16)" fg:x="1780" fg:w="2"/><text x="34.9141%" y="863.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (1 samples, 0.02%)</title><rect x="34.6835%" y="837" width="0.0195%" height="15" fill="rgb(212,155,18)" fg:x="1781" fg:w="1"/><text x="34.9335%" y="847.50"></text></g><g><title>tokio::runtime::io::driver::Direction::mask (1 samples, 0.02%)</title><rect x="34.6835%" y="821" width="0.0195%" height="15" fill="rgb(242,21,14)" fg:x="1781" fg:w="1"/><text x="34.9335%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::error::RutinError&gt; (1 samples, 0.02%)</title><rect x="34.7030%" y="949" width="0.0195%" height="15" fill="rgb(222,19,48)" fg:x="1782" fg:w="1"/><text x="34.9530%" y="959.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::remaining (1 samples, 0.02%)</title><rect x="36.3583%" y="917" width="0.0195%" height="15" fill="rgb(232,45,27)" fg:x="1867" fg:w="1"/><text x="36.6083%" y="927.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::remaining (1 samples, 0.02%)</title><rect x="36.3583%" y="901" width="0.0195%" height="15" fill="rgb(249,103,42)" fg:x="1867" fg:w="1"/><text x="36.6083%" y="911.50"></text></g><g><title>bytes::bytes_mut::BytesMut::len (1 samples, 0.02%)</title><rect x="36.3583%" y="885" width="0.0195%" height="15" fill="rgb(246,81,33)" fg:x="1867" fg:w="1"/><text x="36.6083%" y="895.50"></text></g><g><title>bytes::bytes_mut::BytesMut::kind (1 samples, 0.02%)</title><rect x="36.4557%" y="901" width="0.0195%" height="15" fill="rgb(252,33,42)" fg:x="1872" fg:w="1"/><text x="36.7057%" y="911.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (7 samples, 0.14%)</title><rect x="36.3583%" y="933" width="0.1363%" height="15" fill="rgb(209,212,41)" fg:x="1867" fg:w="7"/><text x="36.6083%" y="943.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (6 samples, 0.12%)</title><rect x="36.3778%" y="917" width="0.1168%" height="15" fill="rgb(207,154,6)" fg:x="1868" fg:w="6"/><text x="36.6278%" y="927.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (1 samples, 0.02%)</title><rect x="36.4752%" y="901" width="0.0195%" height="15" fill="rgb(223,64,47)" fg:x="1873" fg:w="1"/><text x="36.7252%" y="911.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::deref::Deref&gt;::deref (3 samples, 0.06%)</title><rect x="36.4946%" y="933" width="0.0584%" height="15" fill="rgb(211,161,38)" fg:x="1874" fg:w="3"/><text x="36.7446%" y="943.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::convert::AsRef&lt;[u8]&gt;&gt;::as_ref (3 samples, 0.06%)</title><rect x="36.4946%" y="917" width="0.0584%" height="15" fill="rgb(219,138,40)" fg:x="1874" fg:w="3"/><text x="36.7446%" y="927.50"></text></g><g><title>bytes::bytes_mut::BytesMut::as_slice (3 samples, 0.06%)</title><rect x="36.4946%" y="901" width="0.0584%" height="15" fill="rgb(241,228,46)" fg:x="1874" fg:w="3"/><text x="36.7446%" y="911.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (3 samples, 0.06%)</title><rect x="36.8452%" y="901" width="0.0584%" height="15" fill="rgb(223,209,38)" fg:x="1892" fg:w="3"/><text x="37.0952%" y="911.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (8 samples, 0.16%)</title><rect x="36.8062%" y="917" width="0.1558%" height="15" fill="rgb(236,164,45)" fg:x="1890" fg:w="8"/><text x="37.0562%" y="927.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.06%)</title><rect x="36.9036%" y="901" width="0.0584%" height="15" fill="rgb(231,15,5)" fg:x="1895" fg:w="3"/><text x="37.1536%" y="911.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (3 samples, 0.06%)</title><rect x="36.9815%" y="885" width="0.0584%" height="15" fill="rgb(252,35,15)" fg:x="1899" fg:w="3"/><text x="37.2315%" y="895.50"></text></g><g><title>alloc::alloc::exchange_malloc (3 samples, 0.06%)</title><rect x="36.9815%" y="869" width="0.0584%" height="15" fill="rgb(248,181,18)" fg:x="1899" fg:w="3"/><text x="37.2315%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.06%)</title><rect x="36.9815%" y="853" width="0.0584%" height="15" fill="rgb(233,39,42)" fg:x="1899" fg:w="3"/><text x="37.2315%" y="863.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.06%)</title><rect x="36.9815%" y="837" width="0.0584%" height="15" fill="rgb(238,110,33)" fg:x="1899" fg:w="3"/><text x="37.2315%" y="847.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.06%)</title><rect x="36.9815%" y="821" width="0.0584%" height="15" fill="rgb(233,195,10)" fg:x="1899" fg:w="3"/><text x="37.2315%" y="831.50"></text></g><g><title>__rust_alloc (3 samples, 0.06%)</title><rect x="36.9815%" y="805" width="0.0584%" height="15" fill="rgb(254,105,3)" fg:x="1899" fg:w="3"/><text x="37.2315%" y="815.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (3 samples, 0.06%)</title><rect x="36.9815%" y="789" width="0.0584%" height="15" fill="rgb(221,225,9)" fg:x="1899" fg:w="3"/><text x="37.2315%" y="799.50"></text></g><g><title>_mi_page_malloc (3 samples, 0.06%)</title><rect x="36.9815%" y="773" width="0.0584%" height="15" fill="rgb(224,227,45)" fg:x="1899" fg:w="3"/><text x="37.2315%" y="783.50"></text></g><g><title>_mi_page_malloc_zero (3 samples, 0.06%)</title><rect x="36.9815%" y="757" width="0.0584%" height="15" fill="rgb(229,198,43)" fg:x="1899" fg:w="3"/><text x="37.2315%" y="767.50"></text></g><g><title>bytes::bytes_mut::BytesMut::promote_to_shared (4 samples, 0.08%)</title><rect x="36.9815%" y="901" width="0.0779%" height="15" fill="rgb(206,209,35)" fg:x="1899" fg:w="4"/><text x="37.2315%" y="911.50"></text></g><g><title>bytes::bytes_mut::rebuild_vec (1 samples, 0.02%)</title><rect x="37.0399%" y="885" width="0.0195%" height="15" fill="rgb(245,195,53)" fg:x="1902" fg:w="1"/><text x="37.2899%" y="895.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.02%)</title><rect x="37.0399%" y="869" width="0.0195%" height="15" fill="rgb(240,92,26)" fg:x="1902" fg:w="1"/><text x="37.2899%" y="879.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.02%)</title><rect x="37.0399%" y="853" width="0.0195%" height="15" fill="rgb(207,40,23)" fg:x="1902" fg:w="1"/><text x="37.2899%" y="863.50"></text></g><g><title>bytes::bytes_mut::increment_shared (68 samples, 1.32%)</title><rect x="37.0594%" y="901" width="1.3242%" height="15" fill="rgb(223,111,35)" fg:x="1903" fg:w="68"/><text x="37.3094%" y="911.50"></text></g><g><title>bytes::bytes_mut::BytesMut::shallow_clone (74 samples, 1.44%)</title><rect x="36.9620%" y="917" width="1.4411%" height="15" fill="rgb(229,147,28)" fg:x="1898" fg:w="74"/><text x="37.2120%" y="927.50"></text></g><g><title>core::ptr::read (1 samples, 0.02%)</title><rect x="38.3836%" y="901" width="0.0195%" height="15" fill="rgb(211,29,28)" fg:x="1971" fg:w="1"/><text x="38.6336%" y="911.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (100 samples, 1.95%)</title><rect x="36.5531%" y="933" width="1.9474%" height="15" fill="rgb(228,72,33)" fg:x="1877" fg:w="100"/><text x="36.8031%" y="943.50">b..</text></g><g><title>core::fmt::Arguments::new_v1 (5 samples, 0.10%)</title><rect x="38.4031%" y="917" width="0.0974%" height="15" fill="rgb(205,214,31)" fg:x="1972" fg:w="5"/><text x="38.6531%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (2 samples, 0.04%)</title><rect x="38.5005%" y="853" width="0.0389%" height="15" fill="rgb(224,111,15)" fg:x="1977" fg:w="2"/><text x="38.7505%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.04%)</title><rect x="38.5005%" y="837" width="0.0389%" height="15" fill="rgb(253,21,26)" fg:x="1977" fg:w="2"/><text x="38.7505%" y="847.50"></text></g><g><title>memchr::arch::generic::memchr::fwd_byte_by_byte (1 samples, 0.02%)</title><rect x="38.9094%" y="821" width="0.0195%" height="15" fill="rgb(245,139,43)" fg:x="1998" fg:w="1"/><text x="39.1594%" y="831.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.02%)</title><rect x="38.9094%" y="805" width="0.0195%" height="15" fill="rgb(252,170,7)" fg:x="1998" fg:w="1"/><text x="39.1594%" y="815.50"></text></g><g><title>&lt;memchr::vector::SensibleMoveMask as memchr::vector::MoveMask&gt;::has_non_zero (3 samples, 0.06%)</title><rect x="39.2016%" y="773" width="0.0584%" height="15" fill="rgb(231,118,14)" fg:x="2013" fg:w="3"/><text x="39.4516%" y="783.50"></text></g><g><title>core::ops::function::Fn::call (5 samples, 0.10%)</title><rect x="39.2600%" y="773" width="0.0974%" height="15" fill="rgb(238,83,0)" fg:x="2016" fg:w="5"/><text x="39.5100%" y="783.50"></text></g><g><title>&lt;memchr::vector::SensibleMoveMask as memchr::vector::MoveMask&gt;::first_offset (5 samples, 0.10%)</title><rect x="39.2600%" y="757" width="0.0974%" height="15" fill="rgb(221,39,39)" fg:x="2016" fg:w="5"/><text x="39.5100%" y="767.50"></text></g><g><title>core::num::&lt;impl u32&gt;::trailing_zeros (5 samples, 0.10%)</title><rect x="39.2600%" y="741" width="0.0974%" height="15" fill="rgb(222,119,46)" fg:x="2016" fg:w="5"/><text x="39.5100%" y="751.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (43 samples, 0.84%)</title><rect x="38.9289%" y="821" width="0.8374%" height="15" fill="rgb(222,165,49)" fg:x="1999" fg:w="43"/><text x="39.1789%" y="831.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (41 samples, 0.80%)</title><rect x="38.9679%" y="805" width="0.7984%" height="15" fill="rgb(219,113,52)" fg:x="2001" fg:w="41"/><text x="39.2179%" y="815.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (34 samples, 0.66%)</title><rect x="39.1042%" y="789" width="0.6621%" height="15" fill="rgb(214,7,15)" fg:x="2008" fg:w="34"/><text x="39.3542%" y="799.50"></text></g><g><title>memchr::vector::x86avx2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m256i&gt;::movemask (21 samples, 0.41%)</title><rect x="39.3574%" y="773" width="0.4090%" height="15" fill="rgb(235,32,4)" fg:x="2021" fg:w="21"/><text x="39.6074%" y="783.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (21 samples, 0.41%)</title><rect x="39.3574%" y="757" width="0.4090%" height="15" fill="rgb(238,90,54)" fg:x="2021" fg:w="21"/><text x="39.6074%" y="767.50"></text></g><g><title>core::ops::function::Fn::call (1 samples, 0.02%)</title><rect x="39.7663%" y="773" width="0.0195%" height="15" fill="rgb(213,208,19)" fg:x="2042" fg:w="1"/><text x="40.0163%" y="783.50"></text></g><g><title>&lt;memchr::vector::SensibleMoveMask as memchr::vector::MoveMask&gt;::first_offset (1 samples, 0.02%)</title><rect x="39.7663%" y="757" width="0.0195%" height="15" fill="rgb(233,156,4)" fg:x="2042" fg:w="1"/><text x="40.0163%" y="767.50"></text></g><g><title>core::num::&lt;impl u32&gt;::trailing_zeros (1 samples, 0.02%)</title><rect x="39.7663%" y="741" width="0.0195%" height="15" fill="rgb(207,194,5)" fg:x="2042" fg:w="1"/><text x="40.0163%" y="751.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (53 samples, 1.03%)</title><rect x="38.7731%" y="837" width="1.0321%" height="15" fill="rgb(206,111,30)" fg:x="1991" fg:w="53"/><text x="39.0231%" y="847.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_sse2 (2 samples, 0.04%)</title><rect x="39.7663%" y="821" width="0.0389%" height="15" fill="rgb(243,70,54)" fg:x="2042" fg:w="2"/><text x="40.0163%" y="831.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (2 samples, 0.04%)</title><rect x="39.7663%" y="805" width="0.0389%" height="15" fill="rgb(242,28,8)" fg:x="2042" fg:w="2"/><text x="40.0163%" y="815.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (2 samples, 0.04%)</title><rect x="39.7663%" y="789" width="0.0389%" height="15" fill="rgb(219,106,18)" fg:x="2042" fg:w="2"/><text x="40.0163%" y="799.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.02%)</title><rect x="39.7858%" y="773" width="0.0195%" height="15" fill="rgb(244,222,10)" fg:x="2043" fg:w="1"/><text x="40.0358%" y="783.50"></text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_line_async::_{{closure}} (375 samples, 7.30%)</title><rect x="32.5219%" y="965" width="7.3028%" height="15" fill="rgb(236,179,52)" fg:x="1670" fg:w="375"/><text x="32.7719%" y="975.50">rutin::fra..</text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_line (262 samples, 5.10%)</title><rect x="34.7225%" y="949" width="5.1022%" height="15" fill="rgb(213,23,39)" fg:x="1783" fg:w="262"/><text x="34.9725%" y="959.50">rutin:..</text></g><g><title>memchr::memchr::memchr (68 samples, 1.32%)</title><rect x="38.5005%" y="933" width="1.3242%" height="15" fill="rgb(238,48,10)" fg:x="1977" fg:w="68"/><text x="38.7505%" y="943.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (68 samples, 1.32%)</title><rect x="38.5005%" y="917" width="1.3242%" height="15" fill="rgb(251,196,23)" fg:x="1977" fg:w="68"/><text x="38.7505%" y="927.50"></text></g><g><title>memchr::memchr::memchr::_{{closure}} (68 samples, 1.32%)</title><rect x="38.5005%" y="901" width="1.3242%" height="15" fill="rgb(250,152,24)" fg:x="1977" fg:w="68"/><text x="38.7505%" y="911.50"></text></g><g><title>memchr::memchr::memchr_raw (68 samples, 1.32%)</title><rect x="38.5005%" y="885" width="1.3242%" height="15" fill="rgb(209,150,17)" fg:x="1977" fg:w="68"/><text x="38.7505%" y="895.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (68 samples, 1.32%)</title><rect x="38.5005%" y="869" width="1.3242%" height="15" fill="rgb(234,202,34)" fg:x="1977" fg:w="68"/><text x="38.7505%" y="879.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (66 samples, 1.29%)</title><rect x="38.5394%" y="853" width="1.2853%" height="15" fill="rgb(253,148,53)" fg:x="1979" fg:w="66"/><text x="38.7894%" y="863.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::new_unchecked (1 samples, 0.02%)</title><rect x="39.8053%" y="837" width="0.0195%" height="15" fill="rgb(218,129,16)" fg:x="2044" fg:w="1"/><text x="40.0553%" y="847.50"></text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::get (1 samples, 0.02%)</title><rect x="39.8247%" y="965" width="0.0195%" height="15" fill="rgb(216,85,19)" fg:x="2045" fg:w="1"/><text x="40.0747%" y="975.50"></text></g><g><title>bytes::buf::buf_impl::Buf::get_u8 (6 samples, 0.12%)</title><rect x="39.8832%" y="949" width="0.1168%" height="15" fill="rgb(235,228,7)" fg:x="2048" fg:w="6"/><text x="40.1332%" y="959.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (1 samples, 0.02%)</title><rect x="39.9805%" y="933" width="0.0195%" height="15" fill="rgb(245,175,0)" fg:x="2053" fg:w="1"/><text x="40.2305%" y="943.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (1 samples, 0.02%)</title><rect x="39.9805%" y="917" width="0.0195%" height="15" fill="rgb(208,168,36)" fg:x="2053" fg:w="1"/><text x="40.2305%" y="927.50"></text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::get_u8 (9 samples, 0.18%)</title><rect x="39.8442%" y="965" width="0.1753%" height="15" fill="rgb(246,171,24)" fg:x="2046" fg:w="9"/><text x="40.0942%" y="975.50"></text></g><g><title>bytes::bytes_mut::BytesMut::is_empty (1 samples, 0.02%)</title><rect x="40.0000%" y="949" width="0.0195%" height="15" fill="rgb(215,142,24)" fg:x="2054" fg:w="1"/><text x="40.2500%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.02%)</title><rect x="40.3505%" y="869" width="0.0195%" height="15" fill="rgb(250,187,7)" fg:x="2072" fg:w="1"/><text x="40.6005%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="40.3505%" y="853" width="0.0195%" height="15" fill="rgb(228,66,33)" fg:x="2072" fg:w="1"/><text x="40.6005%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.02%)</title><rect x="40.3505%" y="837" width="0.0195%" height="15" fill="rgb(234,215,21)" fg:x="2072" fg:w="1"/><text x="40.6005%" y="847.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.02%)</title><rect x="40.3505%" y="821" width="0.0195%" height="15" fill="rgb(222,191,20)" fg:x="2072" fg:w="1"/><text x="40.6005%" y="831.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::chunk_mut (2 samples, 0.04%)</title><rect x="40.3505%" y="933" width="0.0389%" height="15" fill="rgb(245,79,54)" fg:x="2072" fg:w="2"/><text x="40.6005%" y="943.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::chunk_mut (2 samples, 0.04%)</title><rect x="40.3505%" y="917" width="0.0389%" height="15" fill="rgb(240,10,37)" fg:x="2072" fg:w="2"/><text x="40.6005%" y="927.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (2 samples, 0.04%)</title><rect x="40.3505%" y="901" width="0.0389%" height="15" fill="rgb(214,192,32)" fg:x="2072" fg:w="2"/><text x="40.6005%" y="911.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (2 samples, 0.04%)</title><rect x="40.3505%" y="885" width="0.0389%" height="15" fill="rgb(209,36,54)" fg:x="2072" fg:w="2"/><text x="40.6005%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.02%)</title><rect x="40.3700%" y="869" width="0.0195%" height="15" fill="rgb(220,10,11)" fg:x="2073" fg:w="1"/><text x="40.6200%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="40.3700%" y="853" width="0.0195%" height="15" fill="rgb(221,106,17)" fg:x="2073" fg:w="1"/><text x="40.6200%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="40.3700%" y="837" width="0.0195%" height="15" fill="rgb(251,142,44)" fg:x="2073" fg:w="1"/><text x="40.6200%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1 samples, 0.02%)</title><rect x="40.3700%" y="821" width="0.0195%" height="15" fill="rgb(238,13,15)" fg:x="2073" fg:w="1"/><text x="40.6200%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="40.3700%" y="805" width="0.0195%" height="15" fill="rgb(208,107,27)" fg:x="2073" fg:w="1"/><text x="40.6200%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="40.3700%" y="789" width="0.0195%" height="15" fill="rgb(205,136,37)" fg:x="2073" fg:w="1"/><text x="40.6200%" y="799.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="40.3700%" y="773" width="0.0195%" height="15" fill="rgb(250,205,27)" fg:x="2073" fg:w="1"/><text x="40.6200%" y="783.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="40.3700%" y="757" width="0.0195%" height="15" fill="rgb(210,80,43)" fg:x="2073" fg:w="1"/><text x="40.6200%" y="767.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.02%)</title><rect x="40.3700%" y="741" width="0.0195%" height="15" fill="rgb(247,160,36)" fg:x="2073" fg:w="1"/><text x="40.6200%" y="751.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.02%)</title><rect x="40.3700%" y="725" width="0.0195%" height="15" fill="rgb(234,13,49)" fg:x="2073" fg:w="1"/><text x="40.6200%" y="735.50"></text></g><g><title>_mi_page_malloc_zero (1 samples, 0.02%)</title><rect x="40.3700%" y="709" width="0.0195%" height="15" fill="rgb(234,122,0)" fg:x="2073" fg:w="1"/><text x="40.6200%" y="719.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (7 samples, 0.14%)</title><rect x="40.3895%" y="869" width="0.1363%" height="15" fill="rgb(207,146,38)" fg:x="2074" fg:w="7"/><text x="40.6395%" y="879.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (7 samples, 0.14%)</title><rect x="40.3895%" y="853" width="0.1363%" height="15" fill="rgb(207,177,25)" fg:x="2074" fg:w="7"/><text x="40.6395%" y="863.50"></text></g><g><title>mio::sys::unix::selector::stateless_io_source::IoSourceState::do_io (7 samples, 0.14%)</title><rect x="40.3895%" y="837" width="0.1363%" height="15" fill="rgb(211,178,42)" fg:x="2074" fg:w="7"/><text x="40.6395%" y="847.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::_{{closure}} (7 samples, 0.14%)</title><rect x="40.3895%" y="821" width="0.1363%" height="15" fill="rgb(230,69,54)" fg:x="2074" fg:w="7"/><text x="40.6395%" y="831.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (7 samples, 0.14%)</title><rect x="40.3895%" y="805" width="0.1363%" height="15" fill="rgb(214,135,41)" fg:x="2074" fg:w="7"/><text x="40.6395%" y="815.50"></text></g><g><title>std::sys_common::net::TcpStream::read (7 samples, 0.14%)</title><rect x="40.3895%" y="789" width="0.1363%" height="15" fill="rgb(237,67,25)" fg:x="2074" fg:w="7"/><text x="40.6395%" y="799.50"></text></g><g><title>std::sys::pal::unix::net::Socket::read (7 samples, 0.14%)</title><rect x="40.3895%" y="773" width="0.1363%" height="15" fill="rgb(222,189,50)" fg:x="2074" fg:w="7"/><text x="40.6395%" y="783.50"></text></g><g><title>std::sys::pal::unix::net::Socket::recv_with_flags (7 samples, 0.14%)</title><rect x="40.3895%" y="757" width="0.1363%" height="15" fill="rgb(245,148,34)" fg:x="2074" fg:w="7"/><text x="40.6395%" y="767.50"></text></g><g><title>recv (7 samples, 0.14%)</title><rect x="40.3895%" y="741" width="0.1363%" height="15" fill="rgb(222,29,6)" fg:x="2074" fg:w="7"/><text x="40.6395%" y="751.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="40.5063%" y="725" width="0.0195%" height="15" fill="rgb(221,189,43)" fg:x="2080" fg:w="1"/><text x="40.7563%" y="735.50"></text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::need_bytes_async::_{{closure}} (27 samples, 0.53%)</title><rect x="40.0195%" y="965" width="0.5258%" height="15" fill="rgb(207,36,27)" fg:x="2055" fg:w="27"/><text x="40.2695%" y="975.50"></text></g><g><title>&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (10 samples, 0.19%)</title><rect x="40.3505%" y="949" width="0.1947%" height="15" fill="rgb(217,90,24)" fg:x="2072" fg:w="10"/><text x="40.6005%" y="959.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (8 samples, 0.16%)</title><rect x="40.3895%" y="933" width="0.1558%" height="15" fill="rgb(224,66,35)" fg:x="2074" fg:w="8"/><text x="40.6395%" y="943.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (8 samples, 0.16%)</title><rect x="40.3895%" y="917" width="0.1558%" height="15" fill="rgb(221,13,50)" fg:x="2074" fg:w="8"/><text x="40.6395%" y="927.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (8 samples, 0.16%)</title><rect x="40.3895%" y="901" width="0.1558%" height="15" fill="rgb(236,68,49)" fg:x="2074" fg:w="8"/><text x="40.6395%" y="911.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (8 samples, 0.16%)</title><rect x="40.3895%" y="885" width="0.1558%" height="15" fill="rgb(229,146,28)" fg:x="2074" fg:w="8"/><text x="40.6395%" y="895.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_read_ready (1 samples, 0.02%)</title><rect x="40.5258%" y="869" width="0.0195%" height="15" fill="rgb(225,31,38)" fg:x="2081" fg:w="1"/><text x="40.7758%" y="879.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.02%)</title><rect x="40.5258%" y="853" width="0.0195%" height="15" fill="rgb(250,208,3)" fg:x="2081" fg:w="1"/><text x="40.7758%" y="863.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (1 samples, 0.02%)</title><rect x="40.5258%" y="837" width="0.0195%" height="15" fill="rgb(246,54,23)" fg:x="2081" fg:w="1"/><text x="40.7758%" y="847.50"></text></g><g><title>tokio::runtime::context::budget (1 samples, 0.02%)</title><rect x="40.5258%" y="821" width="0.0195%" height="15" fill="rgb(243,76,11)" fg:x="2081" fg:w="1"/><text x="40.7758%" y="831.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.02%)</title><rect x="40.5258%" y="805" width="0.0195%" height="15" fill="rgb(245,21,50)" fg:x="2081" fg:w="1"/><text x="40.7758%" y="815.50"></text></g><g><title>tokio::runtime::context::budget::_{{closure}} (1 samples, 0.02%)</title><rect x="40.5258%" y="789" width="0.0195%" height="15" fill="rgb(228,9,43)" fg:x="2081" fg:w="1"/><text x="40.7758%" y="799.50"></text></g><g><title>tokio::runtime::coop::poll_proceed::_{{closure}} (1 samples, 0.02%)</title><rect x="40.5258%" y="773" width="0.0195%" height="15" fill="rgb(208,100,47)" fg:x="2081" fg:w="1"/><text x="40.7758%" y="783.50"></text></g><g><title>tokio::runtime::coop::Budget::decrement (1 samples, 0.02%)</title><rect x="40.5258%" y="757" width="0.0195%" height="15" fill="rgb(232,26,8)" fg:x="2081" fg:w="1"/><text x="40.7758%" y="767.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as snafu::OptionExt&lt;T&gt;&gt;::with_context (2 samples, 0.04%)</title><rect x="40.7595%" y="949" width="0.0389%" height="15" fill="rgb(216,166,38)" fg:x="2093" fg:w="2"/><text x="41.0095%" y="959.50"></text></g><g><title>&lt;usize as core::ops::arith::AddAssign&gt;::add_assign (2 samples, 0.04%)</title><rect x="41.0321%" y="917" width="0.0389%" height="15" fill="rgb(251,202,51)" fg:x="2107" fg:w="2"/><text x="41.2821%" y="927.50"></text></g><g><title>&lt;usize as core::ops::arith::MulAssign&gt;::mul_assign (1 samples, 0.02%)</title><rect x="41.0711%" y="917" width="0.0195%" height="15" fill="rgb(254,216,34)" fg:x="2109" fg:w="1"/><text x="41.3211%" y="927.50"></text></g><g><title>atoi::ascii_to_digit (3 samples, 0.06%)</title><rect x="41.0906%" y="917" width="0.0584%" height="15" fill="rgb(251,32,27)" fg:x="2110" fg:w="3"/><text x="41.3406%" y="927.50"></text></g><g><title>core::cmp::min (1 samples, 0.02%)</title><rect x="41.1490%" y="917" width="0.0195%" height="15" fill="rgb(208,127,28)" fg:x="2113" fg:w="1"/><text x="41.3990%" y="927.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.02%)</title><rect x="41.1490%" y="901" width="0.0195%" height="15" fill="rgb(224,137,22)" fg:x="2113" fg:w="1"/><text x="41.3990%" y="911.50"></text></g><g><title>core::cmp::min_by (1 samples, 0.02%)</title><rect x="41.1490%" y="885" width="0.0195%" height="15" fill="rgb(254,70,32)" fg:x="2113" fg:w="1"/><text x="41.3990%" y="895.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,044 samples, 20.33%)</title><rect x="20.9737%" y="997" width="20.3311%" height="15" fill="rgb(229,75,37)" fg:x="1077" fg:w="1044"/><text x="21.2237%" y="1007.50">&lt;core::pin::Pin&lt;P&gt; as core::futu..</text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::_{{closure}}::_{{closure}}::_{{closure}}::_decode_async::_{{closure}} (1,043 samples, 20.31%)</title><rect x="20.9932%" y="981" width="20.3116%" height="15" fill="rgb(252,64,23)" fg:x="1078" fg:w="1043"/><text x="21.2432%" y="991.50">rutin::frame::Resp3&lt;bytes::bytes..</text></g><g><title>rutin::util::atoi (39 samples, 0.76%)</title><rect x="40.5453%" y="965" width="0.7595%" height="15" fill="rgb(232,162,48)" fg:x="2082" fg:w="39"/><text x="40.7953%" y="975.50"></text></g><g><title>atoi::atoi (26 samples, 0.51%)</title><rect x="40.7984%" y="949" width="0.5063%" height="15" fill="rgb(246,160,12)" fg:x="2095" fg:w="26"/><text x="41.0484%" y="959.50"></text></g><g><title>&lt;I as atoi::FromRadix10SignedChecked&gt;::from_radix_10_signed_checked (26 samples, 0.51%)</title><rect x="40.7984%" y="933" width="0.5063%" height="15" fill="rgb(247,166,0)" fg:x="2095" fg:w="26"/><text x="41.0484%" y="943.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (7 samples, 0.14%)</title><rect x="41.1685%" y="917" width="0.1363%" height="15" fill="rgb(249,219,21)" fg:x="2114" fg:w="7"/><text x="41.4185%" y="927.50"></text></g><g><title>&lt;I as atoi::FromRadix10SignedChecked&gt;::from_radix_10_signed_checked::_{{closure}} (7 samples, 0.14%)</title><rect x="41.1685%" y="901" width="0.1363%" height="15" fill="rgb(205,209,3)" fg:x="2114" fg:w="7"/><text x="41.4185%" y="911.50"></text></g><g><title>atoi::Sign::try_from (3 samples, 0.06%)</title><rect x="41.2463%" y="885" width="0.0584%" height="15" fill="rgb(243,44,1)" fg:x="2118" fg:w="3"/><text x="41.4963%" y="895.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.02%)</title><rect x="41.3048%" y="997" width="0.0195%" height="15" fill="rgb(206,159,16)" fg:x="2121" fg:w="1"/><text x="41.5548%" y="1007.50"></text></g><g><title>[libc.so.6] (48 samples, 0.93%)</title><rect x="41.3242%" y="997" width="0.9348%" height="15" fill="rgb(244,77,30)" fg:x="2122" fg:w="48"/><text x="41.5742%" y="1007.50"></text></g><g><title>_mi_page_malloc (11 samples, 0.21%)</title><rect x="42.4537%" y="869" width="0.2142%" height="15" fill="rgb(218,69,12)" fg:x="2180" fg:w="11"/><text x="42.7037%" y="879.50"></text></g><g><title>_mi_page_malloc_zero (7 samples, 0.14%)</title><rect x="42.5316%" y="853" width="0.1363%" height="15" fill="rgb(212,87,7)" fg:x="2184" fg:w="7"/><text x="42.7816%" y="863.50"></text></g><g><title>mi_heap_malloc_aligned_at (12 samples, 0.23%)</title><rect x="42.6680%" y="869" width="0.2337%" height="15" fill="rgb(245,114,25)" fg:x="2191" fg:w="12"/><text x="42.9180%" y="879.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at (12 samples, 0.23%)</title><rect x="42.6680%" y="853" width="0.2337%" height="15" fill="rgb(210,61,42)" fg:x="2191" fg:w="12"/><text x="42.9180%" y="863.50"></text></g><g><title>_mi_heap_get_free_small_page (2 samples, 0.04%)</title><rect x="42.8627%" y="837" width="0.0389%" height="15" fill="rgb(211,52,33)" fg:x="2201" fg:w="2"/><text x="43.1127%" y="847.50"></text></g><g><title>_mi_wsize_from_size (1 samples, 0.02%)</title><rect x="42.8822%" y="821" width="0.0195%" height="15" fill="rgb(234,58,33)" fg:x="2202" fg:w="1"/><text x="43.1322%" y="831.50"></text></g><g><title>_mi_deferred_free (6 samples, 0.12%)</title><rect x="42.9990%" y="805" width="0.1168%" height="15" fill="rgb(220,115,36)" fg:x="2208" fg:w="6"/><text x="43.2490%" y="815.50"></text></g><g><title>_mi_heap_delayed_free_partial (8 samples, 0.16%)</title><rect x="43.1159%" y="805" width="0.1558%" height="15" fill="rgb(243,153,54)" fg:x="2214" fg:w="8"/><text x="43.3659%" y="815.50"></text></g><g><title>_mi_free_delayed_block (3 samples, 0.06%)</title><rect x="43.2132%" y="789" width="0.0584%" height="15" fill="rgb(251,47,18)" fg:x="2219" fg:w="3"/><text x="43.4632%" y="799.50"></text></g><g><title>_mi_page_free_collect (3 samples, 0.06%)</title><rect x="43.2132%" y="773" width="0.0584%" height="15" fill="rgb(242,102,42)" fg:x="2219" fg:w="3"/><text x="43.4632%" y="783.50"></text></g><g><title>_mi_page_thread_free_collect (3 samples, 0.06%)</title><rect x="43.2132%" y="757" width="0.0584%" height="15" fill="rgb(234,31,38)" fg:x="2219" fg:w="3"/><text x="43.4632%" y="767.50"></text></g><g><title>_mi_page_free_collect (4 samples, 0.08%)</title><rect x="43.3496%" y="773" width="0.0779%" height="15" fill="rgb(221,117,51)" fg:x="2226" fg:w="4"/><text x="43.5996%" y="783.50"></text></g><g><title>_mi_malloc_generic (26 samples, 0.51%)</title><rect x="42.9601%" y="821" width="0.5063%" height="15" fill="rgb(212,20,18)" fg:x="2206" fg:w="26"/><text x="43.2101%" y="831.50"></text></g><g><title>mi_find_page (10 samples, 0.19%)</title><rect x="43.2717%" y="805" width="0.1947%" height="15" fill="rgb(245,133,36)" fg:x="2222" fg:w="10"/><text x="43.5217%" y="815.50"></text></g><g><title>mi_find_free_page (6 samples, 0.12%)</title><rect x="43.3496%" y="789" width="0.1168%" height="15" fill="rgb(212,6,19)" fg:x="2226" fg:w="6"/><text x="43.5996%" y="799.50"></text></g><g><title>mi_page_queue (2 samples, 0.04%)</title><rect x="43.4275%" y="773" width="0.0389%" height="15" fill="rgb(218,1,36)" fg:x="2230" fg:w="2"/><text x="43.6775%" y="783.50"></text></g><g><title>_mi_bin (2 samples, 0.04%)</title><rect x="43.4275%" y="757" width="0.0389%" height="15" fill="rgb(246,84,54)" fg:x="2230" fg:w="2"/><text x="43.6775%" y="767.50"></text></g><g><title>mi_bin (2 samples, 0.04%)</title><rect x="43.4275%" y="741" width="0.0389%" height="15" fill="rgb(242,110,6)" fg:x="2230" fg:w="2"/><text x="43.6775%" y="751.50"></text></g><g><title>_mi_heap_get_free_small_page (1 samples, 0.02%)</title><rect x="43.4664%" y="805" width="0.0195%" height="15" fill="rgb(214,47,5)" fg:x="2232" fg:w="1"/><text x="43.7164%" y="815.50"></text></g><g><title>_mi_wsize_from_size (1 samples, 0.02%)</title><rect x="43.4664%" y="789" width="0.0195%" height="15" fill="rgb(218,159,25)" fg:x="2232" fg:w="1"/><text x="43.7164%" y="799.50"></text></g><g><title>_mi_heap_malloc_zero (28 samples, 0.55%)</title><rect x="42.9601%" y="853" width="0.5453%" height="15" fill="rgb(215,211,28)" fg:x="2206" fg:w="28"/><text x="43.2101%" y="863.50"></text></g><g><title>_mi_heap_malloc_zero_ex (28 samples, 0.55%)</title><rect x="42.9601%" y="837" width="0.5453%" height="15" fill="rgb(238,59,32)" fg:x="2206" fg:w="28"/><text x="43.2101%" y="847.50"></text></g><g><title>mi_heap_malloc_small_zero (2 samples, 0.04%)</title><rect x="43.4664%" y="821" width="0.0389%" height="15" fill="rgb(226,82,3)" fg:x="2232" fg:w="2"/><text x="43.7164%" y="831.50"></text></g><g><title>_mi_page_malloc_zero (1 samples, 0.02%)</title><rect x="43.4859%" y="805" width="0.0195%" height="15" fill="rgb(240,164,32)" fg:x="2233" fg:w="1"/><text x="43.7359%" y="815.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (32 samples, 0.62%)</title><rect x="42.9017%" y="869" width="0.6232%" height="15" fill="rgb(232,46,7)" fg:x="2203" fg:w="32"/><text x="43.1517%" y="879.50"></text></g><g><title>mi_malloc_is_naturally_aligned (1 samples, 0.02%)</title><rect x="43.5054%" y="853" width="0.0195%" height="15" fill="rgb(229,129,53)" fg:x="2234" fg:w="1"/><text x="43.7554%" y="863.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (72 samples, 1.40%)</title><rect x="42.2590%" y="997" width="1.4021%" height="15" fill="rgb(234,188,29)" fg:x="2170" fg:w="72"/><text x="42.5090%" y="1007.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (72 samples, 1.40%)</title><rect x="42.2590%" y="981" width="1.4021%" height="15" fill="rgb(246,141,4)" fg:x="2170" fg:w="72"/><text x="42.5090%" y="991.50"></text></g><g><title>alloc::alloc::exchange_malloc (64 samples, 1.25%)</title><rect x="42.4148%" y="965" width="1.2463%" height="15" fill="rgb(229,23,39)" fg:x="2178" fg:w="64"/><text x="42.6648%" y="975.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (63 samples, 1.23%)</title><rect x="42.4343%" y="949" width="1.2269%" height="15" fill="rgb(206,12,3)" fg:x="2179" fg:w="63"/><text x="42.6843%" y="959.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (63 samples, 1.23%)</title><rect x="42.4343%" y="933" width="1.2269%" height="15" fill="rgb(252,226,20)" fg:x="2179" fg:w="63"/><text x="42.6843%" y="943.50"></text></g><g><title>alloc::alloc::alloc (63 samples, 1.23%)</title><rect x="42.4343%" y="917" width="1.2269%" height="15" fill="rgb(216,123,35)" fg:x="2179" fg:w="63"/><text x="42.6843%" y="927.50"></text></g><g><title>__rust_alloc (63 samples, 1.23%)</title><rect x="42.4343%" y="901" width="1.2269%" height="15" fill="rgb(212,68,40)" fg:x="2179" fg:w="63"/><text x="42.6843%" y="911.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (63 samples, 1.23%)</title><rect x="42.4343%" y="885" width="1.2269%" height="15" fill="rgb(254,125,32)" fg:x="2179" fg:w="63"/><text x="42.6843%" y="895.50"></text></g><g><title>mi_malloc_aligned (7 samples, 0.14%)</title><rect x="43.5248%" y="869" width="0.1363%" height="15" fill="rgb(253,97,22)" fg:x="2235" fg:w="7"/><text x="43.7748%" y="879.50"></text></g><g><title>mi_prim_get_default_heap (7 samples, 0.14%)</title><rect x="43.5248%" y="853" width="0.1363%" height="15" fill="rgb(241,101,14)" fg:x="2235" fg:w="7"/><text x="43.7748%" y="863.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (5 samples, 0.10%)</title><rect x="43.7390%" y="981" width="0.0974%" height="15" fill="rgb(238,103,29)" fg:x="2246" fg:w="5"/><text x="43.9890%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (15 samples, 0.29%)</title><rect x="43.6611%" y="997" width="0.2921%" height="15" fill="rgb(233,195,47)" fg:x="2242" fg:w="15"/><text x="43.9111%" y="1007.50"></text></g><g><title>core::ptr::write (6 samples, 0.12%)</title><rect x="43.8364%" y="981" width="0.1168%" height="15" fill="rgb(246,218,30)" fg:x="2251" fg:w="6"/><text x="44.0864%" y="991.50"></text></g><g><title>_mi_page_malloc (7 samples, 0.14%)</title><rect x="44.1091%" y="853" width="0.1363%" height="15" fill="rgb(219,145,47)" fg:x="2265" fg:w="7"/><text x="44.3591%" y="863.50"></text></g><g><title>_mi_page_malloc_zero (4 samples, 0.08%)</title><rect x="44.1675%" y="837" width="0.0779%" height="15" fill="rgb(243,12,26)" fg:x="2268" fg:w="4"/><text x="44.4175%" y="847.50"></text></g><g><title>mi_heap_malloc_aligned (1 samples, 0.02%)</title><rect x="44.2454%" y="853" width="0.0195%" height="15" fill="rgb(214,87,16)" fg:x="2272" fg:w="1"/><text x="44.4954%" y="863.50"></text></g><g><title>mi_heap_malloc_aligned_at (5 samples, 0.10%)</title><rect x="44.2648%" y="853" width="0.0974%" height="15" fill="rgb(208,99,42)" fg:x="2273" fg:w="5"/><text x="44.5148%" y="863.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at (5 samples, 0.10%)</title><rect x="44.2648%" y="837" width="0.0974%" height="15" fill="rgb(253,99,2)" fg:x="2273" fg:w="5"/><text x="44.5148%" y="847.50"></text></g><g><title>_mi_page_malloc_zero (1 samples, 0.02%)</title><rect x="44.3817%" y="789" width="0.0195%" height="15" fill="rgb(220,168,23)" fg:x="2279" fg:w="1"/><text x="44.6317%" y="799.50"></text></g><g><title>mi_find_page (2 samples, 0.04%)</title><rect x="44.4012%" y="789" width="0.0389%" height="15" fill="rgb(242,38,24)" fg:x="2280" fg:w="2"/><text x="44.6512%" y="799.50"></text></g><g><title>mi_find_free_page (2 samples, 0.04%)</title><rect x="44.4012%" y="773" width="0.0389%" height="15" fill="rgb(225,182,9)" fg:x="2280" fg:w="2"/><text x="44.6512%" y="783.50"></text></g><g><title>_mi_page_free_collect (2 samples, 0.04%)</title><rect x="44.4012%" y="757" width="0.0389%" height="15" fill="rgb(243,178,37)" fg:x="2280" fg:w="2"/><text x="44.6512%" y="767.50"></text></g><g><title>_mi_heap_collect_retired (1 samples, 0.02%)</title><rect x="44.4401%" y="773" width="0.0195%" height="15" fill="rgb(232,139,19)" fg:x="2282" fg:w="1"/><text x="44.6901%" y="783.50"></text></g><g><title>mi_page_extend_free (1 samples, 0.02%)</title><rect x="44.4596%" y="773" width="0.0195%" height="15" fill="rgb(225,201,24)" fg:x="2283" fg:w="1"/><text x="44.7096%" y="783.50"></text></g><g><title>mi_page_extend_free (1 samples, 0.02%)</title><rect x="44.4596%" y="757" width="0.0195%" height="15" fill="rgb(221,47,46)" fg:x="2283" fg:w="1"/><text x="44.7096%" y="767.50"></text></g><g><title>mi_page_free_list_extend (1 samples, 0.02%)</title><rect x="44.4596%" y="741" width="0.0195%" height="15" fill="rgb(249,23,13)" fg:x="2283" fg:w="1"/><text x="44.7096%" y="751.50"></text></g><g><title>mi_block_set_next (1 samples, 0.02%)</title><rect x="44.4596%" y="725" width="0.0195%" height="15" fill="rgb(219,9,5)" fg:x="2283" fg:w="1"/><text x="44.7096%" y="735.50"></text></g><g><title>mi_block_set_nextx (1 samples, 0.02%)</title><rect x="44.4596%" y="709" width="0.0195%" height="15" fill="rgb(254,171,16)" fg:x="2283" fg:w="1"/><text x="44.7096%" y="719.50"></text></g><g><title>mi_page_free_list_extend (1 samples, 0.02%)</title><rect x="44.4985%" y="741" width="0.0195%" height="15" fill="rgb(230,171,20)" fg:x="2285" fg:w="1"/><text x="44.7485%" y="751.50"></text></g><g><title>mi_page_queue_push (1 samples, 0.02%)</title><rect x="44.5180%" y="741" width="0.0195%" height="15" fill="rgb(210,71,41)" fg:x="2286" fg:w="1"/><text x="44.7680%" y="751.50"></text></g><g><title>mi_heap_queue_first_update (1 samples, 0.02%)</title><rect x="44.5180%" y="725" width="0.0195%" height="15" fill="rgb(206,173,20)" fg:x="2286" fg:w="1"/><text x="44.7680%" y="735.50"></text></g><g><title>_mi_prim_clock_now (1 samples, 0.02%)</title><rect x="44.6154%" y="661" width="0.0195%" height="15" fill="rgb(233,88,34)" fg:x="2291" fg:w="1"/><text x="44.8654%" y="671.50"></text></g><g><title>clock_gettime (1 samples, 0.02%)</title><rect x="44.6154%" y="645" width="0.0195%" height="15" fill="rgb(223,209,46)" fg:x="2291" fg:w="1"/><text x="44.8654%" y="655.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.02%)</title><rect x="44.6154%" y="629" width="0.0195%" height="15" fill="rgb(250,43,18)" fg:x="2291" fg:w="1"/><text x="44.8654%" y="639.50"></text></g><g><title>mi_segment_span_allocate (4 samples, 0.08%)</title><rect x="44.5764%" y="709" width="0.0779%" height="15" fill="rgb(208,13,10)" fg:x="2289" fg:w="4"/><text x="44.8264%" y="719.50"></text></g><g><title>mi_segment_ensure_committed (2 samples, 0.04%)</title><rect x="44.6154%" y="693" width="0.0389%" height="15" fill="rgb(212,200,36)" fg:x="2291" fg:w="2"/><text x="44.8654%" y="703.50"></text></g><g><title>mi_segment_commit (2 samples, 0.04%)</title><rect x="44.6154%" y="677" width="0.0389%" height="15" fill="rgb(225,90,30)" fg:x="2291" fg:w="2"/><text x="44.8654%" y="687.50"></text></g><g><title>mi_commit_mask_all_set (1 samples, 0.02%)</title><rect x="44.6349%" y="661" width="0.0195%" height="15" fill="rgb(236,182,39)" fg:x="2292" fg:w="1"/><text x="44.8849%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (37 samples, 0.72%)</title><rect x="43.9533%" y="997" width="0.7205%" height="15" fill="rgb(212,144,35)" fg:x="2257" fg:w="37"/><text x="44.2033%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (33 samples, 0.64%)</title><rect x="44.0312%" y="981" width="0.6426%" height="15" fill="rgb(228,63,44)" fg:x="2261" fg:w="33"/><text x="44.2812%" y="991.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (31 samples, 0.60%)</title><rect x="44.0701%" y="965" width="0.6037%" height="15" fill="rgb(228,109,6)" fg:x="2263" fg:w="31"/><text x="44.3201%" y="975.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (31 samples, 0.60%)</title><rect x="44.0701%" y="949" width="0.6037%" height="15" fill="rgb(238,117,24)" fg:x="2263" fg:w="31"/><text x="44.3201%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (30 samples, 0.58%)</title><rect x="44.0896%" y="933" width="0.5842%" height="15" fill="rgb(242,26,26)" fg:x="2264" fg:w="30"/><text x="44.3396%" y="943.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (30 samples, 0.58%)</title><rect x="44.0896%" y="917" width="0.5842%" height="15" fill="rgb(221,92,48)" fg:x="2264" fg:w="30"/><text x="44.3396%" y="927.50"></text></g><g><title>alloc::alloc::alloc (30 samples, 0.58%)</title><rect x="44.0896%" y="901" width="0.5842%" height="15" fill="rgb(209,209,32)" fg:x="2264" fg:w="30"/><text x="44.3396%" y="911.50"></text></g><g><title>__rust_alloc (30 samples, 0.58%)</title><rect x="44.0896%" y="885" width="0.5842%" height="15" fill="rgb(221,70,22)" fg:x="2264" fg:w="30"/><text x="44.3396%" y="895.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (30 samples, 0.58%)</title><rect x="44.0896%" y="869" width="0.5842%" height="15" fill="rgb(248,145,5)" fg:x="2264" fg:w="30"/><text x="44.3396%" y="879.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (16 samples, 0.31%)</title><rect x="44.3622%" y="853" width="0.3116%" height="15" fill="rgb(226,116,26)" fg:x="2278" fg:w="16"/><text x="44.6122%" y="863.50"></text></g><g><title>_mi_heap_malloc_zero (15 samples, 0.29%)</title><rect x="44.3817%" y="837" width="0.2921%" height="15" fill="rgb(244,5,17)" fg:x="2279" fg:w="15"/><text x="44.6317%" y="847.50"></text></g><g><title>_mi_heap_malloc_zero_ex (15 samples, 0.29%)</title><rect x="44.3817%" y="821" width="0.2921%" height="15" fill="rgb(252,159,33)" fg:x="2279" fg:w="15"/><text x="44.6317%" y="831.50"></text></g><g><title>_mi_malloc_generic (15 samples, 0.29%)</title><rect x="44.3817%" y="805" width="0.2921%" height="15" fill="rgb(206,71,0)" fg:x="2279" fg:w="15"/><text x="44.6317%" y="815.50"></text></g><g><title>mi_page_queue_find_free_ex (12 samples, 0.23%)</title><rect x="44.4401%" y="789" width="0.2337%" height="15" fill="rgb(233,118,54)" fg:x="2282" fg:w="12"/><text x="44.6901%" y="799.50"></text></g><g><title>mi_page_fresh (10 samples, 0.19%)</title><rect x="44.4791%" y="773" width="0.1947%" height="15" fill="rgb(234,83,48)" fg:x="2284" fg:w="10"/><text x="44.7291%" y="783.50"></text></g><g><title>mi_page_fresh_alloc (10 samples, 0.19%)</title><rect x="44.4791%" y="757" width="0.1947%" height="15" fill="rgb(228,3,54)" fg:x="2284" fg:w="10"/><text x="44.7291%" y="767.50"></text></g><g><title>mi_segments_page_alloc (7 samples, 0.14%)</title><rect x="44.5375%" y="741" width="0.1363%" height="15" fill="rgb(226,155,13)" fg:x="2287" fg:w="7"/><text x="44.7875%" y="751.50"></text></g><g><title>mi_segments_page_find_and_allocate (6 samples, 0.12%)</title><rect x="44.5570%" y="725" width="0.1168%" height="15" fill="rgb(241,28,37)" fg:x="2288" fg:w="6"/><text x="44.8070%" y="735.50"></text></g><g><title>mi_span_queue_delete (1 samples, 0.02%)</title><rect x="44.6543%" y="709" width="0.0195%" height="15" fill="rgb(233,93,10)" fg:x="2293" fg:w="1"/><text x="44.9043%" y="719.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.04%)</title><rect x="44.6738%" y="997" width="0.0389%" height="15" fill="rgb(225,113,19)" fg:x="2294" fg:w="2"/><text x="44.9238%" y="1007.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.04%)</title><rect x="44.6738%" y="981" width="0.0389%" height="15" fill="rgb(241,2,18)" fg:x="2294" fg:w="2"/><text x="44.9238%" y="991.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.02%)</title><rect x="44.6933%" y="965" width="0.0195%" height="15" fill="rgb(228,207,21)" fg:x="2295" fg:w="1"/><text x="44.9433%" y="975.50"></text></g><g><title>mi_page_queue_is_special (2 samples, 0.04%)</title><rect x="45.2580%" y="869" width="0.0389%" height="15" fill="rgb(213,211,35)" fg:x="2324" fg:w="2"/><text x="45.5080%" y="879.50"></text></g><g><title>mi_heap_page_queue_of (16 samples, 0.31%)</title><rect x="45.2970%" y="853" width="0.3116%" height="15" fill="rgb(209,83,10)" fg:x="2326" fg:w="16"/><text x="45.5470%" y="863.50"></text></g><g><title>mi_bin (7 samples, 0.14%)</title><rect x="45.4722%" y="837" width="0.1363%" height="15" fill="rgb(209,164,1)" fg:x="2335" fg:w="7"/><text x="45.7222%" y="847.50"></text></g><g><title>mi_bsr (4 samples, 0.08%)</title><rect x="45.5307%" y="821" width="0.0779%" height="15" fill="rgb(213,184,43)" fg:x="2338" fg:w="4"/><text x="45.7807%" y="831.50"></text></g><g><title>mi_page_queue_of (17 samples, 0.33%)</title><rect x="45.2970%" y="869" width="0.3311%" height="15" fill="rgb(231,61,34)" fg:x="2326" fg:w="17"/><text x="45.5470%" y="879.50"></text></g><g><title>mi_page_heap (1 samples, 0.02%)</title><rect x="45.6086%" y="853" width="0.0195%" height="15" fill="rgb(235,75,3)" fg:x="2342" fg:w="1"/><text x="45.8586%" y="863.50"></text></g><g><title>_mi_page_retire (46 samples, 0.90%)</title><rect x="44.7517%" y="885" width="0.8958%" height="15" fill="rgb(220,106,47)" fg:x="2298" fg:w="46"/><text x="45.0017%" y="895.50"></text></g><g><title>mi_page_set_has_aligned (1 samples, 0.02%)</title><rect x="45.6280%" y="869" width="0.0195%" height="15" fill="rgb(210,196,33)" fg:x="2343" fg:w="1"/><text x="45.8780%" y="879.50"></text></g><g><title>_mi_segment_page_of (4 samples, 0.08%)</title><rect x="45.8033%" y="869" width="0.0779%" height="15" fill="rgb(229,154,42)" fg:x="2352" fg:w="4"/><text x="46.0533%" y="879.50"></text></g><g><title>mi_slice_first (3 samples, 0.06%)</title><rect x="45.8228%" y="853" width="0.0584%" height="15" fill="rgb(228,114,26)" fg:x="2353" fg:w="3"/><text x="46.0728%" y="863.50"></text></g><g><title>mi_checked_ptr_segment (7 samples, 0.14%)</title><rect x="45.8812%" y="869" width="0.1363%" height="15" fill="rgb(208,144,1)" fg:x="2356" fg:w="7"/><text x="46.1312%" y="879.50"></text></g><g><title>_mi_ptr_segment (7 samples, 0.14%)</title><rect x="45.8812%" y="853" width="0.1363%" height="15" fill="rgb(239,112,37)" fg:x="2356" fg:w="7"/><text x="46.1312%" y="863.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (67 samples, 1.30%)</title><rect x="44.7517%" y="965" width="1.3048%" height="15" fill="rgb(210,96,50)" fg:x="2298" fg:w="67"/><text x="45.0017%" y="975.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (67 samples, 1.30%)</title><rect x="44.7517%" y="949" width="1.3048%" height="15" fill="rgb(222,178,2)" fg:x="2298" fg:w="67"/><text x="45.0017%" y="959.50"></text></g><g><title>alloc::alloc::dealloc (67 samples, 1.30%)</title><rect x="44.7517%" y="933" width="1.3048%" height="15" fill="rgb(226,74,18)" fg:x="2298" fg:w="67"/><text x="45.0017%" y="943.50"></text></g><g><title>__rust_dealloc (67 samples, 1.30%)</title><rect x="44.7517%" y="917" width="1.3048%" height="15" fill="rgb(225,67,54)" fg:x="2298" fg:w="67"/><text x="45.0017%" y="927.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (67 samples, 1.30%)</title><rect x="44.7517%" y="901" width="1.3048%" height="15" fill="rgb(251,92,32)" fg:x="2298" fg:w="67"/><text x="45.0017%" y="911.50"></text></g><g><title>mi_free (21 samples, 0.41%)</title><rect x="45.6475%" y="885" width="0.4090%" height="15" fill="rgb(228,149,22)" fg:x="2344" fg:w="21"/><text x="45.8975%" y="895.50"></text></g><g><title>mi_free_block_local (2 samples, 0.04%)</title><rect x="46.0175%" y="869" width="0.0389%" height="15" fill="rgb(243,54,13)" fg:x="2363" fg:w="2"/><text x="46.2675%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::{{closure}}::{{closure}}::{{closure}}::_decode_async&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}&gt;&gt;&gt; (83 samples, 1.62%)</title><rect x="44.7128%" y="997" width="1.6164%" height="15" fill="rgb(243,180,28)" fg:x="2296" fg:w="83"/><text x="44.9628%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::{{closure}}::{{closure}}::{{closure}}::_decode_async&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}&gt;&gt; (83 samples, 1.62%)</title><rect x="44.7128%" y="981" width="1.6164%" height="15" fill="rgb(208,167,24)" fg:x="2296" fg:w="83"/><text x="44.9628%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::{{closure}}::{{closure}}::{{closure}}::_decode_async&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}&gt; (14 samples, 0.27%)</title><rect x="46.0565%" y="965" width="0.2726%" height="15" fill="rgb(245,73,45)" fg:x="2365" fg:w="14"/><text x="46.3065%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_length_async&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}&gt; (1 samples, 0.02%)</title><rect x="46.3291%" y="997" width="0.0195%" height="15" fill="rgb(237,203,48)" fg:x="2379" fg:w="1"/><text x="46.5791%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::BytesMut&gt; (7 samples, 0.14%)</title><rect x="46.5823%" y="981" width="0.1363%" height="15" fill="rgb(211,197,16)" fg:x="2392" fg:w="7"/><text x="46.8323%" y="991.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (7 samples, 0.14%)</title><rect x="46.5823%" y="965" width="0.1363%" height="15" fill="rgb(243,99,51)" fg:x="2392" fg:w="7"/><text x="46.8323%" y="975.50"></text></g><g><title>bytes::bytes_mut::release_shared (7 samples, 0.14%)</title><rect x="46.5823%" y="949" width="0.1363%" height="15" fill="rgb(215,123,29)" fg:x="2392" fg:w="7"/><text x="46.8323%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (7 samples, 0.14%)</title><rect x="46.5823%" y="933" width="0.1363%" height="15" fill="rgb(239,186,37)" fg:x="2392" fg:w="7"/><text x="46.8323%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_sub (7 samples, 0.14%)</title><rect x="46.5823%" y="917" width="0.1363%" height="15" fill="rgb(252,136,39)" fg:x="2392" fg:w="7"/><text x="46.8323%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_line_async&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}&gt; (1 samples, 0.02%)</title><rect x="46.7186%" y="981" width="0.0195%" height="15" fill="rgb(223,213,32)" fg:x="2399" fg:w="1"/><text x="46.9686%" y="991.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.04%)</title><rect x="46.7381%" y="981" width="0.0389%" height="15" fill="rgb(233,115,5)" fg:x="2400" fg:w="2"/><text x="46.9881%" y="991.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (1 samples, 0.02%)</title><rect x="47.7507%" y="949" width="0.0195%" height="15" fill="rgb(207,226,44)" fg:x="2452" fg:w="1"/><text x="48.0007%" y="959.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (1 samples, 0.02%)</title><rect x="47.7897%" y="917" width="0.0195%" height="15" fill="rgb(208,126,0)" fg:x="2454" fg:w="1"/><text x="48.0397%" y="927.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (2 samples, 0.04%)</title><rect x="47.7897%" y="933" width="0.0389%" height="15" fill="rgb(244,66,21)" fg:x="2454" fg:w="2"/><text x="48.0397%" y="943.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.02%)</title><rect x="47.8092%" y="917" width="0.0195%" height="15" fill="rgb(222,97,12)" fg:x="2455" fg:w="1"/><text x="48.0592%" y="927.50"></text></g><g><title>bytes::bytes_mut::BytesMut::promote_to_shared (1 samples, 0.02%)</title><rect x="47.8286%" y="917" width="0.0195%" height="15" fill="rgb(219,213,19)" fg:x="2456" fg:w="1"/><text x="48.0786%" y="927.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="47.8286%" y="901" width="0.0195%" height="15" fill="rgb(252,169,30)" fg:x="2456" fg:w="1"/><text x="48.0786%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.02%)</title><rect x="47.8286%" y="885" width="0.0195%" height="15" fill="rgb(206,32,51)" fg:x="2456" fg:w="1"/><text x="48.0786%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="47.8286%" y="869" width="0.0195%" height="15" fill="rgb(250,172,42)" fg:x="2456" fg:w="1"/><text x="48.0786%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="47.8286%" y="853" width="0.0195%" height="15" fill="rgb(209,34,43)" fg:x="2456" fg:w="1"/><text x="48.0786%" y="863.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="47.8286%" y="837" width="0.0195%" height="15" fill="rgb(223,11,35)" fg:x="2456" fg:w="1"/><text x="48.0786%" y="847.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="47.8286%" y="821" width="0.0195%" height="15" fill="rgb(251,219,26)" fg:x="2456" fg:w="1"/><text x="48.0786%" y="831.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.02%)</title><rect x="47.8286%" y="805" width="0.0195%" height="15" fill="rgb(231,119,3)" fg:x="2456" fg:w="1"/><text x="48.0786%" y="815.50"></text></g><g><title>mi_heap_malloc_aligned (1 samples, 0.02%)</title><rect x="47.8286%" y="789" width="0.0195%" height="15" fill="rgb(216,97,11)" fg:x="2456" fg:w="1"/><text x="48.0786%" y="799.50"></text></g><g><title>bytes::bytes_mut::increment_shared (25 samples, 0.49%)</title><rect x="47.8481%" y="917" width="0.4869%" height="15" fill="rgb(223,59,9)" fg:x="2457" fg:w="25"/><text x="48.0981%" y="927.50"></text></g><g><title>bytes::bytes_mut::BytesMut::shallow_clone (28 samples, 0.55%)</title><rect x="47.8286%" y="933" width="0.5453%" height="15" fill="rgb(233,93,31)" fg:x="2456" fg:w="28"/><text x="48.0786%" y="943.50"></text></g><g><title>core::ptr::read (2 samples, 0.04%)</title><rect x="48.3350%" y="917" width="0.0389%" height="15" fill="rgb(239,81,33)" fg:x="2482" fg:w="2"/><text x="48.5850%" y="927.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (33 samples, 0.64%)</title><rect x="47.7702%" y="949" width="0.6426%" height="15" fill="rgb(213,120,34)" fg:x="2453" fg:w="33"/><text x="48.0202%" y="959.50"></text></g><g><title>core::fmt::Arguments::new_v1 (2 samples, 0.04%)</title><rect x="48.3739%" y="933" width="0.0389%" height="15" fill="rgb(243,49,53)" fg:x="2484" fg:w="2"/><text x="48.6239%" y="943.50"></text></g><g><title>&lt;memchr::vector::SensibleMoveMask as memchr::vector::MoveMask&gt;::has_non_zero (1 samples, 0.02%)</title><rect x="48.6465%" y="789" width="0.0195%" height="15" fill="rgb(247,216,33)" fg:x="2498" fg:w="1"/><text x="48.8965%" y="799.50"></text></g><g><title>core::ops::function::Fn::call (1 samples, 0.02%)</title><rect x="48.6660%" y="789" width="0.0195%" height="15" fill="rgb(226,26,14)" fg:x="2499" fg:w="1"/><text x="48.9160%" y="799.50"></text></g><g><title>&lt;memchr::vector::SensibleMoveMask as memchr::vector::MoveMask&gt;::first_offset (1 samples, 0.02%)</title><rect x="48.6660%" y="773" width="0.0195%" height="15" fill="rgb(215,49,53)" fg:x="2499" fg:w="1"/><text x="48.9160%" y="783.50"></text></g><g><title>core::num::&lt;impl u32&gt;::trailing_zeros (1 samples, 0.02%)</title><rect x="48.6660%" y="757" width="0.0195%" height="15" fill="rgb(245,162,40)" fg:x="2499" fg:w="1"/><text x="48.9160%" y="767.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (14 samples, 0.27%)</title><rect x="48.6076%" y="837" width="0.2726%" height="15" fill="rgb(229,68,17)" fg:x="2496" fg:w="14"/><text x="48.8576%" y="847.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (14 samples, 0.27%)</title><rect x="48.6076%" y="821" width="0.2726%" height="15" fill="rgb(213,182,10)" fg:x="2496" fg:w="14"/><text x="48.8576%" y="831.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (13 samples, 0.25%)</title><rect x="48.6271%" y="805" width="0.2532%" height="15" fill="rgb(245,125,30)" fg:x="2497" fg:w="13"/><text x="48.8771%" y="815.50"></text></g><g><title>memchr::vector::x86avx2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m256i&gt;::movemask (10 samples, 0.19%)</title><rect x="48.6855%" y="789" width="0.1947%" height="15" fill="rgb(232,202,2)" fg:x="2500" fg:w="10"/><text x="48.9355%" y="799.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (10 samples, 0.19%)</title><rect x="48.6855%" y="773" width="0.1947%" height="15" fill="rgb(237,140,51)" fg:x="2500" fg:w="10"/><text x="48.9355%" y="783.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (17 samples, 0.33%)</title><rect x="48.5686%" y="853" width="0.3311%" height="15" fill="rgb(236,157,25)" fg:x="2494" fg:w="17"/><text x="48.8186%" y="863.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_sse2 (1 samples, 0.02%)</title><rect x="48.8802%" y="837" width="0.0195%" height="15" fill="rgb(219,209,0)" fg:x="2510" fg:w="1"/><text x="49.1302%" y="847.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (1 samples, 0.02%)</title><rect x="48.8802%" y="821" width="0.0195%" height="15" fill="rgb(240,116,54)" fg:x="2510" fg:w="1"/><text x="49.1302%" y="831.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (1 samples, 0.02%)</title><rect x="48.8802%" y="805" width="0.0195%" height="15" fill="rgb(216,10,36)" fg:x="2510" fg:w="1"/><text x="49.1302%" y="815.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::load_unaligned (1 samples, 0.02%)</title><rect x="48.8802%" y="789" width="0.0195%" height="15" fill="rgb(222,72,44)" fg:x="2510" fg:w="1"/><text x="49.1302%" y="799.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.02%)</title><rect x="48.8802%" y="773" width="0.0195%" height="15" fill="rgb(232,159,9)" fg:x="2510" fg:w="1"/><text x="49.1302%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="48.8802%" y="757" width="0.0195%" height="15" fill="rgb(210,39,32)" fg:x="2510" fg:w="1"/><text x="49.1302%" y="767.50"></text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_line_async::_{{closure}} (114 samples, 2.22%)</title><rect x="46.7770%" y="981" width="2.2201%" height="15" fill="rgb(216,194,45)" fg:x="2402" fg:w="114"/><text x="47.0270%" y="991.50">r..</text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_line (82 samples, 1.60%)</title><rect x="47.4002%" y="965" width="1.5969%" height="15" fill="rgb(218,18,35)" fg:x="2434" fg:w="82"/><text x="47.6502%" y="975.50"></text></g><g><title>memchr::memchr::memchr (30 samples, 0.58%)</title><rect x="48.4129%" y="949" width="0.5842%" height="15" fill="rgb(207,83,51)" fg:x="2486" fg:w="30"/><text x="48.6629%" y="959.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (30 samples, 0.58%)</title><rect x="48.4129%" y="933" width="0.5842%" height="15" fill="rgb(225,63,43)" fg:x="2486" fg:w="30"/><text x="48.6629%" y="943.50"></text></g><g><title>memchr::memchr::memchr::_{{closure}} (30 samples, 0.58%)</title><rect x="48.4129%" y="917" width="0.5842%" height="15" fill="rgb(207,57,36)" fg:x="2486" fg:w="30"/><text x="48.6629%" y="927.50"></text></g><g><title>memchr::memchr::memchr_raw (30 samples, 0.58%)</title><rect x="48.4129%" y="901" width="0.5842%" height="15" fill="rgb(216,99,33)" fg:x="2486" fg:w="30"/><text x="48.6629%" y="911.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (30 samples, 0.58%)</title><rect x="48.4129%" y="885" width="0.5842%" height="15" fill="rgb(225,42,16)" fg:x="2486" fg:w="30"/><text x="48.6629%" y="895.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (29 samples, 0.56%)</title><rect x="48.4323%" y="869" width="0.5648%" height="15" fill="rgb(220,201,45)" fg:x="2487" fg:w="29"/><text x="48.6823%" y="879.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::new_unchecked (5 samples, 0.10%)</title><rect x="48.8997%" y="853" width="0.0974%" height="15" fill="rgb(225,33,4)" fg:x="2511" fg:w="5"/><text x="49.1497%" y="863.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::new (1 samples, 0.02%)</title><rect x="48.9776%" y="837" width="0.0195%" height="15" fill="rgb(224,33,50)" fg:x="2515" fg:w="1"/><text x="49.2276%" y="847.50"></text></g><g><title>memchr::vector::x86avx2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m256i&gt;::splat (1 samples, 0.02%)</title><rect x="48.9776%" y="821" width="0.0195%" height="15" fill="rgb(246,198,51)" fg:x="2515" fg:w="1"/><text x="49.2276%" y="831.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set1_epi8 (1 samples, 0.02%)</title><rect x="48.9776%" y="805" width="0.0195%" height="15" fill="rgb(205,22,4)" fg:x="2515" fg:w="1"/><text x="49.2276%" y="815.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_setr_epi8 (1 samples, 0.02%)</title><rect x="48.9776%" y="789" width="0.0195%" height="15" fill="rgb(206,3,8)" fg:x="2515" fg:w="1"/><text x="49.2276%" y="799.50"></text></g><g><title>core::core_arch::simd::i8x32::new (1 samples, 0.02%)</title><rect x="48.9776%" y="773" width="0.0195%" height="15" fill="rgb(251,23,15)" fg:x="2515" fg:w="1"/><text x="49.2276%" y="783.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as snafu::OptionExt&lt;T&gt;&gt;::with_context (1 samples, 0.02%)</title><rect x="49.0750%" y="965" width="0.0195%" height="15" fill="rgb(252,88,28)" fg:x="2520" fg:w="1"/><text x="49.3250%" y="975.50"></text></g><g><title>&lt;i128 as core::ops::arith::MulAssign&gt;::mul_assign (2 samples, 0.04%)</title><rect x="49.1723%" y="933" width="0.0389%" height="15" fill="rgb(212,127,14)" fg:x="2525" fg:w="2"/><text x="49.4223%" y="943.50"></text></g><g><title>atoi::ascii_to_digit (4 samples, 0.08%)</title><rect x="49.2113%" y="933" width="0.0779%" height="15" fill="rgb(247,145,37)" fg:x="2527" fg:w="4"/><text x="49.4613%" y="943.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (2 samples, 0.04%)</title><rect x="49.2892%" y="933" width="0.0389%" height="15" fill="rgb(209,117,53)" fg:x="2531" fg:w="2"/><text x="49.5392%" y="943.50"></text></g><g><title>&lt;I as atoi::FromRadix10SignedChecked&gt;::from_radix_10_signed_checked::_{{closure}} (2 samples, 0.04%)</title><rect x="49.2892%" y="917" width="0.0389%" height="15" fill="rgb(212,90,42)" fg:x="2531" fg:w="2"/><text x="49.5392%" y="927.50"></text></g><g><title>atoi::Sign::try_from (2 samples, 0.04%)</title><rect x="49.2892%" y="901" width="0.0389%" height="15" fill="rgb(218,164,37)" fg:x="2531" fg:w="2"/><text x="49.5392%" y="911.50"></text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_decimal_async::_{{closure}} (156 samples, 3.04%)</title><rect x="46.3486%" y="997" width="3.0380%" height="15" fill="rgb(246,65,34)" fg:x="2380" fg:w="156"/><text x="46.5986%" y="1007.50">rut..</text></g><g><title>rutin::util::atoi (20 samples, 0.39%)</title><rect x="48.9971%" y="981" width="0.3895%" height="15" fill="rgb(231,100,33)" fg:x="2516" fg:w="20"/><text x="49.2471%" y="991.50"></text></g><g><title>atoi::atoi (15 samples, 0.29%)</title><rect x="49.0944%" y="965" width="0.2921%" height="15" fill="rgb(228,126,14)" fg:x="2521" fg:w="15"/><text x="49.3444%" y="975.50"></text></g><g><title>&lt;I as atoi::FromRadix10SignedChecked&gt;::from_radix_10_signed_checked (15 samples, 0.29%)</title><rect x="49.0944%" y="949" width="0.2921%" height="15" fill="rgb(215,173,21)" fg:x="2521" fg:w="15"/><text x="49.3444%" y="959.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::first (3 samples, 0.06%)</title><rect x="49.3281%" y="933" width="0.0584%" height="15" fill="rgb(210,6,40)" fg:x="2533" fg:w="3"/><text x="49.5781%" y="943.50"></text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::_{{closure}} (1,817 samples, 35.38%)</title><rect x="14.0214%" y="1061" width="35.3846%" height="15" fill="rgb(212,48,18)" fg:x="720" fg:w="1817"/><text x="14.2714%" y="1071.50">rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_a..</text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::_{{closure}}::_{{closure}} (1,729 samples, 33.67%)</title><rect x="15.7352%" y="1045" width="33.6709%" height="15" fill="rgb(230,214,11)" fg:x="808" fg:w="1729"/><text x="15.9852%" y="1055.50">rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode..</text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::_{{closure}}::_{{closure}}::_{{closure}} (1,668 samples, 32.48%)</title><rect x="16.9231%" y="1029" width="32.4830%" height="15" fill="rgb(254,105,39)" fg:x="869" fg:w="1668"/><text x="17.1731%" y="1039.50">rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::deco..</text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::_{{closure}}::_{{closure}}::_{{closure}}::_decode_async::_{{closure}} (1,586 samples, 30.89%)</title><rect x="18.5200%" y="1013" width="30.8861%" height="15" fill="rgb(245,158,5)" fg:x="951" fg:w="1586"/><text x="18.7700%" y="1023.50">rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::d..</text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::get_u8 (1 samples, 0.02%)</title><rect x="49.3866%" y="997" width="0.0195%" height="15" fill="rgb(249,208,11)" fg:x="2536" fg:w="1"/><text x="49.6366%" y="1007.50"></text></g><g><title>bytes::buf::buf_impl::Buf::get_u8 (1 samples, 0.02%)</title><rect x="49.3866%" y="981" width="0.0195%" height="15" fill="rgb(210,39,28)" fg:x="2536" fg:w="1"/><text x="49.6366%" y="991.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (1 samples, 0.02%)</title><rect x="49.3866%" y="965" width="0.0195%" height="15" fill="rgb(211,56,53)" fg:x="2536" fg:w="1"/><text x="49.6366%" y="975.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (1 samples, 0.02%)</title><rect x="49.3866%" y="949" width="0.0195%" height="15" fill="rgb(226,201,30)" fg:x="2536" fg:w="1"/><text x="49.6366%" y="959.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (1 samples, 0.02%)</title><rect x="49.3866%" y="933" width="0.0195%" height="15" fill="rgb(239,101,34)" fg:x="2536" fg:w="1"/><text x="49.6366%" y="943.50"></text></g><g><title>core::ptr::write (16 samples, 0.31%)</title><rect x="49.4060%" y="1045" width="0.3116%" height="15" fill="rgb(226,209,5)" fg:x="2537" fg:w="16"/><text x="49.6560%" y="1055.50"></text></g><g><title>[libc.so.6] (16 samples, 0.31%)</title><rect x="49.4060%" y="1029" width="0.3116%" height="15" fill="rgb(250,105,47)" fg:x="2537" fg:w="16"/><text x="49.6560%" y="1039.50"></text></g><g><title>mi_heap_malloc_aligned_at (1 samples, 0.02%)</title><rect x="49.7176%" y="965" width="0.0195%" height="15" fill="rgb(230,72,3)" fg:x="2553" fg:w="1"/><text x="49.9676%" y="975.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at (1 samples, 0.02%)</title><rect x="49.7176%" y="949" width="0.0195%" height="15" fill="rgb(232,218,39)" fg:x="2553" fg:w="1"/><text x="49.9676%" y="959.50"></text></g><g><title>_mi_page_malloc_zero (1 samples, 0.02%)</title><rect x="49.7566%" y="901" width="0.0195%" height="15" fill="rgb(248,166,6)" fg:x="2555" fg:w="1"/><text x="50.0066%" y="911.50"></text></g><g><title>_mi_page_free_collect (2 samples, 0.04%)</title><rect x="49.7760%" y="869" width="0.0389%" height="15" fill="rgb(247,89,20)" fg:x="2556" fg:w="2"/><text x="50.0260%" y="879.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (5 samples, 0.10%)</title><rect x="49.7371%" y="965" width="0.0974%" height="15" fill="rgb(248,130,54)" fg:x="2554" fg:w="5"/><text x="49.9871%" y="975.50"></text></g><g><title>_mi_heap_malloc_zero (5 samples, 0.10%)</title><rect x="49.7371%" y="949" width="0.0974%" height="15" fill="rgb(234,196,4)" fg:x="2554" fg:w="5"/><text x="49.9871%" y="959.50"></text></g><g><title>_mi_heap_malloc_zero_ex (5 samples, 0.10%)</title><rect x="49.7371%" y="933" width="0.0974%" height="15" fill="rgb(250,143,31)" fg:x="2554" fg:w="5"/><text x="49.9871%" y="943.50"></text></g><g><title>_mi_malloc_generic (5 samples, 0.10%)</title><rect x="49.7371%" y="917" width="0.0974%" height="15" fill="rgb(211,110,34)" fg:x="2554" fg:w="5"/><text x="49.9871%" y="927.50"></text></g><g><title>mi_find_page (3 samples, 0.06%)</title><rect x="49.7760%" y="901" width="0.0584%" height="15" fill="rgb(215,124,48)" fg:x="2556" fg:w="3"/><text x="50.0260%" y="911.50"></text></g><g><title>mi_find_free_page (3 samples, 0.06%)</title><rect x="49.7760%" y="885" width="0.0584%" height="15" fill="rgb(216,46,13)" fg:x="2556" fg:w="3"/><text x="50.0260%" y="895.50"></text></g><g><title>mi_page_queue (1 samples, 0.02%)</title><rect x="49.8150%" y="869" width="0.0195%" height="15" fill="rgb(205,184,25)" fg:x="2558" fg:w="1"/><text x="50.0650%" y="879.50"></text></g><g><title>_mi_bin (1 samples, 0.02%)</title><rect x="49.8150%" y="853" width="0.0195%" height="15" fill="rgb(228,1,10)" fg:x="2558" fg:w="1"/><text x="50.0650%" y="863.50"></text></g><g><title>mi_bin (1 samples, 0.02%)</title><rect x="49.8150%" y="837" width="0.0195%" height="15" fill="rgb(213,116,27)" fg:x="2558" fg:w="1"/><text x="50.0650%" y="847.50"></text></g><g><title>_mi_wsize_from_size (1 samples, 0.02%)</title><rect x="49.8150%" y="821" width="0.0195%" height="15" fill="rgb(241,95,50)" fg:x="2558" fg:w="1"/><text x="50.0650%" y="831.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.14%)</title><rect x="49.7176%" y="1013" width="0.1363%" height="15" fill="rgb(238,48,32)" fg:x="2553" fg:w="7"/><text x="49.9676%" y="1023.50"></text></g><g><title>__rust_alloc (7 samples, 0.14%)</title><rect x="49.7176%" y="997" width="0.1363%" height="15" fill="rgb(235,113,49)" fg:x="2553" fg:w="7"/><text x="49.9676%" y="1007.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (7 samples, 0.14%)</title><rect x="49.7176%" y="981" width="0.1363%" height="15" fill="rgb(205,127,43)" fg:x="2553" fg:w="7"/><text x="49.9676%" y="991.50"></text></g><g><title>mi_malloc_aligned (1 samples, 0.02%)</title><rect x="49.8345%" y="965" width="0.0195%" height="15" fill="rgb(250,162,2)" fg:x="2559" fg:w="1"/><text x="50.0845%" y="975.50"></text></g><g><title>_mi_memcpy_aligned (31 samples, 0.60%)</title><rect x="49.8539%" y="885" width="0.6037%" height="15" fill="rgb(220,13,41)" fg:x="2560" fg:w="31"/><text x="50.1039%" y="895.50"></text></g><g><title>_mi_memcpy (31 samples, 0.60%)</title><rect x="49.8539%" y="869" width="0.6037%" height="15" fill="rgb(249,221,25)" fg:x="2560" fg:w="31"/><text x="50.1039%" y="879.50"></text></g><g><title>[libc.so.6] (31 samples, 0.60%)</title><rect x="49.8539%" y="853" width="0.6037%" height="15" fill="rgb(215,208,19)" fg:x="2560" fg:w="31"/><text x="50.1039%" y="863.50"></text></g><g><title>_mi_page_retire (1 samples, 0.02%)</title><rect x="50.4576%" y="885" width="0.0195%" height="15" fill="rgb(236,175,2)" fg:x="2591" fg:w="1"/><text x="50.7076%" y="895.50"></text></g><g><title>alloc::alloc::realloc (33 samples, 0.64%)</title><rect x="49.8539%" y="1013" width="0.6426%" height="15" fill="rgb(241,52,2)" fg:x="2560" fg:w="33"/><text x="50.1039%" y="1023.50"></text></g><g><title>__rust_realloc (33 samples, 0.64%)</title><rect x="49.8539%" y="997" width="0.6426%" height="15" fill="rgb(248,140,14)" fg:x="2560" fg:w="33"/><text x="50.1039%" y="1007.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (33 samples, 0.64%)</title><rect x="49.8539%" y="981" width="0.6426%" height="15" fill="rgb(253,22,42)" fg:x="2560" fg:w="33"/><text x="50.1039%" y="991.50"></text></g><g><title>mi_heap_realloc_aligned (33 samples, 0.64%)</title><rect x="49.8539%" y="965" width="0.6426%" height="15" fill="rgb(234,61,47)" fg:x="2560" fg:w="33"/><text x="50.1039%" y="975.50"></text></g><g><title>mi_heap_realloc_zero_aligned (33 samples, 0.64%)</title><rect x="49.8539%" y="949" width="0.6426%" height="15" fill="rgb(208,226,15)" fg:x="2560" fg:w="33"/><text x="50.1039%" y="959.50"></text></g><g><title>mi_heap_realloc_zero_aligned (33 samples, 0.64%)</title><rect x="49.8539%" y="933" width="0.6426%" height="15" fill="rgb(217,221,4)" fg:x="2560" fg:w="33"/><text x="50.1039%" y="943.50"></text></g><g><title>mi_heap_realloc_zero_aligned_at (33 samples, 0.64%)</title><rect x="49.8539%" y="917" width="0.6426%" height="15" fill="rgb(212,174,34)" fg:x="2560" fg:w="33"/><text x="50.1039%" y="927.50"></text></g><g><title>mi_heap_realloc_zero_aligned_at (33 samples, 0.64%)</title><rect x="49.8539%" y="901" width="0.6426%" height="15" fill="rgb(253,83,4)" fg:x="2560" fg:w="33"/><text x="50.1039%" y="911.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.02%)</title><rect x="50.4771%" y="885" width="0.0195%" height="15" fill="rgb(250,195,49)" fg:x="2592" fg:w="1"/><text x="50.7271%" y="895.50"></text></g><g><title>_mi_heap_malloc_zero (1 samples, 0.02%)</title><rect x="50.4771%" y="869" width="0.0195%" height="15" fill="rgb(241,192,25)" fg:x="2592" fg:w="1"/><text x="50.7271%" y="879.50"></text></g><g><title>_mi_heap_malloc_zero_ex (1 samples, 0.02%)</title><rect x="50.4771%" y="853" width="0.0195%" height="15" fill="rgb(208,124,10)" fg:x="2592" fg:w="1"/><text x="50.7271%" y="863.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.02%)</title><rect x="50.4771%" y="837" width="0.0195%" height="15" fill="rgb(222,33,0)" fg:x="2592" fg:w="1"/><text x="50.7271%" y="847.50"></text></g><g><title>_mi_page_malloc_zero (1 samples, 0.02%)</title><rect x="50.4771%" y="821" width="0.0195%" height="15" fill="rgb(234,209,28)" fg:x="2592" fg:w="1"/><text x="50.7271%" y="831.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::reserve_one_unchecked (45 samples, 0.88%)</title><rect x="49.7176%" y="1045" width="0.8763%" height="15" fill="rgb(224,11,23)" fg:x="2553" fg:w="45"/><text x="49.9676%" y="1055.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::try_grow (45 samples, 0.88%)</title><rect x="49.7176%" y="1029" width="0.8763%" height="15" fill="rgb(232,99,1)" fg:x="2553" fg:w="45"/><text x="49.9676%" y="1039.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.10%)</title><rect x="50.4966%" y="1013" width="0.0974%" height="15" fill="rgb(237,95,45)" fg:x="2593" fg:w="5"/><text x="50.7466%" y="1023.50"></text></g><g><title>[libc.so.6] (5 samples, 0.10%)</title><rect x="50.4966%" y="997" width="0.0974%" height="15" fill="rgb(208,109,11)" fg:x="2593" fg:w="5"/><text x="50.7466%" y="1007.50"></text></g><g><title>rutin::server::connection::Connection&lt;S&gt;::read_frames::_{{closure}}::_{{closure}} (2,031 samples, 39.55%)</title><rect x="11.1198%" y="1093" width="39.5521%" height="15" fill="rgb(216,190,48)" fg:x="571" fg:w="2031"/><text x="11.3698%" y="1103.50">rutin::server::connection::Connection&lt;S&gt;::read_frames::_{{closure..</text></g><g><title>rutin::server::connection::Connection&lt;S&gt;::read_frames::_{{closure}}::_{{closure}}::_{{closure}} (2,023 samples, 39.40%)</title><rect x="11.2756%" y="1077" width="39.3963%" height="15" fill="rgb(251,171,36)" fg:x="579" fg:w="2023"/><text x="11.5256%" y="1087.50">rutin::server::connection::Connection&lt;S&gt;::read_frames::_{{closur..</text></g><g><title>smallvec::SmallVec&lt;A&gt;::push (65 samples, 1.27%)</title><rect x="49.4060%" y="1061" width="1.2658%" height="15" fill="rgb(230,62,22)" fg:x="2537" fg:w="65"/><text x="49.6560%" y="1071.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple_mut (4 samples, 0.08%)</title><rect x="50.5940%" y="1045" width="0.0779%" height="15" fill="rgb(225,114,35)" fg:x="2598" fg:w="4"/><text x="50.8440%" y="1055.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::spilled (1 samples, 0.02%)</title><rect x="50.6524%" y="1029" width="0.0195%" height="15" fill="rgb(215,118,42)" fg:x="2601" fg:w="1"/><text x="50.9024%" y="1039.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (44 samples, 0.86%)</title><rect x="51.3729%" y="997" width="0.8569%" height="15" fill="rgb(243,119,21)" fg:x="2638" fg:w="44"/><text x="51.6229%" y="1007.50"></text></g><g><title>[libc.so.6] (44 samples, 0.86%)</title><rect x="51.3729%" y="981" width="0.8569%" height="15" fill="rgb(252,177,53)" fg:x="2638" fg:w="44"/><text x="51.6229%" y="991.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (20 samples, 0.39%)</title><rect x="52.2298%" y="997" width="0.3895%" height="15" fill="rgb(237,209,29)" fg:x="2682" fg:w="20"/><text x="52.4798%" y="1007.50"></text></g><g><title>[libc.so.6] (4 samples, 0.08%)</title><rect x="52.5414%" y="981" width="0.0779%" height="15" fill="rgb(212,65,23)" fg:x="2698" fg:w="4"/><text x="52.7914%" y="991.50"></text></g><g><title>core::ptr::read (39 samples, 0.76%)</title><rect x="52.7167%" y="981" width="0.7595%" height="15" fill="rgb(230,222,46)" fg:x="2707" fg:w="39"/><text x="52.9667%" y="991.50"></text></g><g><title>[libc.so.6] (38 samples, 0.74%)</title><rect x="52.7361%" y="965" width="0.7400%" height="15" fill="rgb(215,135,32)" fg:x="2708" fg:w="38"/><text x="52.9861%" y="975.50"></text></g><g><title>&lt;smallvec::IntoIter&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.90%)</title><rect x="52.6193%" y="997" width="0.8958%" height="15" fill="rgb(246,101,22)" fg:x="2702" fg:w="46"/><text x="52.8693%" y="1007.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::as_ptr (2 samples, 0.04%)</title><rect x="53.4761%" y="981" width="0.0389%" height="15" fill="rgb(206,107,13)" fg:x="2746" fg:w="2"/><text x="53.7261%" y="991.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple (2 samples, 0.04%)</title><rect x="53.4761%" y="965" width="0.0389%" height="15" fill="rgb(250,100,44)" fg:x="2746" fg:w="2"/><text x="53.7261%" y="975.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::spilled (2 samples, 0.04%)</title><rect x="53.4761%" y="949" width="0.0389%" height="15" fill="rgb(231,147,38)" fg:x="2746" fg:w="2"/><text x="53.7261%" y="959.50"></text></g><g><title>[libc.so.6] (3 samples, 0.06%)</title><rect x="53.5151%" y="965" width="0.0584%" height="15" fill="rgb(229,8,40)" fg:x="2748" fg:w="3"/><text x="53.7651%" y="975.50"></text></g><g><title>rutin::server::connection::Connection&lt;S&gt;::read_frames::_{{closure}} (13 samples, 0.25%)</title><rect x="53.5735%" y="965" width="0.2532%" height="15" fill="rgb(221,135,30)" fg:x="2751" fg:w="13"/><text x="53.8235%" y="975.50"></text></g><g><title>[libc.so.6] (12 samples, 0.23%)</title><rect x="53.5930%" y="949" width="0.2337%" height="15" fill="rgb(249,193,18)" fg:x="2752" fg:w="12"/><text x="53.8430%" y="959.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="53.8267%" y="901" width="0.0195%" height="15" fill="rgb(209,133,39)" fg:x="2764" fg:w="1"/><text x="54.0767%" y="911.50"></text></g><g><title>flume::Hook&lt;T,S&gt;::trigger (3 samples, 0.06%)</title><rect x="53.8462%" y="885" width="0.0584%" height="15" fill="rgb(232,100,14)" fg:x="2765" fg:w="3"/><text x="54.0962%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (3 samples, 0.06%)</title><rect x="53.8462%" y="869" width="0.0584%" height="15" fill="rgb(224,185,1)" fg:x="2765" fg:w="3"/><text x="54.0962%" y="879.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (3 samples, 0.06%)</title><rect x="53.8462%" y="853" width="0.0584%" height="15" fill="rgb(223,139,8)" fg:x="2765" fg:w="3"/><text x="54.0962%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (3 samples, 0.06%)</title><rect x="53.8462%" y="837" width="0.0584%" height="15" fill="rgb(232,213,38)" fg:x="2765" fg:w="3"/><text x="54.0962%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.06%)</title><rect x="53.8462%" y="821" width="0.0584%" height="15" fill="rgb(207,94,22)" fg:x="2765" fg:w="3"/><text x="54.0962%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.06%)</title><rect x="53.8462%" y="805" width="0.0584%" height="15" fill="rgb(219,183,54)" fg:x="2765" fg:w="3"/><text x="54.0962%" y="815.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.06%)</title><rect x="53.8462%" y="789" width="0.0584%" height="15" fill="rgb(216,185,54)" fg:x="2765" fg:w="3"/><text x="54.0962%" y="799.50"></text></g><g><title>__rust_alloc (3 samples, 0.06%)</title><rect x="53.8462%" y="773" width="0.0584%" height="15" fill="rgb(254,217,39)" fg:x="2765" fg:w="3"/><text x="54.0962%" y="783.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (3 samples, 0.06%)</title><rect x="53.8462%" y="757" width="0.0584%" height="15" fill="rgb(240,178,23)" fg:x="2765" fg:w="3"/><text x="54.0962%" y="767.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (3 samples, 0.06%)</title><rect x="53.8462%" y="741" width="0.0584%" height="15" fill="rgb(218,11,47)" fg:x="2765" fg:w="3"/><text x="54.0962%" y="751.50"></text></g><g><title>_mi_heap_malloc_zero (3 samples, 0.06%)</title><rect x="53.8462%" y="725" width="0.0584%" height="15" fill="rgb(218,51,51)" fg:x="2765" fg:w="3"/><text x="54.0962%" y="735.50"></text></g><g><title>_mi_heap_malloc_zero_ex (3 samples, 0.06%)</title><rect x="53.8462%" y="709" width="0.0584%" height="15" fill="rgb(238,126,27)" fg:x="2765" fg:w="3"/><text x="54.0962%" y="719.50"></text></g><g><title>_mi_malloc_generic (3 samples, 0.06%)</title><rect x="53.8462%" y="693" width="0.0584%" height="15" fill="rgb(249,202,22)" fg:x="2765" fg:w="3"/><text x="54.0962%" y="703.50"></text></g><g><title>_mi_heap_delayed_free_partial (3 samples, 0.06%)</title><rect x="53.8462%" y="677" width="0.0584%" height="15" fill="rgb(254,195,49)" fg:x="2765" fg:w="3"/><text x="54.0962%" y="687.50"></text></g><g><title>_mi_free_delayed_block (2 samples, 0.04%)</title><rect x="53.8656%" y="661" width="0.0389%" height="15" fill="rgb(208,123,14)" fg:x="2766" fg:w="2"/><text x="54.1156%" y="671.50"></text></g><g><title>_mi_page_free_collect (2 samples, 0.04%)</title><rect x="53.8656%" y="645" width="0.0389%" height="15" fill="rgb(224,200,8)" fg:x="2766" fg:w="2"/><text x="54.1156%" y="655.50"></text></g><g><title>_mi_page_thread_free_collect (2 samples, 0.04%)</title><rect x="53.8656%" y="629" width="0.0389%" height="15" fill="rgb(217,61,36)" fg:x="2766" fg:w="2"/><text x="54.1156%" y="639.50"></text></g><g><title>flume::Shared&lt;T&gt;::recv (5 samples, 0.10%)</title><rect x="53.8267%" y="917" width="0.0974%" height="15" fill="rgb(206,35,45)" fg:x="2764" fg:w="5"/><text x="54.0767%" y="927.50"></text></g><g><title>flume::async::RecvFut&lt;T&gt;::poll_inner::_{{closure}} (4 samples, 0.08%)</title><rect x="53.8462%" y="901" width="0.0779%" height="15" fill="rgb(217,65,33)" fg:x="2765" fg:w="4"/><text x="54.0962%" y="911.50"></text></g><g><title>flume::async::AsyncSignal::new (1 samples, 0.02%)</title><rect x="53.9046%" y="885" width="0.0195%" height="15" fill="rgb(222,158,48)" fg:x="2768" fg:w="1"/><text x="54.1546%" y="895.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="53.9046%" y="869" width="0.0195%" height="15" fill="rgb(254,2,54)" fg:x="2768" fg:w="1"/><text x="54.1546%" y="879.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.02%)</title><rect x="53.9046%" y="853" width="0.0195%" height="15" fill="rgb(250,143,38)" fg:x="2768" fg:w="1"/><text x="54.1546%" y="863.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (23 samples, 0.45%)</title><rect x="53.5151%" y="997" width="0.4479%" height="15" fill="rgb(248,25,0)" fg:x="2748" fg:w="23"/><text x="53.7651%" y="1007.50"></text></g><g><title>rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}}::_{{closure}}::_{{closure}}::_{{closure}}::_{{closure}} (23 samples, 0.45%)</title><rect x="53.5151%" y="981" width="0.4479%" height="15" fill="rgb(206,152,27)" fg:x="2748" fg:w="23"/><text x="53.7651%" y="991.50"></text></g><g><title>rutin::shared::post_office::Inbox::recv_async::_{{closure}} (7 samples, 0.14%)</title><rect x="53.8267%" y="965" width="0.1363%" height="15" fill="rgb(240,77,30)" fg:x="2764" fg:w="7"/><text x="54.0767%" y="975.50"></text></g><g><title>&lt;flume::async::RecvFut&lt;T&gt; as core::future::future::Future&gt;::poll (7 samples, 0.14%)</title><rect x="53.8267%" y="949" width="0.1363%" height="15" fill="rgb(231,5,3)" fg:x="2764" fg:w="7"/><text x="54.0767%" y="959.50"></text></g><g><title>flume::async::RecvFut&lt;T&gt;::poll_inner (7 samples, 0.14%)</title><rect x="53.8267%" y="933" width="0.1363%" height="15" fill="rgb(207,226,32)" fg:x="2764" fg:w="7"/><text x="54.0767%" y="943.50"></text></g><g><title>flume::wait_lock (2 samples, 0.04%)</title><rect x="53.9241%" y="917" width="0.0389%" height="15" fill="rgb(222,207,47)" fg:x="2769" fg:w="2"/><text x="54.1741%" y="927.50"></text></g><g><title>spin::mutex::Mutex&lt;T,R&gt;::try_lock (2 samples, 0.04%)</title><rect x="53.9241%" y="901" width="0.0389%" height="15" fill="rgb(229,115,45)" fg:x="2769" fg:w="2"/><text x="54.1741%" y="911.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.04%)</title><rect x="53.9241%" y="885" width="0.0389%" height="15" fill="rgb(224,191,6)" fg:x="2769" fg:w="2"/><text x="54.1741%" y="895.50"></text></g><g><title>[libc.so.6] (82 samples, 1.60%)</title><rect x="53.9630%" y="997" width="1.5969%" height="15" fill="rgb(230,227,24)" fg:x="2771" fg:w="82"/><text x="54.2130%" y="1007.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.04%)</title><rect x="55.5988%" y="853" width="0.0389%" height="15" fill="rgb(228,80,19)" fg:x="2855" fg:w="2"/><text x="55.8488%" y="863.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain::_{{closure}} (3 samples, 0.06%)</title><rect x="55.5988%" y="885" width="0.0584%" height="15" fill="rgb(247,229,0)" fg:x="2855" fg:w="3"/><text x="55.8488%" y="895.50"></text></g><g><title>flume::async::RecvFut&lt;T&gt;::reset_hook::_{{closure}} (3 samples, 0.06%)</title><rect x="55.5988%" y="869" width="0.0584%" height="15" fill="rgb(237,194,15)" fg:x="2855" fg:w="3"/><text x="55.8488%" y="879.50"></text></g><g><title>&lt;flume::async::AsyncSignal as flume::signal::Signal&gt;::as_ptr (1 samples, 0.02%)</title><rect x="55.6378%" y="853" width="0.0195%" height="15" fill="rgb(219,203,20)" fg:x="2857" fg:w="1"/><text x="55.8878%" y="863.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain (6 samples, 0.12%)</title><rect x="55.5794%" y="917" width="0.1168%" height="15" fill="rgb(234,128,8)" fg:x="2854" fg:w="6"/><text x="55.8294%" y="927.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain_mut (6 samples, 0.12%)</title><rect x="55.5794%" y="901" width="0.1168%" height="15" fill="rgb(248,202,8)" fg:x="2854" fg:w="6"/><text x="55.8294%" y="911.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::truncate (2 samples, 0.04%)</title><rect x="55.6573%" y="885" width="0.0389%" height="15" fill="rgb(206,104,37)" fg:x="2858" fg:w="2"/><text x="55.9073%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::sync::Arc&lt;flume::Hook&lt;rutin::shared::post_office::Letter,dyn flume::signal::Signal&gt;&gt;]&gt; (2 samples, 0.04%)</title><rect x="55.6573%" y="869" width="0.0389%" height="15" fill="rgb(223,8,27)" fg:x="2858" fg:w="2"/><text x="55.9073%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;flume::Hook&lt;rutin::shared::post_office::Letter,dyn flume::signal::Signal&gt;&gt;&gt; (2 samples, 0.04%)</title><rect x="55.6573%" y="853" width="0.0389%" height="15" fill="rgb(216,217,28)" fg:x="2858" fg:w="2"/><text x="55.9073%" y="863.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.04%)</title><rect x="55.6573%" y="837" width="0.0389%" height="15" fill="rgb(249,199,1)" fg:x="2858" fg:w="2"/><text x="55.9073%" y="847.50"></text></g><g><title>_mi_page_unfull (1 samples, 0.02%)</title><rect x="55.6962%" y="885" width="0.0195%" height="15" fill="rgb(240,85,17)" fg:x="2860" fg:w="1"/><text x="55.9462%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.02%)</title><rect x="55.7157%" y="885" width="0.0195%" height="15" fill="rgb(206,108,45)" fg:x="2861" fg:w="1"/><text x="55.9657%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;flume::Hook&lt;rutin::shared::post_office::Letter,dyn flume::signal::Signal&gt;&gt; (1 samples, 0.02%)</title><rect x="55.7157%" y="869" width="0.0195%" height="15" fill="rgb(245,210,41)" fg:x="2861" fg:w="1"/><text x="55.9657%" y="879.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (1 samples, 0.02%)</title><rect x="55.7157%" y="853" width="0.0195%" height="15" fill="rgb(206,13,37)" fg:x="2861" fg:w="1"/><text x="55.9657%" y="863.50"></text></g><g><title>tokio::runtime::task::core::Header::get_tracing_id (1 samples, 0.02%)</title><rect x="55.7157%" y="837" width="0.0195%" height="15" fill="rgb(250,61,18)" fg:x="2861" fg:w="1"/><text x="55.9657%" y="847.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.02%)</title><rect x="55.7157%" y="821" width="0.0195%" height="15" fill="rgb(235,172,48)" fg:x="2861" fg:w="1"/><text x="55.9657%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;flume::Hook&lt;rutin::shared::post_office::Letter,dyn flume::signal::Signal&gt;&gt;&gt; (3 samples, 0.06%)</title><rect x="55.6962%" y="917" width="0.0584%" height="15" fill="rgb(249,201,17)" fg:x="2860" fg:w="3"/><text x="55.9462%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.06%)</title><rect x="55.6962%" y="901" width="0.0584%" height="15" fill="rgb(219,208,6)" fg:x="2860" fg:w="3"/><text x="55.9462%" y="911.50"></text></g><g><title>mi_free (1 samples, 0.02%)</title><rect x="55.7352%" y="885" width="0.0195%" height="15" fill="rgb(248,31,23)" fg:x="2862" fg:w="1"/><text x="55.9852%" y="895.50"></text></g><g><title>_mi_segment_page_of (1 samples, 0.02%)</title><rect x="55.7352%" y="869" width="0.0195%" height="15" fill="rgb(245,15,42)" fg:x="2862" fg:w="1"/><text x="55.9852%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;(rutin::shared::post_office::Inbox::recv_async::{{closure}},rutin::server::connection::Connection::read_frames::{{closure}})&gt; (14 samples, 0.27%)</title><rect x="55.5599%" y="997" width="0.2726%" height="15" fill="rgb(222,217,39)" fg:x="2853" fg:w="14"/><text x="55.8099%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::shared::post_office::Inbox::recv_async::{{closure}}&gt; (14 samples, 0.27%)</title><rect x="55.5599%" y="981" width="0.2726%" height="15" fill="rgb(210,219,27)" fg:x="2853" fg:w="14"/><text x="55.8099%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;flume::async::RecvFut&lt;rutin::shared::post_office::Letter&gt;&gt; (14 samples, 0.27%)</title><rect x="55.5599%" y="965" width="0.2726%" height="15" fill="rgb(252,166,36)" fg:x="2853" fg:w="14"/><text x="55.8099%" y="975.50"></text></g><g><title>&lt;flume::async::RecvFut&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.27%)</title><rect x="55.5599%" y="949" width="0.2726%" height="15" fill="rgb(245,132,34)" fg:x="2853" fg:w="14"/><text x="55.8099%" y="959.50"></text></g><g><title>flume::async::RecvFut&lt;T&gt;::reset_hook (14 samples, 0.27%)</title><rect x="55.5599%" y="933" width="0.2726%" height="15" fill="rgb(236,54,3)" fg:x="2853" fg:w="14"/><text x="55.8099%" y="943.50"></text></g><g><title>flume::wait_lock (4 samples, 0.08%)</title><rect x="55.7546%" y="917" width="0.0779%" height="15" fill="rgb(241,173,43)" fg:x="2863" fg:w="4"/><text x="56.0046%" y="927.50"></text></g><g><title>spin::mutex::Mutex&lt;T,R&gt;::try_lock (4 samples, 0.08%)</title><rect x="55.7546%" y="901" width="0.0779%" height="15" fill="rgb(215,190,9)" fg:x="2863" fg:w="4"/><text x="56.0046%" y="911.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (4 samples, 0.08%)</title><rect x="55.7546%" y="885" width="0.0779%" height="15" fill="rgb(242,101,16)" fg:x="2863" fg:w="4"/><text x="56.0046%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::cmd::dispatch&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}&gt; (2 samples, 0.04%)</title><rect x="55.8325%" y="997" width="0.0389%" height="15" fill="rgb(223,190,21)" fg:x="2867" fg:w="2"/><text x="56.0825%" y="1007.50"></text></g><g><title>mi_page_queue_is_special (1 samples, 0.02%)</title><rect x="56.3973%" y="917" width="0.0195%" height="15" fill="rgb(215,228,25)" fg:x="2896" fg:w="1"/><text x="56.6473%" y="927.50"></text></g><g><title>mi_heap_page_queue_of (3 samples, 0.06%)</title><rect x="56.4167%" y="901" width="0.0584%" height="15" fill="rgb(225,36,22)" fg:x="2897" fg:w="3"/><text x="56.6667%" y="911.50"></text></g><g><title>mi_bin (3 samples, 0.06%)</title><rect x="56.4167%" y="885" width="0.0584%" height="15" fill="rgb(251,106,46)" fg:x="2897" fg:w="3"/><text x="56.6667%" y="895.50"></text></g><g><title>_mi_page_retire (22 samples, 0.43%)</title><rect x="56.0662%" y="933" width="0.4284%" height="15" fill="rgb(208,90,1)" fg:x="2879" fg:w="22"/><text x="56.3162%" y="943.50"></text></g><g><title>mi_page_queue_of (4 samples, 0.08%)</title><rect x="56.4167%" y="917" width="0.0779%" height="15" fill="rgb(243,10,4)" fg:x="2897" fg:w="4"/><text x="56.6667%" y="927.50"></text></g><g><title>mi_page_heap (1 samples, 0.02%)</title><rect x="56.4752%" y="901" width="0.0195%" height="15" fill="rgb(212,137,27)" fg:x="2900" fg:w="1"/><text x="56.7252%" y="911.50"></text></g><g><title>bytes::bytes::promotable_even_drop (6 samples, 0.12%)</title><rect x="56.4946%" y="933" width="0.1168%" height="15" fill="rgb(231,220,49)" fg:x="2901" fg:w="6"/><text x="56.7446%" y="943.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (6 samples, 0.12%)</title><rect x="56.4946%" y="917" width="0.1168%" height="15" fill="rgb(237,96,20)" fg:x="2901" fg:w="6"/><text x="56.7446%" y="927.50"></text></g><g><title>bytes::bytes::promotable_even_drop::_{{closure}} (1 samples, 0.02%)</title><rect x="56.5920%" y="901" width="0.0195%" height="15" fill="rgb(239,229,30)" fg:x="2906" fg:w="1"/><text x="56.8420%" y="911.50"></text></g><g><title>bytes::bytes::free_boxed_slice (1 samples, 0.02%)</title><rect x="56.5920%" y="885" width="0.0195%" height="15" fill="rgb(219,65,33)" fg:x="2906" fg:w="1"/><text x="56.8420%" y="895.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="56.5920%" y="869" width="0.0195%" height="15" fill="rgb(243,134,7)" fg:x="2906" fg:w="1"/><text x="56.8420%" y="879.50"></text></g><g><title>__rust_dealloc (1 samples, 0.02%)</title><rect x="56.5920%" y="853" width="0.0195%" height="15" fill="rgb(216,177,54)" fg:x="2906" fg:w="1"/><text x="56.8420%" y="863.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (1 samples, 0.02%)</title><rect x="56.5920%" y="837" width="0.0195%" height="15" fill="rgb(211,160,20)" fg:x="2906" fg:w="1"/><text x="56.8420%" y="847.50"></text></g><g><title>_mi_segment_page_of (6 samples, 0.12%)</title><rect x="56.6894%" y="917" width="0.1168%" height="15" fill="rgb(239,85,39)" fg:x="2911" fg:w="6"/><text x="56.9394%" y="927.50"></text></g><g><title>mi_slice_first (4 samples, 0.08%)</title><rect x="56.7283%" y="901" width="0.0779%" height="15" fill="rgb(232,125,22)" fg:x="2913" fg:w="4"/><text x="56.9783%" y="911.50"></text></g><g><title>mi_checked_ptr_segment (2 samples, 0.04%)</title><rect x="56.8062%" y="917" width="0.0389%" height="15" fill="rgb(244,57,34)" fg:x="2917" fg:w="2"/><text x="57.0562%" y="927.50"></text></g><g><title>_mi_ptr_segment (2 samples, 0.04%)</title><rect x="56.8062%" y="901" width="0.0389%" height="15" fill="rgb(214,203,32)" fg:x="2917" fg:w="2"/><text x="57.0562%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytestring::ByteString&gt; (49 samples, 0.95%)</title><rect x="56.0078%" y="981" width="0.9542%" height="15" fill="rgb(207,58,43)" fg:x="2876" fg:w="49"/><text x="56.2578%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (49 samples, 0.95%)</title><rect x="56.0078%" y="965" width="0.9542%" height="15" fill="rgb(215,193,15)" fg:x="2876" fg:w="49"/><text x="56.2578%" y="975.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (49 samples, 0.95%)</title><rect x="56.0078%" y="949" width="0.9542%" height="15" fill="rgb(232,15,44)" fg:x="2876" fg:w="49"/><text x="56.2578%" y="959.50"></text></g><g><title>mi_free (18 samples, 0.35%)</title><rect x="56.6115%" y="933" width="0.3505%" height="15" fill="rgb(212,3,48)" fg:x="2907" fg:w="18"/><text x="56.8615%" y="943.50"></text></g><g><title>mi_free_block_local (6 samples, 0.12%)</title><rect x="56.8452%" y="917" width="0.1168%" height="15" fill="rgb(218,128,7)" fg:x="2919" fg:w="6"/><text x="57.0952%" y="927.50"></text></g><g><title>mi_block_set_next (3 samples, 0.06%)</title><rect x="56.9036%" y="901" width="0.0584%" height="15" fill="rgb(226,216,39)" fg:x="2922" fg:w="3"/><text x="57.1536%" y="911.50"></text></g><g><title>mi_block_set_nextx (3 samples, 0.06%)</title><rect x="56.9036%" y="885" width="0.0584%" height="15" fill="rgb(243,47,51)" fg:x="2922" fg:w="3"/><text x="57.1536%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::frame::Resp3&gt; (59 samples, 1.15%)</title><rect x="55.8715%" y="997" width="1.1490%" height="15" fill="rgb(241,183,40)" fg:x="2869" fg:w="59"/><text x="56.1215%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;ahash::hash_map::AHashMap&lt;rutin::frame::Resp3,rutin::frame::Resp3&gt;&gt;&gt; (3 samples, 0.06%)</title><rect x="56.9620%" y="981" width="0.0584%" height="15" fill="rgb(231,217,32)" fg:x="2925" fg:w="3"/><text x="57.2120%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::server::connection::Connection::write_frame&lt;bytes::bytes::Bytes,bytestring::ByteString&gt;::{{closure}}&gt; (9 samples, 0.18%)</title><rect x="57.0204%" y="997" width="0.1753%" height="15" fill="rgb(229,61,38)" fg:x="2928" fg:w="9"/><text x="57.2704%" y="1007.50"></text></g><g><title>rutin::cmd::dispatch (2 samples, 0.04%)</title><rect x="57.1957%" y="997" width="0.0389%" height="15" fill="rgb(225,210,5)" fg:x="2937" fg:w="2"/><text x="57.4457%" y="1007.50"></text></g><g><title>[libc.so.6] (278 samples, 5.41%)</title><rect x="57.5268%" y="981" width="5.4138%" height="15" fill="rgb(231,79,45)" fg:x="2954" fg:w="278"/><text x="57.7768%" y="991.50">[libc.s..</text></g><g><title>core::ptr::drop_in_place&lt;rutin::cmd::dispatch&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}::{{closure}}&gt; (1 samples, 0.02%)</title><rect x="62.9406%" y="981" width="0.0195%" height="15" fill="rgb(224,100,7)" fg:x="3232" fg:w="1"/><text x="63.1906%" y="991.50"></text></g><g><title>[libc.so.6] (50 samples, 0.97%)</title><rect x="64.6933%" y="965" width="0.9737%" height="15" fill="rgb(241,198,18)" fg:x="3322" fg:w="50"/><text x="64.9433%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::cmd::dispatch&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}::{{closure}}::{{closure}}&gt; (5 samples, 0.10%)</title><rect x="65.6670%" y="965" width="0.0974%" height="15" fill="rgb(252,97,53)" fg:x="3372" fg:w="5"/><text x="65.9170%" y="975.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (32 samples, 0.62%)</title><rect x="66.8939%" y="949" width="0.6232%" height="15" fill="rgb(220,88,7)" fg:x="3435" fg:w="32"/><text x="67.1439%" y="959.50"></text></g><g><title>&lt;rutin::cmd::CmdUnparsed as core::convert::TryFrom&lt;rutin::frame::Resp3&gt;&gt;::try_from (27 samples, 0.53%)</title><rect x="66.9912%" y="933" width="0.5258%" height="15" fill="rgb(213,176,14)" fg:x="3440" fg:w="27"/><text x="67.2412%" y="943.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (20 samples, 0.39%)</title><rect x="67.5170%" y="949" width="0.3895%" height="15" fill="rgb(246,73,7)" fg:x="3467" fg:w="20"/><text x="67.7670%" y="959.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (1 samples, 0.02%)</title><rect x="68.0818%" y="917" width="0.0195%" height="15" fill="rgb(245,64,36)" fg:x="3496" fg:w="1"/><text x="68.3318%" y="927.50"></text></g><g><title>core::ptr::read (1 samples, 0.02%)</title><rect x="68.0818%" y="901" width="0.0195%" height="15" fill="rgb(245,80,10)" fg:x="3496" fg:w="1"/><text x="68.3318%" y="911.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_empty (3 samples, 0.06%)</title><rect x="68.1013%" y="917" width="0.0584%" height="15" fill="rgb(232,107,50)" fg:x="3497" fg:w="3"/><text x="68.3513%" y="927.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (12 samples, 0.23%)</title><rect x="67.9455%" y="933" width="0.2337%" height="15" fill="rgb(253,3,0)" fg:x="3489" fg:w="12"/><text x="68.1955%" y="943.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (1 samples, 0.02%)</title><rect x="68.1597%" y="917" width="0.0195%" height="15" fill="rgb(212,99,53)" fg:x="3500" fg:w="1"/><text x="68.4097%" y="927.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (1 samples, 0.02%)</title><rect x="68.1597%" y="901" width="0.0195%" height="15" fill="rgb(249,111,54)" fg:x="3500" fg:w="1"/><text x="68.4097%" y="911.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (1 samples, 0.02%)</title><rect x="68.1597%" y="885" width="0.0195%" height="15" fill="rgb(249,55,30)" fg:x="3500" fg:w="1"/><text x="68.4097%" y="895.50"></text></g><g><title>&lt;rutin::cmd::CmdUnparsed as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (15 samples, 0.29%)</title><rect x="68.4907%" y="917" width="0.2921%" height="15" fill="rgb(237,47,42)" fg:x="3517" fg:w="15"/><text x="68.7407%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;ahash::hash_map::AHashMap&lt;rutin::frame::Resp3,rutin::frame::Resp3&gt;&gt;&gt; (13 samples, 0.25%)</title><rect x="68.5297%" y="901" width="0.2532%" height="15" fill="rgb(211,20,18)" fg:x="3519" fg:w="13"/><text x="68.7797%" y="911.50"></text></g><g><title>&lt;rutin::cmd::CmdUnparsed as core::iter::traits::iterator::Iterator&gt;::next (120 samples, 2.34%)</title><rect x="67.9065%" y="949" width="2.3369%" height="15" fill="rgb(231,203,46)" fg:x="3487" fg:w="120"/><text x="68.1565%" y="959.50">&lt;..</text></g><g><title>core::option::Option&lt;T&gt;::and_then (106 samples, 2.06%)</title><rect x="68.1792%" y="933" width="2.0643%" height="15" fill="rgb(237,142,3)" fg:x="3501" fg:w="106"/><text x="68.4292%" y="943.50">c..</text></g><g><title>[libc.so.6] (75 samples, 1.46%)</title><rect x="68.7829%" y="917" width="1.4606%" height="15" fill="rgb(241,107,1)" fg:x="3532" fg:w="75"/><text x="69.0329%" y="927.50"></text></g><g><title>[libc.so.6] (94 samples, 1.83%)</title><rect x="70.2434%" y="949" width="1.8306%" height="15" fill="rgb(229,83,13)" fg:x="3607" fg:w="94"/><text x="70.4934%" y="959.50">[..</text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (1 samples, 0.02%)</title><rect x="72.0740%" y="949" width="0.0195%" height="15" fill="rgb(241,91,40)" fg:x="3701" fg:w="1"/><text x="72.3240%" y="959.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.02%)</title><rect x="72.0740%" y="933" width="0.0195%" height="15" fill="rgb(225,3,45)" fg:x="3701" fg:w="1"/><text x="72.3240%" y="943.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="72.0740%" y="917" width="0.0195%" height="15" fill="rgb(244,223,14)" fg:x="3701" fg:w="1"/><text x="72.3240%" y="927.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="72.0740%" y="901" width="0.0195%" height="15" fill="rgb(224,124,37)" fg:x="3701" fg:w="1"/><text x="72.3240%" y="911.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or_else (2 samples, 0.04%)</title><rect x="72.0935%" y="949" width="0.0389%" height="15" fill="rgb(251,171,30)" fg:x="3702" fg:w="2"/><text x="72.3435%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;rutin::cmd::commands::str::Set as rutin::cmd::CmdExecutor&gt;::apply&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}&gt; (4 samples, 0.08%)</title><rect x="72.1324%" y="949" width="0.0779%" height="15" fill="rgb(236,46,54)" fg:x="3704" fg:w="4"/><text x="72.3824%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (30 samples, 0.58%)</title><rect x="72.2103%" y="949" width="0.5842%" height="15" fill="rgb(245,213,5)" fg:x="3708" fg:w="30"/><text x="72.4603%" y="959.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (30 samples, 0.58%)</title><rect x="72.2103%" y="933" width="0.5842%" height="15" fill="rgb(230,144,27)" fg:x="3708" fg:w="30"/><text x="72.4603%" y="943.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (30 samples, 0.58%)</title><rect x="72.2103%" y="917" width="0.5842%" height="15" fill="rgb(220,86,6)" fg:x="3708" fg:w="30"/><text x="72.4603%" y="927.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (29 samples, 0.56%)</title><rect x="72.2298%" y="901" width="0.5648%" height="15" fill="rgb(240,20,13)" fg:x="3709" fg:w="29"/><text x="72.4798%" y="911.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop::_{{closure}} (29 samples, 0.56%)</title><rect x="72.2298%" y="885" width="0.5648%" height="15" fill="rgb(217,89,34)" fg:x="3709" fg:w="29"/><text x="72.4798%" y="895.50"></text></g><g><title>bytes::bytes_mut::release_shared (29 samples, 0.56%)</title><rect x="72.2298%" y="869" width="0.5648%" height="15" fill="rgb(229,13,5)" fg:x="3709" fg:w="29"/><text x="72.4798%" y="879.50"></text></g><g><title>core::str::converts::from_utf8 (13 samples, 0.25%)</title><rect x="72.7945%" y="949" width="0.2532%" height="15" fill="rgb(244,67,35)" fg:x="3738" fg:w="13"/><text x="73.0445%" y="959.50"></text></g><g><title>core::str::validations::run_utf8_validation (8 samples, 0.16%)</title><rect x="72.8919%" y="933" width="0.1558%" height="15" fill="rgb(221,40,2)" fg:x="3743" fg:w="8"/><text x="73.1419%" y="943.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.02%)</title><rect x="73.0282%" y="917" width="0.0195%" height="15" fill="rgb(237,157,21)" fg:x="3750" fg:w="1"/><text x="73.2782%" y="927.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (10 samples, 0.19%)</title><rect x="73.0477%" y="949" width="0.1947%" height="15" fill="rgb(222,94,11)" fg:x="3751" fg:w="10"/><text x="73.2977%" y="959.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (10 samples, 0.19%)</title><rect x="73.0477%" y="933" width="0.1947%" height="15" fill="rgb(249,113,6)" fg:x="3751" fg:w="10"/><text x="73.2977%" y="943.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (10 samples, 0.19%)</title><rect x="73.0477%" y="917" width="0.1947%" height="15" fill="rgb(238,137,36)" fg:x="3751" fg:w="10"/><text x="73.2977%" y="927.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (10 samples, 0.19%)</title><rect x="73.0477%" y="901" width="0.1947%" height="15" fill="rgb(210,102,26)" fg:x="3751" fg:w="10"/><text x="73.2977%" y="911.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (9 samples, 0.18%)</title><rect x="74.1188%" y="933" width="0.1753%" height="15" fill="rgb(218,30,30)" fg:x="3806" fg:w="9"/><text x="74.3688%" y="943.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.02%)</title><rect x="76.9036%" y="837" width="0.0195%" height="15" fill="rgb(214,67,26)" fg:x="3949" fg:w="1"/><text x="77.1536%" y="847.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (1 samples, 0.02%)</title><rect x="76.9036%" y="821" width="0.0195%" height="15" fill="rgb(251,9,53)" fg:x="3949" fg:w="1"/><text x="77.1536%" y="831.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::boxed::Box&lt;[u8]&gt;&gt;&gt;::from (1 samples, 0.02%)</title><rect x="76.9036%" y="805" width="0.0195%" height="15" fill="rgb(228,204,25)" fg:x="3949" fg:w="1"/><text x="77.1536%" y="815.50"></text></g><g><title>_mi_page_malloc (10 samples, 0.19%)</title><rect x="76.9426%" y="645" width="0.1947%" height="15" fill="rgb(207,153,8)" fg:x="3951" fg:w="10"/><text x="77.1926%" y="655.50"></text></g><g><title>_mi_page_malloc_zero (9 samples, 0.18%)</title><rect x="76.9620%" y="629" width="0.1753%" height="15" fill="rgb(242,9,16)" fg:x="3952" fg:w="9"/><text x="77.2120%" y="639.50"></text></g><g><title>mi_heap_malloc_aligned (1 samples, 0.02%)</title><rect x="77.1373%" y="645" width="0.0195%" height="15" fill="rgb(217,211,10)" fg:x="3961" fg:w="1"/><text x="77.3873%" y="655.50"></text></g><g><title>mi_heap_malloc_aligned_at (9 samples, 0.18%)</title><rect x="77.1568%" y="645" width="0.1753%" height="15" fill="rgb(219,228,52)" fg:x="3962" fg:w="9"/><text x="77.4068%" y="655.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at (9 samples, 0.18%)</title><rect x="77.1568%" y="629" width="0.1753%" height="15" fill="rgb(231,92,29)" fg:x="3962" fg:w="9"/><text x="77.4068%" y="639.50"></text></g><g><title>_mi_deferred_free (1 samples, 0.02%)</title><rect x="77.3320%" y="581" width="0.0195%" height="15" fill="rgb(232,8,23)" fg:x="3971" fg:w="1"/><text x="77.5820%" y="591.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (2 samples, 0.04%)</title><rect x="77.3320%" y="645" width="0.0389%" height="15" fill="rgb(216,211,34)" fg:x="3971" fg:w="2"/><text x="77.5820%" y="655.50"></text></g><g><title>_mi_heap_malloc_zero (2 samples, 0.04%)</title><rect x="77.3320%" y="629" width="0.0389%" height="15" fill="rgb(236,151,0)" fg:x="3971" fg:w="2"/><text x="77.5820%" y="639.50"></text></g><g><title>_mi_heap_malloc_zero_ex (2 samples, 0.04%)</title><rect x="77.3320%" y="613" width="0.0389%" height="15" fill="rgb(209,168,3)" fg:x="3971" fg:w="2"/><text x="77.5820%" y="623.50"></text></g><g><title>_mi_malloc_generic (2 samples, 0.04%)</title><rect x="77.3320%" y="597" width="0.0389%" height="15" fill="rgb(208,129,28)" fg:x="3971" fg:w="2"/><text x="77.5820%" y="607.50"></text></g><g><title>_mi_page_malloc_zero (1 samples, 0.02%)</title><rect x="77.3515%" y="581" width="0.0195%" height="15" fill="rgb(229,78,22)" fg:x="3972" fg:w="1"/><text x="77.6015%" y="591.50"></text></g><g><title>__rust_alloc (28 samples, 0.55%)</title><rect x="76.9231%" y="677" width="0.5453%" height="15" fill="rgb(228,187,13)" fg:x="3950" fg:w="28"/><text x="77.1731%" y="687.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (28 samples, 0.55%)</title><rect x="76.9231%" y="661" width="0.5453%" height="15" fill="rgb(240,119,24)" fg:x="3950" fg:w="28"/><text x="77.1731%" y="671.50"></text></g><g><title>mi_malloc_aligned (5 samples, 0.10%)</title><rect x="77.3710%" y="645" width="0.0974%" height="15" fill="rgb(209,194,42)" fg:x="3973" fg:w="5"/><text x="77.6210%" y="655.50"></text></g><g><title>mi_prim_get_default_heap (3 samples, 0.06%)</title><rect x="77.4099%" y="629" width="0.0584%" height="15" fill="rgb(247,200,46)" fg:x="3975" fg:w="3"/><text x="77.6599%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (31 samples, 0.60%)</title><rect x="76.9231%" y="773" width="0.6037%" height="15" fill="rgb(218,76,16)" fg:x="3950" fg:w="31"/><text x="77.1731%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (31 samples, 0.60%)</title><rect x="76.9231%" y="757" width="0.6037%" height="15" fill="rgb(225,21,48)" fg:x="3950" fg:w="31"/><text x="77.1731%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (31 samples, 0.60%)</title><rect x="76.9231%" y="741" width="0.6037%" height="15" fill="rgb(239,223,50)" fg:x="3950" fg:w="31"/><text x="77.1731%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (31 samples, 0.60%)</title><rect x="76.9231%" y="725" width="0.6037%" height="15" fill="rgb(244,45,21)" fg:x="3950" fg:w="31"/><text x="77.1731%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (31 samples, 0.60%)</title><rect x="76.9231%" y="709" width="0.6037%" height="15" fill="rgb(232,33,43)" fg:x="3950" fg:w="31"/><text x="77.1731%" y="719.50"></text></g><g><title>alloc::alloc::alloc (31 samples, 0.60%)</title><rect x="76.9231%" y="693" width="0.6037%" height="15" fill="rgb(209,8,3)" fg:x="3950" fg:w="31"/><text x="77.1731%" y="703.50"></text></g><g><title>core::ptr::read_volatile (3 samples, 0.06%)</title><rect x="77.4684%" y="677" width="0.0584%" height="15" fill="rgb(214,25,53)" fg:x="3978" fg:w="3"/><text x="77.7184%" y="687.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (33 samples, 0.64%)</title><rect x="76.9036%" y="885" width="0.6426%" height="15" fill="rgb(254,186,54)" fg:x="3949" fg:w="33"/><text x="77.1536%" y="895.50"></text></g><g><title>&lt;bytestring::ByteString as core::convert::From&lt;&amp;str&gt;&gt;::from (33 samples, 0.64%)</title><rect x="76.9036%" y="869" width="0.6426%" height="15" fill="rgb(208,174,49)" fg:x="3949" fg:w="33"/><text x="77.1536%" y="879.50"></text></g><g><title>bytes::bytes::Bytes::copy_from_slice (33 samples, 0.64%)</title><rect x="76.9036%" y="853" width="0.6426%" height="15" fill="rgb(233,191,51)" fg:x="3949" fg:w="33"/><text x="77.1536%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (32 samples, 0.62%)</title><rect x="76.9231%" y="837" width="0.6232%" height="15" fill="rgb(222,134,10)" fg:x="3950" fg:w="32"/><text x="77.1731%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (32 samples, 0.62%)</title><rect x="76.9231%" y="821" width="0.6232%" height="15" fill="rgb(230,226,20)" fg:x="3950" fg:w="32"/><text x="77.1731%" y="831.50"></text></g><g><title>alloc::slice::hack::to_vec (32 samples, 0.62%)</title><rect x="76.9231%" y="805" width="0.6232%" height="15" fill="rgb(251,111,25)" fg:x="3950" fg:w="32"/><text x="77.1731%" y="815.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (32 samples, 0.62%)</title><rect x="76.9231%" y="789" width="0.6232%" height="15" fill="rgb(224,40,46)" fg:x="3950" fg:w="32"/><text x="77.1731%" y="799.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.02%)</title><rect x="77.5268%" y="773" width="0.0195%" height="15" fill="rgb(236,108,47)" fg:x="3981" fg:w="1"/><text x="77.7768%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="77.5268%" y="757" width="0.0195%" height="15" fill="rgb(234,93,0)" fg:x="3981" fg:w="1"/><text x="77.7768%" y="767.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.08%)</title><rect x="77.5463%" y="885" width="0.0779%" height="15" fill="rgb(224,213,32)" fg:x="3982" fg:w="4"/><text x="77.7963%" y="895.50"></text></g><g><title>&lt;rutin::util::unsafe_lazy::UnsafeLazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.04%)</title><rect x="77.6241%" y="885" width="0.0389%" height="15" fill="rgb(251,11,48)" fg:x="3986" fg:w="2"/><text x="77.8741%" y="895.50"></text></g><g><title>&lt;core::cell::lazy::LazyCell&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.04%)</title><rect x="77.6241%" y="869" width="0.0389%" height="15" fill="rgb(236,173,5)" fg:x="3986" fg:w="2"/><text x="77.8741%" y="879.50"></text></g><g><title>core::cell::lazy::LazyCell&lt;T,F&gt;::force (2 samples, 0.04%)</title><rect x="77.6241%" y="853" width="0.0389%" height="15" fill="rgb(230,95,12)" fg:x="3986" fg:w="2"/><text x="77.8741%" y="863.50"></text></g><g><title>mi_free (10 samples, 0.19%)</title><rect x="80.4284%" y="629" width="0.1947%" height="15" fill="rgb(232,209,1)" fg:x="4130" fg:w="10"/><text x="80.6784%" y="639.50"></text></g><g><title>_mi_segment_page_of (10 samples, 0.19%)</title><rect x="80.4284%" y="613" width="0.1947%" height="15" fill="rgb(232,6,1)" fg:x="4130" fg:w="10"/><text x="80.6784%" y="623.50"></text></g><g><title>mi_slice_first (3 samples, 0.06%)</title><rect x="80.5648%" y="597" width="0.0584%" height="15" fill="rgb(210,224,50)" fg:x="4137" fg:w="3"/><text x="80.8148%" y="607.50"></text></g><g><title>mi_block_set_nextx (3 samples, 0.06%)</title><rect x="80.7595%" y="613" width="0.0584%" height="15" fill="rgb(228,127,35)" fg:x="4147" fg:w="3"/><text x="81.0095%" y="623.50"></text></g><g><title>mi_free_block_delayed_mt (12 samples, 0.23%)</title><rect x="80.6232%" y="629" width="0.2337%" height="15" fill="rgb(245,102,45)" fg:x="4140" fg:w="12"/><text x="80.8732%" y="639.50"></text></g><g><title>mi_tf_set_block (2 samples, 0.04%)</title><rect x="80.8179%" y="613" width="0.0389%" height="15" fill="rgb(214,1,49)" fg:x="4150" fg:w="2"/><text x="81.0679%" y="623.50"></text></g><g><title>mi_tf_make (2 samples, 0.04%)</title><rect x="80.8179%" y="597" width="0.0389%" height="15" fill="rgb(226,163,40)" fg:x="4150" fg:w="2"/><text x="81.0679%" y="607.50"></text></g><g><title>mi_free_block_mt (1 samples, 0.02%)</title><rect x="80.8569%" y="629" width="0.0195%" height="15" fill="rgb(239,212,28)" fg:x="4152" fg:w="1"/><text x="81.1069%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (25 samples, 0.49%)</title><rect x="80.4284%" y="693" width="0.4869%" height="15" fill="rgb(220,20,13)" fg:x="4130" fg:w="25"/><text x="80.6784%" y="703.50"></text></g><g><title>alloc::alloc::dealloc (25 samples, 0.49%)</title><rect x="80.4284%" y="677" width="0.4869%" height="15" fill="rgb(210,164,35)" fg:x="4130" fg:w="25"/><text x="80.6784%" y="687.50"></text></g><g><title>__rust_dealloc (25 samples, 0.49%)</title><rect x="80.4284%" y="661" width="0.4869%" height="15" fill="rgb(248,109,41)" fg:x="4130" fg:w="25"/><text x="80.6784%" y="671.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (25 samples, 0.49%)</title><rect x="80.4284%" y="645" width="0.4869%" height="15" fill="rgb(238,23,50)" fg:x="4130" fg:w="25"/><text x="80.6784%" y="655.50"></text></g><g><title>mi_free_generic_mt (2 samples, 0.04%)</title><rect x="80.8763%" y="629" width="0.0389%" height="15" fill="rgb(211,48,49)" fg:x="4153" fg:w="2"/><text x="81.1263%" y="639.50"></text></g><g><title>_mi_page_ptr_unalign (2 samples, 0.04%)</title><rect x="80.8763%" y="613" width="0.0389%" height="15" fill="rgb(223,36,21)" fg:x="4153" fg:w="2"/><text x="81.1263%" y="623.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (168 samples, 3.27%)</title><rect x="77.6826%" y="853" width="3.2717%" height="15" fill="rgb(207,123,46)" fg:x="3989" fg:w="168"/><text x="77.9326%" y="863.50">byt..</text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (166 samples, 3.23%)</title><rect x="77.7215%" y="837" width="3.2327%" height="15" fill="rgb(240,218,32)" fg:x="3991" fg:w="166"/><text x="77.9715%" y="847.50">&lt;co..</text></g><g><title>bytes::bytes_mut::shared_v_drop::_{{closure}} (166 samples, 3.23%)</title><rect x="77.7215%" y="821" width="3.2327%" height="15" fill="rgb(252,5,43)" fg:x="3991" fg:w="166"/><text x="77.9715%" y="831.50">byt..</text></g><g><title>bytes::bytes_mut::release_shared (165 samples, 3.21%)</title><rect x="77.7410%" y="805" width="3.2132%" height="15" fill="rgb(252,84,19)" fg:x="3992" fg:w="165"/><text x="77.9910%" y="815.50">byt..</text></g><g><title>core::mem::drop (27 samples, 0.53%)</title><rect x="80.4284%" y="789" width="0.5258%" height="15" fill="rgb(243,152,39)" fg:x="4130" fg:w="27"/><text x="80.6784%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;bytes::bytes_mut::Shared&gt;&gt; (27 samples, 0.53%)</title><rect x="80.4284%" y="773" width="0.5258%" height="15" fill="rgb(234,160,15)" fg:x="4130" fg:w="27"/><text x="80.6784%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::Shared&gt; (27 samples, 0.53%)</title><rect x="80.4284%" y="757" width="0.5258%" height="15" fill="rgb(237,34,20)" fg:x="4130" fg:w="27"/><text x="80.6784%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (27 samples, 0.53%)</title><rect x="80.4284%" y="741" width="0.5258%" height="15" fill="rgb(229,97,13)" fg:x="4130" fg:w="27"/><text x="80.6784%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (27 samples, 0.53%)</title><rect x="80.4284%" y="725" width="0.5258%" height="15" fill="rgb(234,71,50)" fg:x="4130" fg:w="27"/><text x="80.6784%" y="735.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.53%)</title><rect x="80.4284%" y="709" width="0.5258%" height="15" fill="rgb(253,155,4)" fg:x="4130" fg:w="27"/><text x="80.6784%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.04%)</title><rect x="80.9153%" y="693" width="0.0389%" height="15" fill="rgb(222,185,37)" fg:x="4155" fg:w="2"/><text x="81.1653%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::shared::db::object::ObjValue&gt; (2 samples, 0.04%)</title><rect x="80.9542%" y="853" width="0.0389%" height="15" fill="rgb(251,177,13)" fg:x="4157" fg:w="2"/><text x="81.2042%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::shared::db::object::str::Str&gt; (2 samples, 0.04%)</title><rect x="80.9542%" y="837" width="0.0389%" height="15" fill="rgb(250,179,40)" fg:x="4157" fg:w="2"/><text x="81.2042%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (1 samples, 0.02%)</title><rect x="80.9737%" y="821" width="0.0195%" height="15" fill="rgb(242,44,2)" fg:x="4158" fg:w="1"/><text x="81.2237%" y="831.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="80.9737%" y="805" width="0.0195%" height="15" fill="rgb(216,177,13)" fg:x="4158" fg:w="1"/><text x="81.2237%" y="815.50"></text></g><g><title>mi_free_block_delayed_mt (1 samples, 0.02%)</title><rect x="80.9932%" y="853" width="0.0195%" height="15" fill="rgb(216,106,43)" fg:x="4159" fg:w="1"/><text x="81.2432%" y="863.50"></text></g><g><title>mi_free_block_mt (1 samples, 0.02%)</title><rect x="81.0127%" y="853" width="0.0195%" height="15" fill="rgb(216,183,2)" fg:x="4160" fg:w="1"/><text x="81.2627%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;rutin::shared::db::object::ObjectInner&gt;&gt; (175 samples, 3.41%)</title><rect x="77.6631%" y="885" width="3.4080%" height="15" fill="rgb(249,75,3)" fg:x="3988" fg:w="175"/><text x="77.9131%" y="895.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;rutin::shared::db::object::ObjectInner&gt; (174 samples, 3.39%)</title><rect x="77.6826%" y="869" width="3.3885%" height="15" fill="rgb(219,67,39)" fg:x="3989" fg:w="174"/><text x="77.9326%" y="879.50">cor..</text></g><g><title>mi_free_generic_mt (2 samples, 0.04%)</title><rect x="81.0321%" y="853" width="0.0389%" height="15" fill="rgb(253,228,2)" fg:x="4161" fg:w="2"/><text x="81.2821%" y="863.50"></text></g><g><title>_mi_page_ptr_unalign (1 samples, 0.02%)</title><rect x="81.0516%" y="837" width="0.0195%" height="15" fill="rgb(235,138,27)" fg:x="4162" fg:w="1"/><text x="81.3016%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::shared::db::Db::get_mut::{{closure}}&gt; (4 samples, 0.08%)</title><rect x="81.0711%" y="885" width="0.0779%" height="15" fill="rgb(236,97,51)" fg:x="4163" fg:w="4"/><text x="81.3211%" y="895.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (28 samples, 0.55%)</title><rect x="81.9474%" y="853" width="0.5453%" height="15" fill="rgb(240,80,30)" fg:x="4208" fg:w="28"/><text x="82.1974%" y="863.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (27 samples, 0.53%)</title><rect x="81.9669%" y="837" width="0.5258%" height="15" fill="rgb(230,178,19)" fg:x="4209" fg:w="27"/><text x="82.2169%" y="847.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop::_{{closure}} (27 samples, 0.53%)</title><rect x="81.9669%" y="821" width="0.5258%" height="15" fill="rgb(210,190,27)" fg:x="4209" fg:w="27"/><text x="82.2169%" y="831.50"></text></g><g><title>bytes::bytes_mut::release_shared (24 samples, 0.47%)</title><rect x="82.0253%" y="805" width="0.4674%" height="15" fill="rgb(222,107,31)" fg:x="4212" fg:w="24"/><text x="82.2753%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.02%)</title><rect x="82.4927%" y="837" width="0.0195%" height="15" fill="rgb(216,127,34)" fg:x="4236" fg:w="1"/><text x="82.7427%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="82.4927%" y="821" width="0.0195%" height="15" fill="rgb(234,116,52)" fg:x="4236" fg:w="1"/><text x="82.7427%" y="831.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (2 samples, 0.04%)</title><rect x="82.5122%" y="821" width="0.0389%" height="15" fill="rgb(222,124,15)" fg:x="4237" fg:w="2"/><text x="82.7622%" y="831.50"></text></g><g><title>syscall (1 samples, 0.02%)</title><rect x="82.5316%" y="805" width="0.0195%" height="15" fill="rgb(231,179,28)" fg:x="4238" fg:w="1"/><text x="82.7816%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::shared::db::object_entry::ObjectEntry&gt; (73 samples, 1.42%)</title><rect x="81.1490%" y="885" width="1.4216%" height="15" fill="rgb(226,93,45)" fg:x="4167" fg:w="73"/><text x="81.3990%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;dashmap::mapref::entry::Entry&lt;rutin::shared::db::object::str::Str,rutin::shared::db::object::Object&gt;&gt; (73 samples, 1.42%)</title><rect x="81.1490%" y="869" width="1.4216%" height="15" fill="rgb(215,8,51)" fg:x="4167" fg:w="73"/><text x="81.3990%" y="879.50"></text></g><g><title>dashmap::lock::RawRwLock::unlock_exclusive_slow (4 samples, 0.08%)</title><rect x="82.4927%" y="853" width="0.0779%" height="15" fill="rgb(223,106,5)" fg:x="4236" fg:w="4"/><text x="82.7427%" y="863.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_one (3 samples, 0.06%)</title><rect x="82.5122%" y="837" width="0.0584%" height="15" fill="rgb(250,191,5)" fg:x="4237" fg:w="3"/><text x="82.7622%" y="847.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket (1 samples, 0.02%)</title><rect x="82.5511%" y="821" width="0.0195%" height="15" fill="rgb(242,132,44)" fg:x="4239" fg:w="1"/><text x="82.8011%" y="831.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (1 samples, 0.02%)</title><rect x="82.5511%" y="805" width="0.0195%" height="15" fill="rgb(251,152,29)" fg:x="4239" fg:w="1"/><text x="82.8011%" y="815.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (1 samples, 0.02%)</title><rect x="82.5511%" y="789" width="0.0195%" height="15" fill="rgb(218,179,5)" fg:x="4239" fg:w="1"/><text x="82.8011%" y="799.50"></text></g><g><title>[libc.so.6] (62 samples, 1.21%)</title><rect x="83.7390%" y="869" width="1.2074%" height="15" fill="rgb(227,67,19)" fg:x="4300" fg:w="62"/><text x="83.9890%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::shared::db::Db::get_mut::{{closure}}::{{closure}}&gt; (8 samples, 0.16%)</title><rect x="84.9464%" y="869" width="0.1558%" height="15" fill="rgb(233,119,31)" fg:x="4362" fg:w="8"/><text x="85.1964%" y="879.50"></text></g><g><title>[libc.so.6] (22 samples, 0.43%)</title><rect x="86.0370%" y="853" width="0.4284%" height="15" fill="rgb(241,120,22)" fg:x="4418" fg:w="22"/><text x="86.2870%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::shared::db::object::Object::trigger_lock_event::{{closure}}&gt; (4 samples, 0.08%)</title><rect x="86.4654%" y="853" width="0.0779%" height="15" fill="rgb(224,102,30)" fg:x="4440" fg:w="4"/><text x="86.7154%" y="863.50"></text></g><g><title>rutin::shared::db::Db::try_evict::_{{closure}} (4 samples, 0.08%)</title><rect x="86.5433%" y="853" width="0.0779%" height="15" fill="rgb(210,164,37)" fg:x="4444" fg:w="4"/><text x="86.7933%" y="863.50"></text></g><g><title>rutin::shared::db::object::Object::trigger_lock_event::_{{closure}} (5 samples, 0.10%)</title><rect x="86.6212%" y="853" width="0.0974%" height="15" fill="rgb(226,191,16)" fg:x="4448" fg:w="5"/><text x="86.8712%" y="863.50"></text></g><g><title>core::cmp::PartialOrd::le (4 samples, 0.08%)</title><rect x="86.7186%" y="837" width="0.0779%" height="15" fill="rgb(214,40,45)" fg:x="4453" fg:w="4"/><text x="86.9686%" y="847.50"></text></g><g><title>&lt;tokio::time::instant::Instant as core::cmp::PartialOrd&gt;::partial_cmp (4 samples, 0.08%)</title><rect x="86.7186%" y="821" width="0.0779%" height="15" fill="rgb(244,29,26)" fg:x="4453" fg:w="4"/><text x="86.9686%" y="831.50"></text></g><g><title>&lt;std::time::Instant as core::cmp::PartialOrd&gt;::partial_cmp (4 samples, 0.08%)</title><rect x="86.7186%" y="805" width="0.0779%" height="15" fill="rgb(216,16,5)" fg:x="4453" fg:w="4"/><text x="86.9686%" y="815.50"></text></g><g><title>&lt;std::sys::pal::unix::time::Instant as core::cmp::PartialOrd&gt;::partial_cmp (4 samples, 0.08%)</title><rect x="86.7186%" y="789" width="0.0779%" height="15" fill="rgb(249,76,35)" fg:x="4453" fg:w="4"/><text x="86.9686%" y="799.50"></text></g><g><title>&lt;std::sys::pal::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (4 samples, 0.08%)</title><rect x="86.7186%" y="773" width="0.0779%" height="15" fill="rgb(207,11,44)" fg:x="4453" fg:w="4"/><text x="86.9686%" y="783.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (4 samples, 0.08%)</title><rect x="86.7186%" y="757" width="0.0779%" height="15" fill="rgb(228,190,49)" fg:x="4453" fg:w="4"/><text x="86.9686%" y="767.50"></text></g><g><title>clock_gettime (68 samples, 1.32%)</title><rect x="86.8160%" y="757" width="1.3242%" height="15" fill="rgb(214,173,12)" fg:x="4458" fg:w="68"/><text x="87.0660%" y="767.50"></text></g><g><title>__vdso_clock_gettime (64 samples, 1.25%)</title><rect x="86.8939%" y="741" width="1.2463%" height="15" fill="rgb(218,26,35)" fg:x="4462" fg:w="64"/><text x="87.1439%" y="751.50"></text></g><g><title>rutin::shared::db::object::ObjectInner::is_expired (75 samples, 1.46%)</title><rect x="86.7186%" y="853" width="1.4606%" height="15" fill="rgb(220,200,19)" fg:x="4453" fg:w="75"/><text x="86.9686%" y="863.50"></text></g><g><title>tokio::time::instant::Instant::now (71 samples, 1.38%)</title><rect x="86.7965%" y="837" width="1.3827%" height="15" fill="rgb(239,95,49)" fg:x="4457" fg:w="71"/><text x="87.0465%" y="847.50"></text></g><g><title>tokio::time::instant::variant::now (71 samples, 1.38%)</title><rect x="86.7965%" y="821" width="1.3827%" height="15" fill="rgb(235,85,53)" fg:x="4457" fg:w="71"/><text x="87.0465%" y="831.50"></text></g><g><title>std::time::Instant::now (71 samples, 1.38%)</title><rect x="86.7965%" y="805" width="1.3827%" height="15" fill="rgb(233,133,31)" fg:x="4457" fg:w="71"/><text x="87.0465%" y="815.50"></text></g><g><title>std::sys::pal::unix::time::Instant::now (71 samples, 1.38%)</title><rect x="86.7965%" y="789" width="1.3827%" height="15" fill="rgb(218,25,20)" fg:x="4457" fg:w="71"/><text x="87.0465%" y="799.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (71 samples, 1.38%)</title><rect x="86.7965%" y="773" width="1.3827%" height="15" fill="rgb(252,210,38)" fg:x="4457" fg:w="71"/><text x="87.0465%" y="783.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (2 samples, 0.04%)</title><rect x="88.1402%" y="757" width="0.0389%" height="15" fill="rgb(242,134,21)" fg:x="4526" fg:w="2"/><text x="88.3902%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU32::store (1 samples, 0.02%)</title><rect x="88.1986%" y="837" width="0.0195%" height="15" fill="rgb(213,28,48)" fg:x="4529" fg:w="1"/><text x="88.4486%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_store (1 samples, 0.02%)</title><rect x="88.1986%" y="821" width="0.0195%" height="15" fill="rgb(250,196,2)" fg:x="4529" fg:w="1"/><text x="88.4486%" y="831.50"></text></g><g><title>rutin::shared::db::Db::get_mut::_{{closure}} (293 samples, 5.71%)</title><rect x="82.5706%" y="885" width="5.7059%" height="15" fill="rgb(227,5,17)" fg:x="4240" fg:w="293"/><text x="82.8206%" y="895.50">rutin::..</text></g><g><title>rutin::shared::db::Db::get_mut::_{{closure}}::_{{closure}} (163 samples, 3.17%)</title><rect x="85.1022%" y="869" width="3.1743%" height="15" fill="rgb(221,226,24)" fg:x="4370" fg:w="163"/><text x="85.3522%" y="879.50">rut..</text></g><g><title>rutin::shared::db::object::ObjectInner::update_lru (5 samples, 0.10%)</title><rect x="88.1792%" y="853" width="0.0974%" height="15" fill="rgb(211,5,48)" fg:x="4528" fg:w="5"/><text x="88.4292%" y="863.50"></text></g><g><title>rutin::server::listener::get_lru_clock (3 samples, 0.06%)</title><rect x="88.2181%" y="837" width="0.0584%" height="15" fill="rgb(219,150,6)" fg:x="4530" fg:w="3"/><text x="88.4681%" y="847.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="88.3934%" y="837" width="0.0195%" height="15" fill="rgb(251,46,16)" fg:x="4539" fg:w="1"/><text x="88.6434%" y="847.50"></text></g><g><title>bytes::bytes::Bytes::as_slice (1 samples, 0.02%)</title><rect x="88.3934%" y="821" width="0.0195%" height="15" fill="rgb(220,204,40)" fg:x="4539" fg:w="1"/><text x="88.6434%" y="831.50"></text></g><g><title>atoi::ascii_to_digit (2 samples, 0.04%)</title><rect x="88.5297%" y="805" width="0.0389%" height="15" fill="rgb(211,85,2)" fg:x="4546" fg:w="2"/><text x="88.7797%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (2 samples, 0.04%)</title><rect x="88.5686%" y="805" width="0.0389%" height="15" fill="rgb(229,17,7)" fg:x="4548" fg:w="2"/><text x="88.8186%" y="815.50"></text></g><g><title>&lt;I as atoi::FromRadix10SignedChecked&gt;::from_radix_10_signed_checked::_{{closure}} (2 samples, 0.04%)</title><rect x="88.5686%" y="789" width="0.0389%" height="15" fill="rgb(239,72,28)" fg:x="4548" fg:w="2"/><text x="88.8186%" y="799.50"></text></g><g><title>atoi::Sign::try_from (1 samples, 0.02%)</title><rect x="88.5881%" y="773" width="0.0195%" height="15" fill="rgb(230,47,54)" fg:x="4549" fg:w="1"/><text x="88.8381%" y="783.50"></text></g><g><title>rutin::shared::db::object::ObjectInner::new_str (19 samples, 0.37%)</title><rect x="88.2765%" y="885" width="0.3700%" height="15" fill="rgb(214,50,8)" fg:x="4533" fg:w="19"/><text x="88.5265%" y="895.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (16 samples, 0.31%)</title><rect x="88.3350%" y="869" width="0.3116%" height="15" fill="rgb(216,198,43)" fg:x="4536" fg:w="16"/><text x="88.5850%" y="879.50"></text></g><g><title>&lt;rutin::shared::db::object::str::Str as core::convert::From&lt;bytes::bytes::Bytes&gt;&gt;::from (16 samples, 0.31%)</title><rect x="88.3350%" y="853" width="0.3116%" height="15" fill="rgb(234,20,35)" fg:x="4536" fg:w="16"/><text x="88.5850%" y="863.50"></text></g><g><title>atoi::atoi (12 samples, 0.23%)</title><rect x="88.4129%" y="837" width="0.2337%" height="15" fill="rgb(254,45,19)" fg:x="4540" fg:w="12"/><text x="88.6629%" y="847.50"></text></g><g><title>&lt;I as atoi::FromRadix10SignedChecked&gt;::from_radix_10_signed_checked (10 samples, 0.19%)</title><rect x="88.4518%" y="821" width="0.1947%" height="15" fill="rgb(219,14,44)" fg:x="4542" fg:w="10"/><text x="88.7018%" y="831.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::first (2 samples, 0.04%)</title><rect x="88.6076%" y="805" width="0.0389%" height="15" fill="rgb(217,220,26)" fg:x="4550" fg:w="2"/><text x="88.8576%" y="815.50"></text></g><g><title>&lt;tracing_core::metadata::Level as core::cmp::PartialOrd&lt;tracing_core::metadata::LevelFilter&gt;&gt;::le (2 samples, 0.04%)</title><rect x="89.4255%" y="869" width="0.0389%" height="15" fill="rgb(213,158,28)" fg:x="4592" fg:w="2"/><text x="89.6755%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicU32::store (2 samples, 0.04%)</title><rect x="89.4645%" y="869" width="0.0389%" height="15" fill="rgb(252,51,52)" fg:x="4594" fg:w="2"/><text x="89.7145%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_store (2 samples, 0.04%)</title><rect x="89.4645%" y="853" width="0.0389%" height="15" fill="rgb(246,89,16)" fg:x="4594" fg:w="2"/><text x="89.7145%" y="863.50"></text></g><g><title>core::ptr::read (3 samples, 0.06%)</title><rect x="89.5034%" y="837" width="0.0584%" height="15" fill="rgb(216,158,49)" fg:x="4596" fg:w="3"/><text x="89.7534%" y="847.50"></text></g><g><title>dashmap::mapref::entry::OccupiedEntry&lt;K,V&gt;::insert (11 samples, 0.21%)</title><rect x="89.5034%" y="869" width="0.2142%" height="15" fill="rgb(236,107,19)" fg:x="4596" fg:w="11"/><text x="89.7534%" y="879.50"></text></g><g><title>core::mem::replace (11 samples, 0.21%)</title><rect x="89.5034%" y="853" width="0.2142%" height="15" fill="rgb(228,185,30)" fg:x="4596" fg:w="11"/><text x="89.7534%" y="863.50"></text></g><g><title>core::ptr::write (8 samples, 0.16%)</title><rect x="89.5618%" y="837" width="0.1558%" height="15" fill="rgb(246,134,8)" fg:x="4599" fg:w="8"/><text x="89.8118%" y="847.50"></text></g><g><title>rutin::shared::db::Db::update_expire_records (3 samples, 0.06%)</title><rect x="89.7176%" y="869" width="0.0584%" height="15" fill="rgb(214,143,50)" fg:x="4607" fg:w="3"/><text x="89.9676%" y="879.50"></text></g><g><title>&lt;tokio::time::instant::Instant as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="89.7566%" y="853" width="0.0195%" height="15" fill="rgb(228,75,8)" fg:x="4609" fg:w="1"/><text x="90.0066%" y="863.50"></text></g><g><title>&lt;std::time::Instant as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="89.7566%" y="837" width="0.0195%" height="15" fill="rgb(207,175,4)" fg:x="4609" fg:w="1"/><text x="90.0066%" y="847.50"></text></g><g><title>&lt;std::sys::pal::unix::time::Instant as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="89.7566%" y="821" width="0.0195%" height="15" fill="rgb(205,108,24)" fg:x="4609" fg:w="1"/><text x="90.0066%" y="831.50"></text></g><g><title>&lt;std::sys::pal::unix::time::Timespec as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="89.7566%" y="805" width="0.0195%" height="15" fill="rgb(244,120,49)" fg:x="4609" fg:w="1"/><text x="90.0066%" y="815.50"></text></g><g><title>rutin::shared::db::object::Object::inner (2 samples, 0.04%)</title><rect x="89.7760%" y="869" width="0.0389%" height="15" fill="rgb(223,47,38)" fg:x="4610" fg:w="2"/><text x="90.0260%" y="879.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (2 samples, 0.04%)</title><rect x="89.7760%" y="853" width="0.0389%" height="15" fill="rgb(229,179,11)" fg:x="4610" fg:w="2"/><text x="90.0260%" y="863.50"></text></g><g><title>rutin::shared::db::object::Object::remove_flag (3 samples, 0.06%)</title><rect x="89.9318%" y="853" width="0.0584%" height="15" fill="rgb(231,122,1)" fg:x="4618" fg:w="3"/><text x="90.1818%" y="863.50"></text></g><g><title>rutin::shared::db::object::Object::trigger_may_update_event (10 samples, 0.19%)</title><rect x="89.8150%" y="869" width="0.1947%" height="15" fill="rgb(245,119,9)" fg:x="4612" fg:w="10"/><text x="90.0650%" y="879.50"></text></g><g><title>tracing_core::metadata::LevelFilter::current (1 samples, 0.02%)</title><rect x="89.9903%" y="853" width="0.0195%" height="15" fill="rgb(241,163,25)" fg:x="4621" fg:w="1"/><text x="90.2403%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.02%)</title><rect x="89.9903%" y="837" width="0.0195%" height="15" fill="rgb(217,214,3)" fg:x="4621" fg:w="1"/><text x="90.2403%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="89.9903%" y="821" width="0.0195%" height="15" fill="rgb(240,86,28)" fg:x="4621" fg:w="1"/><text x="90.2403%" y="831.50"></text></g><g><title>rutin::shared::db::object::Object::trigger_track_event (1 samples, 0.02%)</title><rect x="90.0097%" y="869" width="0.0195%" height="15" fill="rgb(215,47,9)" fg:x="4622" fg:w="1"/><text x="90.2597%" y="879.50"></text></g><g><title>rutin::shared::db::object::Events::contains (1 samples, 0.02%)</title><rect x="90.0097%" y="853" width="0.0195%" height="15" fill="rgb(252,25,45)" fg:x="4622" fg:w="1"/><text x="90.2597%" y="863.50"></text></g><g><title>&lt;rutin::cmd::commands::str::Set as rutin::cmd::CmdExecutor&gt;::execute::_{{closure}}::_{{closure}}::_{{closure}} (712 samples, 13.87%)</title><rect x="76.1831%" y="901" width="13.8656%" height="15" fill="rgb(251,164,9)" fg:x="3912" fg:w="712"/><text x="76.4331%" y="911.50">&lt;rutin::cmd::commands..</text></g><g><title>rutin::shared::db::object_entry::ObjectEntry::insert_object (72 samples, 1.40%)</title><rect x="88.6465%" y="885" width="1.4021%" height="15" fill="rgb(233,194,0)" fg:x="4552" fg:w="72"/><text x="88.8965%" y="895.50"></text></g><g><title>rutin::shared::db::object::ObjectInner::expire_unchecked (1 samples, 0.02%)</title><rect x="90.0292%" y="869" width="0.0195%" height="15" fill="rgb(249,111,24)" fg:x="4623" fg:w="1"/><text x="90.2792%" y="879.50"></text></g><g><title>&lt;rutin::cmd::commands::str::Set as rutin::cmd::CmdExecutor&gt;::execute::_{{closure}}::_{{closure}} (833 samples, 16.22%)</title><rect x="75.1899%" y="917" width="16.2220%" height="15" fill="rgb(250,223,3)" fg:x="3861" fg:w="833"/><text x="75.4399%" y="927.50">&lt;rutin::cmd::commands::st..</text></g><g><title>[libc.so.6] (70 samples, 1.36%)</title><rect x="90.0487%" y="901" width="1.3632%" height="15" fill="rgb(236,178,37)" fg:x="4624" fg:w="70"/><text x="90.2987%" y="911.50"></text></g><g><title>&lt;tracing_core::metadata::Level as core::cmp::PartialOrd&lt;tracing_core::metadata::LevelFilter&gt;&gt;::le (1 samples, 0.02%)</title><rect x="91.4119%" y="917" width="0.0195%" height="15" fill="rgb(241,158,50)" fg:x="4694" fg:w="1"/><text x="91.6619%" y="927.50"></text></g><g><title>[libc.so.6] (53 samples, 1.03%)</title><rect x="91.4314%" y="917" width="1.0321%" height="15" fill="rgb(213,121,41)" fg:x="4695" fg:w="53"/><text x="91.6814%" y="927.50"></text></g><g><title>&lt;rutin::cmd::commands::str::Set as rutin::cmd::CmdExecutor&gt;::execute::_{{closure}} (936 samples, 18.23%)</title><rect x="74.2941%" y="933" width="18.2278%" height="15" fill="rgb(240,92,3)" fg:x="3815" fg:w="936"/><text x="74.5441%" y="943.50">&lt;rutin::cmd::commands::str::..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;rutin::cmd::commands::str::Set as rutin::cmd::CmdExecutor&gt;::execute&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}::{{closure}}&gt; (3 samples, 0.06%)</title><rect x="92.4635%" y="917" width="0.0584%" height="15" fill="rgb(205,123,3)" fg:x="4748" fg:w="3"/><text x="92.7135%" y="927.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::deref::Deref&gt;::deref (11 samples, 0.21%)</title><rect x="93.6125%" y="885" width="0.2142%" height="15" fill="rgb(205,97,47)" fg:x="4807" fg:w="11"/><text x="93.8625%" y="895.50"></text></g><g><title>bytes::bytes::Bytes::as_slice (11 samples, 0.21%)</title><rect x="93.6125%" y="869" width="0.2142%" height="15" fill="rgb(247,152,14)" fg:x="4807" fg:w="11"/><text x="93.8625%" y="879.50"></text></g><g><title>atoi::ascii_to_digit (1 samples, 0.02%)</title><rect x="94.1772%" y="853" width="0.0195%" height="15" fill="rgb(248,195,53)" fg:x="4836" fg:w="1"/><text x="94.4272%" y="863.50"></text></g><g><title>core::cmp::min (1 samples, 0.02%)</title><rect x="94.1967%" y="853" width="0.0195%" height="15" fill="rgb(226,201,16)" fg:x="4837" fg:w="1"/><text x="94.4467%" y="863.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.02%)</title><rect x="94.1967%" y="837" width="0.0195%" height="15" fill="rgb(205,98,0)" fg:x="4837" fg:w="1"/><text x="94.4467%" y="847.50"></text></g><g><title>core::cmp::min_by (1 samples, 0.02%)</title><rect x="94.1967%" y="821" width="0.0195%" height="15" fill="rgb(214,191,48)" fg:x="4837" fg:w="1"/><text x="94.4467%" y="831.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (39 samples, 0.76%)</title><rect x="93.6125%" y="917" width="0.7595%" height="15" fill="rgb(237,112,39)" fg:x="4807" fg:w="39"/><text x="93.8625%" y="927.50"></text></g><g><title>&lt;rutin::shared::db::object::str::Str as core::convert::From&lt;bytes::bytes::Bytes&gt;&gt;::from (39 samples, 0.76%)</title><rect x="93.6125%" y="901" width="0.7595%" height="15" fill="rgb(247,203,27)" fg:x="4807" fg:w="39"/><text x="93.8625%" y="911.50"></text></g><g><title>atoi::atoi (28 samples, 0.55%)</title><rect x="93.8267%" y="885" width="0.5453%" height="15" fill="rgb(235,124,28)" fg:x="4818" fg:w="28"/><text x="94.0767%" y="895.50"></text></g><g><title>&lt;I as atoi::FromRadix10SignedChecked&gt;::from_radix_10_signed_checked (21 samples, 0.41%)</title><rect x="93.9630%" y="869" width="0.4090%" height="15" fill="rgb(208,207,46)" fg:x="4825" fg:w="21"/><text x="94.2130%" y="879.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (8 samples, 0.16%)</title><rect x="94.2162%" y="853" width="0.1558%" height="15" fill="rgb(234,176,4)" fg:x="4838" fg:w="8"/><text x="94.4662%" y="863.50"></text></g><g><title>&lt;I as atoi::FromRadix10SignedChecked&gt;::from_radix_10_signed_checked::_{{closure}} (8 samples, 0.16%)</title><rect x="94.2162%" y="837" width="0.1558%" height="15" fill="rgb(230,133,28)" fg:x="4838" fg:w="8"/><text x="94.4662%" y="847.50"></text></g><g><title>atoi::Sign::try_from (2 samples, 0.04%)</title><rect x="94.3330%" y="821" width="0.0389%" height="15" fill="rgb(211,137,40)" fg:x="4844" fg:w="2"/><text x="94.5830%" y="831.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::clear (1 samples, 0.02%)</title><rect x="94.4304%" y="901" width="0.0195%" height="15" fill="rgb(254,35,13)" fg:x="4849" fg:w="1"/><text x="94.6804%" y="911.50"></text></g><g><title>&lt;rutin::cmd::CmdUnparsed as core::iter::traits::iterator::Iterator&gt;::advance_by (7 samples, 0.14%)</title><rect x="94.3720%" y="917" width="0.1363%" height="15" fill="rgb(225,49,51)" fg:x="4846" fg:w="7"/><text x="94.6220%" y="927.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::len (3 samples, 0.06%)</title><rect x="94.4499%" y="901" width="0.0584%" height="15" fill="rgb(251,10,15)" fg:x="4850" fg:w="3"/><text x="94.6999%" y="911.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::ptr (4 samples, 0.08%)</title><rect x="94.5862%" y="869" width="0.0779%" height="15" fill="rgb(228,207,15)" fg:x="4857" fg:w="4"/><text x="94.8362%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4 samples, 0.08%)</title><rect x="94.5862%" y="853" width="0.0779%" height="15" fill="rgb(241,99,19)" fg:x="4857" fg:w="4"/><text x="94.8362%" y="863.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (9 samples, 0.18%)</title><rect x="94.5083%" y="901" width="0.1753%" height="15" fill="rgb(207,104,49)" fg:x="4853" fg:w="9"/><text x="94.7583%" y="911.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (7 samples, 0.14%)</title><rect x="94.5472%" y="885" width="0.1363%" height="15" fill="rgb(234,99,18)" fg:x="4855" fg:w="7"/><text x="94.7972%" y="895.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.02%)</title><rect x="94.6641%" y="869" width="0.0195%" height="15" fill="rgb(213,191,49)" fg:x="4861" fg:w="1"/><text x="94.9141%" y="879.50"></text></g><g><title>&lt;rutin::cmd::CmdUnparsed as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (33 samples, 0.64%)</title><rect x="94.7420%" y="885" width="0.6426%" height="15" fill="rgb(210,226,19)" fg:x="4865" fg:w="33"/><text x="94.9920%" y="895.50"></text></g><g><title>&lt;rutin::cmd::CmdUnparsed as core::iter::traits::iterator::Iterator&gt;::next (152 samples, 2.96%)</title><rect x="94.5083%" y="917" width="2.9601%" height="15" fill="rgb(229,97,18)" fg:x="4853" fg:w="152"/><text x="94.7583%" y="927.50">&lt;ru..</text></g><g><title>core::option::Option&lt;T&gt;::and_then (143 samples, 2.78%)</title><rect x="94.6835%" y="901" width="2.7848%" height="15" fill="rgb(211,167,15)" fg:x="4862" fg:w="143"/><text x="94.9335%" y="911.50">co..</text></g><g><title>[libc.so.6] (107 samples, 2.08%)</title><rect x="95.3846%" y="885" width="2.0837%" height="15" fill="rgb(210,169,34)" fg:x="4898" fg:w="107"/><text x="95.6346%" y="895.50">[..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (5 samples, 0.10%)</title><rect x="97.4684%" y="917" width="0.0974%" height="15" fill="rgb(241,121,31)" fg:x="5005" fg:w="5"/><text x="97.7184%" y="927.50"></text></g><g><title>_mi_page_retire (1 samples, 0.02%)</title><rect x="97.5657%" y="789" width="0.0195%" height="15" fill="rgb(232,40,11)" fg:x="5010" fg:w="1"/><text x="97.8157%" y="799.50"></text></g><g><title>mi_page_queue_of (1 samples, 0.02%)</title><rect x="97.5657%" y="773" width="0.0195%" height="15" fill="rgb(205,86,26)" fg:x="5010" fg:w="1"/><text x="97.8157%" y="783.50"></text></g><g><title>mi_heap_page_queue_of (1 samples, 0.02%)</title><rect x="97.5657%" y="757" width="0.0195%" height="15" fill="rgb(231,126,28)" fg:x="5010" fg:w="1"/><text x="97.8157%" y="767.50"></text></g><g><title>_mi_stat_decrease (4 samples, 0.08%)</title><rect x="97.6047%" y="757" width="0.0779%" height="15" fill="rgb(219,221,18)" fg:x="5012" fg:w="4"/><text x="97.8547%" y="767.50"></text></g><g><title>mi_stat_update (4 samples, 0.08%)</title><rect x="97.6047%" y="741" width="0.0779%" height="15" fill="rgb(211,40,0)" fg:x="5012" fg:w="4"/><text x="97.8547%" y="751.50"></text></g><g><title>_mi_prim_clock_now (2 samples, 0.04%)</title><rect x="97.6826%" y="709" width="0.0389%" height="15" fill="rgb(239,85,43)" fg:x="5016" fg:w="2"/><text x="97.9326%" y="719.50"></text></g><g><title>clock_gettime (1 samples, 0.02%)</title><rect x="97.7020%" y="693" width="0.0195%" height="15" fill="rgb(231,55,21)" fg:x="5017" fg:w="1"/><text x="97.9520%" y="703.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.02%)</title><rect x="97.7020%" y="677" width="0.0195%" height="15" fill="rgb(225,184,43)" fg:x="5017" fg:w="1"/><text x="97.9520%" y="687.50"></text></g><g><title>mi_segment_span_free (3 samples, 0.06%)</title><rect x="97.6826%" y="741" width="0.0584%" height="15" fill="rgb(251,158,41)" fg:x="5016" fg:w="3"/><text x="97.9326%" y="751.50"></text></g><g><title>mi_segment_schedule_purge (3 samples, 0.06%)</title><rect x="97.6826%" y="725" width="0.0584%" height="15" fill="rgb(234,159,37)" fg:x="5016" fg:w="3"/><text x="97.9326%" y="735.50"></text></g><g><title>mi_commit_mask_set (1 samples, 0.02%)</title><rect x="97.7215%" y="709" width="0.0195%" height="15" fill="rgb(216,204,22)" fg:x="5018" fg:w="1"/><text x="97.9715%" y="719.50"></text></g><g><title>mi_segment_page_clear (10 samples, 0.19%)</title><rect x="97.5852%" y="773" width="0.1947%" height="15" fill="rgb(214,17,3)" fg:x="5011" fg:w="10"/><text x="97.8352%" y="783.50"></text></g><g><title>mi_segment_span_free_coalesce (5 samples, 0.10%)</title><rect x="97.6826%" y="757" width="0.0974%" height="15" fill="rgb(212,111,17)" fg:x="5016" fg:w="5"/><text x="97.9326%" y="767.50"></text></g><g><title>mi_segment_span_remove_from_queue (2 samples, 0.04%)</title><rect x="97.7410%" y="741" width="0.0389%" height="15" fill="rgb(221,157,24)" fg:x="5019" fg:w="2"/><text x="97.9910%" y="751.50"></text></g><g><title>mi_span_queue_for (1 samples, 0.02%)</title><rect x="97.7605%" y="725" width="0.0195%" height="15" fill="rgb(252,16,13)" fg:x="5020" fg:w="1"/><text x="98.0105%" y="735.50"></text></g><g><title>mi_slice_bin (1 samples, 0.02%)</title><rect x="97.7605%" y="709" width="0.0195%" height="15" fill="rgb(221,62,2)" fg:x="5020" fg:w="1"/><text x="98.0105%" y="719.50"></text></g><g><title>mi_slice_bin8 (1 samples, 0.02%)</title><rect x="97.7605%" y="693" width="0.0195%" height="15" fill="rgb(247,87,22)" fg:x="5020" fg:w="1"/><text x="98.0105%" y="703.50"></text></g><g><title>mi_bsr (1 samples, 0.02%)</title><rect x="97.7605%" y="677" width="0.0195%" height="15" fill="rgb(215,73,9)" fg:x="5020" fg:w="1"/><text x="98.0105%" y="687.50"></text></g><g><title>_mi_segment_page_free (12 samples, 0.23%)</title><rect x="97.5852%" y="789" width="0.2337%" height="15" fill="rgb(207,175,33)" fg:x="5011" fg:w="12"/><text x="97.8352%" y="799.50"></text></g><g><title>mi_segment_try_purge (2 samples, 0.04%)</title><rect x="97.7799%" y="773" width="0.0389%" height="15" fill="rgb(243,129,54)" fg:x="5021" fg:w="2"/><text x="98.0299%" y="783.50"></text></g><g><title>_mi_prim_clock_now (1 samples, 0.02%)</title><rect x="97.7994%" y="757" width="0.0195%" height="15" fill="rgb(227,119,45)" fg:x="5022" fg:w="1"/><text x="98.0494%" y="767.50"></text></g><g><title>clock_gettime (1 samples, 0.02%)</title><rect x="97.7994%" y="741" width="0.0195%" height="15" fill="rgb(205,109,36)" fg:x="5022" fg:w="1"/><text x="98.0494%" y="751.50"></text></g><g><title>_mi_segment_page_of (2 samples, 0.04%)</title><rect x="97.8384%" y="773" width="0.0389%" height="15" fill="rgb(205,6,39)" fg:x="5024" fg:w="2"/><text x="98.0884%" y="783.50"></text></g><g><title>mi_slice_first (2 samples, 0.04%)</title><rect x="97.8384%" y="757" width="0.0389%" height="15" fill="rgb(221,32,16)" fg:x="5024" fg:w="2"/><text x="98.0884%" y="767.50"></text></g><g><title>mi_checked_ptr_segment (3 samples, 0.06%)</title><rect x="97.8773%" y="773" width="0.0584%" height="15" fill="rgb(228,144,50)" fg:x="5026" fg:w="3"/><text x="98.1273%" y="783.50"></text></g><g><title>_mi_ptr_segment (3 samples, 0.06%)</title><rect x="97.8773%" y="757" width="0.0584%" height="15" fill="rgb(229,201,53)" fg:x="5026" fg:w="3"/><text x="98.1273%" y="767.50"></text></g><g><title>mi_free (7 samples, 0.14%)</title><rect x="97.8189%" y="789" width="0.1363%" height="15" fill="rgb(249,153,27)" fg:x="5023" fg:w="7"/><text x="98.0689%" y="799.50"></text></g><g><title>mi_free_block_local (1 samples, 0.02%)</title><rect x="97.9357%" y="773" width="0.0195%" height="15" fill="rgb(227,106,25)" fg:x="5029" fg:w="1"/><text x="98.1857%" y="783.50"></text></g><g><title>mi_block_set_next (1 samples, 0.02%)</title><rect x="97.9357%" y="757" width="0.0195%" height="15" fill="rgb(230,65,29)" fg:x="5029" fg:w="1"/><text x="98.1857%" y="767.50"></text></g><g><title>mi_block_set_nextx (1 samples, 0.02%)</title><rect x="97.9357%" y="741" width="0.0195%" height="15" fill="rgb(221,57,46)" fg:x="5029" fg:w="1"/><text x="98.1857%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::cmd::CmdUnparsed&gt; (21 samples, 0.41%)</title><rect x="97.5657%" y="917" width="0.4090%" height="15" fill="rgb(229,161,17)" fg:x="5010" fg:w="21"/><text x="97.8157%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;rutin::frame::Resp3&gt;&gt; (21 samples, 0.41%)</title><rect x="97.5657%" y="901" width="0.4090%" height="15" fill="rgb(222,213,11)" fg:x="5010" fg:w="21"/><text x="97.8157%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;rutin::frame::Resp3&gt;&gt; (21 samples, 0.41%)</title><rect x="97.5657%" y="885" width="0.4090%" height="15" fill="rgb(235,35,13)" fg:x="5010" fg:w="21"/><text x="97.8157%" y="895.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.41%)</title><rect x="97.5657%" y="869" width="0.4090%" height="15" fill="rgb(233,158,34)" fg:x="5010" fg:w="21"/><text x="97.8157%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (21 samples, 0.41%)</title><rect x="97.5657%" y="853" width="0.4090%" height="15" fill="rgb(215,151,48)" fg:x="5010" fg:w="21"/><text x="97.8157%" y="863.50"></text></g><g><title>alloc::alloc::dealloc (21 samples, 0.41%)</title><rect x="97.5657%" y="837" width="0.4090%" height="15" fill="rgb(229,84,14)" fg:x="5010" fg:w="21"/><text x="97.8157%" y="847.50"></text></g><g><title>__rust_dealloc (21 samples, 0.41%)</title><rect x="97.5657%" y="821" width="0.4090%" height="15" fill="rgb(229,68,14)" fg:x="5010" fg:w="21"/><text x="97.8157%" y="831.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (21 samples, 0.41%)</title><rect x="97.5657%" y="805" width="0.4090%" height="15" fill="rgb(243,106,26)" fg:x="5010" fg:w="21"/><text x="97.8157%" y="815.50"></text></g><g><title>mi_free_generic_local (1 samples, 0.02%)</title><rect x="97.9552%" y="789" width="0.0195%" height="15" fill="rgb(206,45,38)" fg:x="5030" fg:w="1"/><text x="98.2052%" y="799.50"></text></g><g><title>&lt;rutin::cmd::commands::str::Set as rutin::cmd::CmdExecutor&gt;::parse (281 samples, 5.47%)</title><rect x="92.5219%" y="933" width="5.4722%" height="15" fill="rgb(226,6,15)" fg:x="4751" fg:w="281"/><text x="92.7719%" y="943.50">&lt;rutin:..</text></g><g><title>rutin::cmd::CmdUnparsed::get_uppercase (1 samples, 0.02%)</title><rect x="97.9747%" y="917" width="0.0195%" height="15" fill="rgb(232,22,54)" fg:x="5031" fg:w="1"/><text x="98.2247%" y="927.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::get (1 samples, 0.02%)</title><rect x="97.9747%" y="901" width="0.0195%" height="15" fill="rgb(229,222,32)" fg:x="5031" fg:w="1"/><text x="98.2247%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;rutin::cmd::commands::str::Set as rutin::cmd::CmdExecutor&gt;::execute&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}&gt; (4 samples, 0.08%)</title><rect x="97.9942%" y="933" width="0.0779%" height="15" fill="rgb(228,62,29)" fg:x="5032" fg:w="4"/><text x="98.2442%" y="943.50"></text></g><g><title>rutin::cmd::CmdExecutor::apply::_{{closure}} (1,282 samples, 24.97%)</title><rect x="73.2425%" y="949" width="24.9659%" height="15" fill="rgb(251,103,34)" fg:x="3761" fg:w="1282"/><text x="73.4925%" y="959.50">rutin::cmd::CmdExecutor::apply::_{{closu..</text></g><g><title>rutin::conf::security::AccessControl::is_forbidden_cmd (7 samples, 0.14%)</title><rect x="98.0721%" y="933" width="0.1363%" height="15" fill="rgb(233,12,30)" fg:x="5036" fg:w="7"/><text x="98.3221%" y="943.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (6 samples, 0.12%)</title><rect x="98.2084%" y="933" width="0.1168%" height="15" fill="rgb(238,52,0)" fg:x="5043" fg:w="6"/><text x="98.4584%" y="943.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.12%)</title><rect x="98.2084%" y="917" width="0.1168%" height="15" fill="rgb(223,98,5)" fg:x="5043" fg:w="6"/><text x="98.4584%" y="927.50"></text></g><g><title>[libc.so.6] (6 samples, 0.12%)</title><rect x="98.2084%" y="901" width="0.1168%" height="15" fill="rgb(228,75,37)" fg:x="5043" fg:w="6"/><text x="98.4584%" y="911.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="98.3447%" y="901" width="0.0195%" height="15" fill="rgb(205,115,49)" fg:x="5050" fg:w="1"/><text x="98.5947%" y="911.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.12%)</title><rect x="98.3252%" y="917" width="0.1168%" height="15" fill="rgb(250,154,43)" fg:x="5049" fg:w="6"/><text x="98.5752%" y="927.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (4 samples, 0.08%)</title><rect x="98.3642%" y="901" width="0.0779%" height="15" fill="rgb(226,43,29)" fg:x="5051" fg:w="4"/><text x="98.6142%" y="911.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (4 samples, 0.08%)</title><rect x="98.3642%" y="885" width="0.0779%" height="15" fill="rgb(249,228,39)" fg:x="5051" fg:w="4"/><text x="98.6142%" y="895.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (4 samples, 0.08%)</title><rect x="98.3642%" y="869" width="0.0779%" height="15" fill="rgb(216,79,43)" fg:x="5051" fg:w="4"/><text x="98.6142%" y="879.50"></text></g><g><title>rutin::cmd::dispatch::_{{closure}} (2,123 samples, 41.34%)</title><rect x="57.2347%" y="997" width="41.3437%" height="15" fill="rgb(228,95,12)" fg:x="2939" fg:w="2123"/><text x="57.4847%" y="1007.50">rutin::cmd::dispatch::_{{closure}}</text></g><g><title>rutin::cmd::dispatch::_{{closure}}::_{{closure}} (1,829 samples, 35.62%)</title><rect x="62.9601%" y="981" width="35.6183%" height="15" fill="rgb(249,221,15)" fg:x="3233" fg:w="1829"/><text x="63.2101%" y="991.50">rutin::cmd::dispatch::_{{closure}}::_{{closure}}</text></g><g><title>rutin::cmd::dispatch::_{{closure}}::_{{closure}}::_{{closure}} (1,685 samples, 32.81%)</title><rect x="65.7644%" y="965" width="32.8140%" height="15" fill="rgb(233,34,13)" fg:x="3377" fg:w="1685"/><text x="66.0144%" y="975.50">rutin::cmd::dispatch::_{{closure}}::_{{closure}}::_{{..</text></g><g><title>rutin::util::uppercase (19 samples, 0.37%)</title><rect x="98.2084%" y="949" width="0.3700%" height="15" fill="rgb(214,103,39)" fg:x="5043" fg:w="19"/><text x="98.4584%" y="959.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::make_ascii_uppercase (13 samples, 0.25%)</title><rect x="98.3252%" y="933" width="0.2532%" height="15" fill="rgb(251,126,39)" fg:x="5049" fg:w="13"/><text x="98.5752%" y="943.50"></text></g><g><title>core::num::&lt;impl u8&gt;::make_ascii_uppercase (7 samples, 0.14%)</title><rect x="98.4421%" y="917" width="0.1363%" height="15" fill="rgb(214,216,36)" fg:x="5055" fg:w="7"/><text x="98.6921%" y="927.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_uppercase (6 samples, 0.12%)</title><rect x="98.4615%" y="901" width="0.1168%" height="15" fill="rgb(220,221,8)" fg:x="5056" fg:w="6"/><text x="98.7115%" y="911.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_lowercase (3 samples, 0.06%)</title><rect x="98.5200%" y="885" width="0.0584%" height="15" fill="rgb(240,216,3)" fg:x="5059" fg:w="3"/><text x="98.7700%" y="895.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::advance (1 samples, 0.02%)</title><rect x="99.6105%" y="933" width="0.0195%" height="15" fill="rgb(232,218,17)" fg:x="5115" fg:w="1"/><text x="99.8605%" y="943.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (1 samples, 0.02%)</title><rect x="99.6105%" y="917" width="0.0195%" height="15" fill="rgb(229,163,45)" fg:x="5115" fg:w="1"/><text x="99.8605%" y="927.50"></text></g><g><title>&lt;tokio::io::util::write_buf::WriteBuf&lt;W,B&gt; as core::future::future::Future&gt;::poll (2 samples, 0.04%)</title><rect x="99.6105%" y="949" width="0.0389%" height="15" fill="rgb(231,110,42)" fg:x="5115" fg:w="2"/><text x="99.8605%" y="959.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (1 samples, 0.02%)</title><rect x="99.6300%" y="933" width="0.0195%" height="15" fill="rgb(208,170,48)" fg:x="5116" fg:w="1"/><text x="99.8800%" y="943.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (1 samples, 0.02%)</title><rect x="99.6300%" y="917" width="0.0195%" height="15" fill="rgb(239,116,25)" fg:x="5116" fg:w="1"/><text x="99.8800%" y="927.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::advance_mut (1 samples, 0.02%)</title><rect x="99.7079%" y="901" width="0.0195%" height="15" fill="rgb(219,200,50)" fg:x="5120" fg:w="1"/><text x="99.9579%" y="911.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (2 samples, 0.04%)</title><rect x="99.7274%" y="901" width="0.0389%" height="15" fill="rgb(245,200,0)" fg:x="5121" fg:w="2"/><text x="99.9774%" y="911.50"></text></g><g><title>bytes::bytes_mut::BytesMut::capacity (2 samples, 0.04%)</title><rect x="99.7274%" y="885" width="0.0389%" height="15" fill="rgb(245,119,33)" fg:x="5121" fg:w="2"/><text x="99.9774%" y="895.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (6 samples, 0.12%)</title><rect x="99.7079%" y="933" width="0.1168%" height="15" fill="rgb(231,125,12)" fg:x="5120" fg:w="6"/><text x="99.9579%" y="943.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (6 samples, 0.12%)</title><rect x="99.7079%" y="917" width="0.1168%" height="15" fill="rgb(216,96,41)" fg:x="5120" fg:w="6"/><text x="99.9579%" y="927.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.06%)</title><rect x="99.7663%" y="901" width="0.0584%" height="15" fill="rgb(248,43,45)" fg:x="5123" fg:w="3"/><text x="100.0163%" y="911.50"></text></g><g><title>[libc.so.6] (2 samples, 0.04%)</title><rect x="99.7858%" y="885" width="0.0389%" height="15" fill="rgb(217,222,7)" fg:x="5124" fg:w="2"/><text x="100.0358%" y="895.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::advance_mut (2 samples, 0.04%)</title><rect x="99.8247%" y="885" width="0.0389%" height="15" fill="rgb(233,28,6)" fg:x="5126" fg:w="2"/><text x="100.0747%" y="895.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (1 samples, 0.02%)</title><rect x="99.8637%" y="885" width="0.0195%" height="15" fill="rgb(231,218,15)" fg:x="5128" fg:w="1"/><text x="100.1137%" y="895.50"></text></g><g><title>bytes::bytes_mut::BytesMut::spare_capacity_mut (1 samples, 0.02%)</title><rect x="99.8832%" y="885" width="0.0195%" height="15" fill="rgb(226,171,48)" fg:x="5129" fg:w="1"/><text x="100.1332%" y="895.50"></text></g><g><title>&lt;tokio::task::task_local::TaskLocalFuture&lt;T,F&gt; as core::future::future::Future&gt;::poll::_{{closure}} (2,529 samples, 49.25%)</title><rect x="50.6719%" y="1029" width="49.2502%" height="15" fill="rgb(235,201,9)" fg:x="2602" fg:w="2529"/><text x="50.9219%" y="1039.50">&lt;tokio::task::task_local::TaskLocalFuture&lt;T,F&gt; as core::future::future::Future&gt;::..</text></g><g><title>rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}}::_{{closure}}::_{{closure}}::_{{closure}} (2,529 samples, 49.25%)</title><rect x="50.6719%" y="1013" width="49.2502%" height="15" fill="rgb(217,80,15)" fg:x="2602" fg:w="2529"/><text x="50.9219%" y="1023.50">rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}}::_{{closure}}::_{{closure}}..</text></g><g><title>rutin::server::connection::Connection&lt;S&gt;::write_frames::_{{closure}} (69 samples, 1.34%)</title><rect x="98.5784%" y="997" width="1.3437%" height="15" fill="rgb(219,152,8)" fg:x="5062" fg:w="69"/><text x="98.8284%" y="1007.50"></text></g><g><title>rutin::server::connection::Connection&lt;S&gt;::write_frames::_{{closure}}::_{{closure}} (60 samples, 1.17%)</title><rect x="98.7537%" y="981" width="1.1685%" height="15" fill="rgb(243,107,38)" fg:x="5071" fg:w="60"/><text x="99.0037%" y="991.50"></text></g><g><title>rutin::server::connection::Connection&lt;S&gt;::write_frames::_{{closure}}::_{{closure}}::_{{closure}} (25 samples, 0.49%)</title><rect x="99.4352%" y="965" width="0.4869%" height="15" fill="rgb(231,17,5)" fg:x="5106" fg:w="25"/><text x="99.6852%" y="975.50"></text></g><g><title>rutin::frame::Resp3&lt;B,S&gt;::encode_buf (14 samples, 0.27%)</title><rect x="99.6495%" y="949" width="0.2726%" height="15" fill="rgb(209,25,54)" fg:x="5117" fg:w="14"/><text x="99.8995%" y="959.50"></text></g><g><title>bytes::buf::buf_mut::BufMut::put_u8 (5 samples, 0.10%)</title><rect x="99.8247%" y="933" width="0.0974%" height="15" fill="rgb(219,0,2)" fg:x="5126" fg:w="5"/><text x="100.0747%" y="943.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (5 samples, 0.10%)</title><rect x="99.8247%" y="917" width="0.0974%" height="15" fill="rgb(246,9,5)" fg:x="5126" fg:w="5"/><text x="100.0747%" y="927.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (5 samples, 0.10%)</title><rect x="99.8247%" y="901" width="0.0974%" height="15" fill="rgb(226,159,4)" fg:x="5126" fg:w="5"/><text x="100.0747%" y="911.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="99.9026%" y="885" width="0.0195%" height="15" fill="rgb(219,175,34)" fg:x="5130" fg:w="1"/><text x="100.1526%" y="895.50"></text></g><g><title>rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}}::_{{closure}} (2,530 samples, 49.27%)</title><rect x="50.6719%" y="1093" width="49.2697%" height="15" fill="rgb(236,10,46)" fg:x="2602" fg:w="2530"/><text x="50.9219%" y="1103.50">rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}}::_{{closure}}</text></g><g><title>rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}}::_{{closure}}::_{{closure}} (2,530 samples, 49.27%)</title><rect x="50.6719%" y="1077" width="49.2697%" height="15" fill="rgb(240,211,16)" fg:x="2602" fg:w="2530"/><text x="50.9219%" y="1087.50">rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}}::_{{closure}}::_{{closure}}</text></g><g><title>&lt;tokio::task::task_local::TaskLocalFuture&lt;T,F&gt; as core::future::future::Future&gt;::poll (2,530 samples, 49.27%)</title><rect x="50.6719%" y="1061" width="49.2697%" height="15" fill="rgb(205,3,43)" fg:x="2602" fg:w="2530"/><text x="50.9219%" y="1071.50">&lt;tokio::task::task_local::TaskLocalFuture&lt;T,F&gt; as core::future::future::Future&gt;::..</text></g><g><title>tokio::task::task_local::LocalKey&lt;T&gt;::scope_inner (2,530 samples, 49.27%)</title><rect x="50.6719%" y="1045" width="49.2697%" height="15" fill="rgb(245,7,22)" fg:x="2602" fg:w="2530"/><text x="50.9219%" y="1055.50">tokio::task::task_local::LocalKey&lt;T&gt;::scope_inner</text></g><g><title>core::mem::drop (1 samples, 0.02%)</title><rect x="99.9221%" y="1029" width="0.0195%" height="15" fill="rgb(239,132,32)" fg:x="5131" fg:w="1"/><text x="100.1721%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::task::task_local::LocalKey&lt;T&gt;::scope_inner::Guard&lt;u64&gt;&gt; (1 samples, 0.02%)</title><rect x="99.9221%" y="1013" width="0.0195%" height="15" fill="rgb(228,202,34)" fg:x="5131" fg:w="1"/><text x="100.1721%" y="1023.50"></text></g><g><title>&lt;tokio::task::task_local::LocalKey&lt;T&gt;::scope_inner::Guard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="99.9221%" y="997" width="0.0195%" height="15" fill="rgb(254,200,22)" fg:x="5131" fg:w="1"/><text x="100.1721%" y="1007.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.9221%" y="981" width="0.0195%" height="15" fill="rgb(219,10,39)" fg:x="5131" fg:w="1"/><text x="100.1721%" y="991.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.02%)</title><rect x="99.9221%" y="965" width="0.0195%" height="15" fill="rgb(226,210,39)" fg:x="5131" fg:w="1"/><text x="100.1721%" y="975.50"></text></g><g><title>&lt;tokio::task::task_local::LocalKey&lt;T&gt;::scope_inner::Guard&lt;T&gt; as core::ops::drop::Drop&gt;::drop::_{{closure}} (1 samples, 0.02%)</title><rect x="99.9221%" y="949" width="0.0195%" height="15" fill="rgb(208,219,16)" fg:x="5131" fg:w="1"/><text x="100.1721%" y="959.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.02%)</title><rect x="99.9221%" y="933" width="0.0195%" height="15" fill="rgb(216,158,51)" fg:x="5131" fg:w="1"/><text x="100.1721%" y="943.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.02%)</title><rect x="99.9221%" y="917" width="0.0195%" height="15" fill="rgb(233,14,44)" fg:x="5131" fg:w="1"/><text x="100.1721%" y="927.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.02%)</title><rect x="99.9221%" y="901" width="0.0195%" height="15" fill="rgb(237,97,39)" fg:x="5131" fg:w="1"/><text x="100.1721%" y="911.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (2 samples, 0.04%)</title><rect x="99.9416%" y="1045" width="0.0389%" height="15" fill="rgb(218,198,43)" fg:x="5132" fg:w="2"/><text x="100.1916%" y="1055.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 0.04%)</title><rect x="99.9416%" y="1029" width="0.0389%" height="15" fill="rgb(231,104,20)" fg:x="5132" fg:w="2"/><text x="100.1916%" y="1039.50"></text></g><g><title>std::panicking::try (2 samples, 0.04%)</title><rect x="99.9416%" y="1013" width="0.0389%" height="15" fill="rgb(254,36,13)" fg:x="5132" fg:w="2"/><text x="100.1916%" y="1023.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 0.04%)</title><rect x="99.9416%" y="997" width="0.0389%" height="15" fill="rgb(248,14,50)" fg:x="5132" fg:w="2"/><text x="100.1916%" y="1007.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 0.04%)</title><rect x="99.9416%" y="981" width="0.0389%" height="15" fill="rgb(217,107,29)" fg:x="5132" fg:w="2"/><text x="100.1916%" y="991.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (2 samples, 0.04%)</title><rect x="99.9416%" y="965" width="0.0389%" height="15" fill="rgb(251,169,33)" fg:x="5132" fg:w="2"/><text x="100.1916%" y="975.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (2 samples, 0.04%)</title><rect x="99.9416%" y="949" width="0.0389%" height="15" fill="rgb(217,108,32)" fg:x="5132" fg:w="2"/><text x="100.1916%" y="959.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (2 samples, 0.04%)</title><rect x="99.9416%" y="933" width="0.0389%" height="15" fill="rgb(219,66,42)" fg:x="5132" fg:w="2"/><text x="100.1916%" y="943.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (2 samples, 0.04%)</title><rect x="99.9416%" y="917" width="0.0389%" height="15" fill="rgb(206,180,7)" fg:x="5132" fg:w="2"/><text x="100.1916%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::TaskIdGuard&gt; (2 samples, 0.04%)</title><rect x="99.9416%" y="901" width="0.0389%" height="15" fill="rgb(208,226,31)" fg:x="5132" fg:w="2"/><text x="100.1916%" y="911.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (2 samples, 0.04%)</title><rect x="99.9416%" y="885" width="0.0389%" height="15" fill="rgb(218,26,49)" fg:x="5132" fg:w="2"/><text x="100.1916%" y="895.50"></text></g><g><title>tokio::runtime::context::set_current_task_id (2 samples, 0.04%)</title><rect x="99.9416%" y="869" width="0.0389%" height="15" fill="rgb(233,197,48)" fg:x="5132" fg:w="2"/><text x="100.1916%" y="879.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.04%)</title><rect x="99.9416%" y="853" width="0.0389%" height="15" fill="rgb(252,181,51)" fg:x="5132" fg:w="2"/><text x="100.1916%" y="863.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.02%)</title><rect x="99.9611%" y="837" width="0.0195%" height="15" fill="rgb(253,90,19)" fg:x="5133" fg:w="1"/><text x="100.2111%" y="847.50"></text></g><g><title>tokio::runtime::context::CONTEXT::_{{constant}}::_{{closure}} (1 samples, 0.02%)</title><rect x="99.9611%" y="821" width="0.0195%" height="15" fill="rgb(215,171,30)" fg:x="5133" fg:w="1"/><text x="100.2111%" y="831.50"></text></g><g><title>std::sys::thread_local::native::eager::Storage&lt;T&gt;::get (1 samples, 0.02%)</title><rect x="99.9611%" y="805" width="0.0195%" height="15" fill="rgb(214,222,9)" fg:x="5133" fg:w="1"/><text x="100.2111%" y="815.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.02%)</title><rect x="99.9611%" y="789" width="0.0195%" height="15" fill="rgb(223,3,22)" fg:x="5133" fg:w="1"/><text x="100.2111%" y="799.50"></text></g><g><title>all (5,135 samples, 100%)</title><rect x="0.0000%" y="1125" width="100.0000%" height="15" fill="rgb(225,196,46)" fg:x="0" fg:w="5135"/><text x="0.2500%" y="1135.50"></text></g><g><title>tokio-runtime-w (5,135 samples, 100.00%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(209,110,37)" fg:x="0" fg:w="5135"/><text x="0.2500%" y="1119.50">tokio-runtime-w</text></g><g><title>tokio::runtime::task::raw::poll (3 samples, 0.06%)</title><rect x="99.9416%" y="1093" width="0.0584%" height="15" fill="rgb(249,89,12)" fg:x="5132" fg:w="3"/><text x="100.1916%" y="1103.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (3 samples, 0.06%)</title><rect x="99.9416%" y="1077" width="0.0584%" height="15" fill="rgb(226,27,33)" fg:x="5132" fg:w="3"/><text x="100.1916%" y="1087.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (3 samples, 0.06%)</title><rect x="99.9416%" y="1061" width="0.0584%" height="15" fill="rgb(213,82,22)" fg:x="5132" fg:w="3"/><text x="100.1916%" y="1071.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running (1 samples, 0.02%)</title><rect x="99.9805%" y="1045" width="0.0195%" height="15" fill="rgb(248,140,0)" fg:x="5134" fg:w="1"/><text x="100.2305%" y="1055.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (1 samples, 0.02%)</title><rect x="99.9805%" y="1029" width="0.0195%" height="15" fill="rgb(228,106,3)" fg:x="5134" fg:w="1"/><text x="100.2305%" y="1039.50"></text></g></svg></svg>