<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1014" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="997.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="997.00"> </text><svg id="frames" x="10" width="1180" total_samples="3890"><g><title>rutin (1 samples, 0.03%)</title><rect x="0.0000%" y="949" width="0.0257%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="959.50"></text></g><g><title>rutin::server::run::_{{closure}} (1 samples, 0.03%)</title><rect x="0.0000%" y="933" width="0.0257%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="943.50"></text></g><g><title>rutin::shared::Shared::new (1 samples, 0.03%)</title><rect x="0.0000%" y="917" width="0.0257%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="927.50"></text></g><g><title>rutin::shared::script::Script::new (1 samples, 0.03%)</title><rect x="0.0000%" y="901" width="0.0257%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="911.50"></text></g><g><title>&lt;rutin::shared::script::lua::LuaScript as core::default::Default&gt;::default (1 samples, 0.03%)</title><rect x="0.0000%" y="885" width="0.0257%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="895.50"></text></g><g><title>tokio_util::task::spawn_pinned::LocalPoolHandle::new (1 samples, 0.03%)</title><rect x="0.0000%" y="869" width="0.0257%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="879.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.03%)</title><rect x="0.0000%" y="853" width="0.0257%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.03%)</title><rect x="0.0000%" y="837" width="0.0257%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.03%)</title><rect x="0.0000%" y="821" width="0.0257%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.03%)</title><rect x="0.0000%" y="805" width="0.0257%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="0.0000%" y="789" width="0.0257%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.03%)</title><rect x="0.0000%" y="773" width="0.0257%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.03%)</title><rect x="0.0000%" y="757" width="0.0257%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.03%)</title><rect x="0.0000%" y="741" width="0.0257%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.03%)</title><rect x="0.0000%" y="725" width="0.0257%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="1"/><text x="0.2500%" y="735.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.03%)</title><rect x="0.0000%" y="709" width="0.0257%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="719.50"></text></g><g><title>tokio_util::task::spawn_pinned::LocalPoolHandle::new::_{{closure}} (1 samples, 0.03%)</title><rect x="0.0000%" y="693" width="0.0257%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="1"/><text x="0.2500%" y="703.50"></text></g><g><title>tokio_util::task::spawn_pinned::LocalWorkerHandle::new_worker (1 samples, 0.03%)</title><rect x="0.0000%" y="677" width="0.0257%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="1"/><text x="0.2500%" y="687.50"></text></g><g><title>tokio::runtime::builder::Builder::build (1 samples, 0.03%)</title><rect x="0.0000%" y="661" width="0.0257%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="671.50"></text></g><g><title>tokio::runtime::builder::Builder::build_current_thread_runtime (1 samples, 0.03%)</title><rect x="0.0000%" y="645" width="0.0257%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="1"/><text x="0.2500%" y="655.50"></text></g><g><title>tokio::runtime::driver::Driver::new (1 samples, 0.03%)</title><rect x="0.0000%" y="629" width="0.0257%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="639.50"></text></g><g><title>eventfd (1 samples, 0.03%)</title><rect x="0.0000%" y="613" width="0.0257%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::Entered&gt; (1 samples, 0.03%)</title><rect x="0.0514%" y="917" width="0.0257%" height="15" fill="rgb(221,5,38)" fg:x="2" fg:w="1"/><text x="0.3014%" y="927.50"></text></g><g><title>&lt;tracing::span::Entered as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="0.0514%" y="901" width="0.0257%" height="15" fill="rgb(247,18,42)" fg:x="2" fg:w="1"/><text x="0.3014%" y="911.50"></text></g><g><title>tracing::span::Span::do_exit (1 samples, 0.03%)</title><rect x="0.0514%" y="885" width="0.0257%" height="15" fill="rgb(241,131,45)" fg:x="2" fg:w="1"/><text x="0.3014%" y="895.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.03%)</title><rect x="0.0514%" y="869" width="0.0257%" height="15" fill="rgb(249,31,29)" fg:x="2" fg:w="1"/><text x="0.3014%" y="879.50"></text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 0.08%)</title><rect x="0.0257%" y="933" width="0.0771%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="3"/><text x="0.2757%" y="943.50"></text></g><g><title>rutin::server::listener::Listener::run::_{{closure}}::_{{closure}} (1 samples, 0.03%)</title><rect x="0.0771%" y="917" width="0.0257%" height="15" fill="rgb(238,160,17)" fg:x="3" fg:w="1"/><text x="0.3271%" y="927.50"></text></g><g><title>rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}} (1 samples, 0.03%)</title><rect x="0.0771%" y="901" width="0.0257%" height="15" fill="rgb(214,148,48)" fg:x="3" fg:w="1"/><text x="0.3271%" y="911.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="0.1028%" y="245" width="0.0257%" height="15" fill="rgb(232,36,49)" fg:x="4" fg:w="1"/><text x="0.3528%" y="255.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::powf (2 samples, 0.05%)</title><rect x="0.1542%" y="229" width="0.0514%" height="15" fill="rgb(209,103,24)" fg:x="6" fg:w="2"/><text x="0.4042%" y="239.50"></text></g><g><title>pow (2 samples, 0.05%)</title><rect x="0.1542%" y="213" width="0.0514%" height="15" fill="rgb(229,88,8)" fg:x="6" fg:w="2"/><text x="0.4042%" y="223.50"></text></g><g><title>[libm.so.6] (2 samples, 0.05%)</title><rect x="0.1542%" y="197" width="0.0514%" height="15" fill="rgb(213,181,19)" fg:x="6" fg:w="2"/><text x="0.4042%" y="207.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::end_processing_scheduled_tasks (7 samples, 0.18%)</title><rect x="0.1285%" y="245" width="0.1799%" height="15" fill="rgb(254,191,54)" fg:x="5" fg:w="7"/><text x="0.3785%" y="255.50"></text></g><g><title>tokio::runtime::metrics::batch::MetricsBatch::end_processing_scheduled_tasks (4 samples, 0.10%)</title><rect x="0.2057%" y="229" width="0.1028%" height="15" fill="rgb(241,83,37)" fg:x="8" fg:w="4"/><text x="0.4557%" y="239.50"></text></g><g><title>std::time::Instant::elapsed (4 samples, 0.10%)</title><rect x="0.2057%" y="213" width="0.1028%" height="15" fill="rgb(233,36,39)" fg:x="8" fg:w="4"/><text x="0.4557%" y="223.50"></text></g><g><title>std::time::Instant::now (4 samples, 0.10%)</title><rect x="0.2057%" y="197" width="0.1028%" height="15" fill="rgb(226,3,54)" fg:x="8" fg:w="4"/><text x="0.4557%" y="207.50"></text></g><g><title>std::sys::pal::unix::time::Instant::now (4 samples, 0.10%)</title><rect x="0.2057%" y="181" width="0.1028%" height="15" fill="rgb(245,192,40)" fg:x="8" fg:w="4"/><text x="0.4557%" y="191.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (3 samples, 0.08%)</title><rect x="0.2314%" y="165" width="0.0771%" height="15" fill="rgb(238,167,29)" fg:x="9" fg:w="3"/><text x="0.4814%" y="175.50"></text></g><g><title>clock_gettime (3 samples, 0.08%)</title><rect x="0.2314%" y="149" width="0.0771%" height="15" fill="rgb(232,182,51)" fg:x="9" fg:w="3"/><text x="0.4814%" y="159.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::start_processing_scheduled_tasks (1 samples, 0.03%)</title><rect x="0.3085%" y="245" width="0.0257%" height="15" fill="rgb(231,60,39)" fg:x="12" fg:w="1"/><text x="0.5585%" y="255.50"></text></g><g><title>tokio::runtime::metrics::batch::MetricsBatch::start_processing_scheduled_tasks (1 samples, 0.03%)</title><rect x="0.3085%" y="229" width="0.0257%" height="15" fill="rgb(208,69,12)" fg:x="12" fg:w="1"/><text x="0.5585%" y="239.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.03%)</title><rect x="0.3085%" y="213" width="0.0257%" height="15" fill="rgb(235,93,37)" fg:x="12" fg:w="1"/><text x="0.5585%" y="223.50"></text></g><g><title>std::sys::pal::unix::time::Instant::now (1 samples, 0.03%)</title><rect x="0.3085%" y="197" width="0.0257%" height="15" fill="rgb(213,116,39)" fg:x="12" fg:w="1"/><text x="0.5585%" y="207.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.03%)</title><rect x="0.3085%" y="181" width="0.0257%" height="15" fill="rgb(222,207,29)" fg:x="12" fg:w="1"/><text x="0.5585%" y="191.50"></text></g><g><title>clock_gettime (1 samples, 0.03%)</title><rect x="0.3085%" y="165" width="0.0257%" height="15" fill="rgb(206,96,30)" fg:x="12" fg:w="1"/><text x="0.5585%" y="175.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.03%)</title><rect x="0.3085%" y="149" width="0.0257%" height="15" fill="rgb(218,138,4)" fg:x="12" fg:w="1"/><text x="0.5585%" y="159.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.03%)</title><rect x="0.3342%" y="213" width="0.0257%" height="15" fill="rgb(250,191,14)" fg:x="13" fg:w="1"/><text x="0.5842%" y="223.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.03%)</title><rect x="0.3342%" y="197" width="0.0257%" height="15" fill="rgb(239,60,40)" fg:x="13" fg:w="1"/><text x="0.5842%" y="207.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.03%)</title><rect x="0.3342%" y="181" width="0.0257%" height="15" fill="rgb(206,27,48)" fg:x="13" fg:w="1"/><text x="0.5842%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.03%)</title><rect x="0.3342%" y="165" width="0.0257%" height="15" fill="rgb(225,35,8)" fg:x="13" fg:w="1"/><text x="0.5842%" y="175.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.03%)</title><rect x="0.3342%" y="149" width="0.0257%" height="15" fill="rgb(250,213,24)" fg:x="13" fg:w="1"/><text x="0.5842%" y="159.50"></text></g><g><title>core::mem::replace (1 samples, 0.03%)</title><rect x="0.3342%" y="133" width="0.0257%" height="15" fill="rgb(247,123,22)" fg:x="13" fg:w="1"/><text x="0.5842%" y="143.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="0.3342%" y="117" width="0.0257%" height="15" fill="rgb(231,138,38)" fg:x="13" fg:w="1"/><text x="0.5842%" y="127.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.03%)</title><rect x="0.3599%" y="213" width="0.0257%" height="15" fill="rgb(231,145,46)" fg:x="14" fg:w="1"/><text x="0.6099%" y="223.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (1 samples, 0.03%)</title><rect x="0.3599%" y="197" width="0.0257%" height="15" fill="rgb(251,118,11)" fg:x="14" fg:w="1"/><text x="0.6099%" y="207.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::should_timeout (1 samples, 0.03%)</title><rect x="0.3599%" y="181" width="0.0257%" height="15" fill="rgb(217,147,25)" fg:x="14" fg:w="1"/><text x="0.6099%" y="191.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.03%)</title><rect x="0.3599%" y="165" width="0.0257%" height="15" fill="rgb(247,81,37)" fg:x="14" fg:w="1"/><text x="0.6099%" y="175.50"></text></g><g><title>std::sys::pal::unix::time::Instant::now (1 samples, 0.03%)</title><rect x="0.3599%" y="149" width="0.0257%" height="15" fill="rgb(209,12,38)" fg:x="14" fg:w="1"/><text x="0.6099%" y="159.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.03%)</title><rect x="0.3599%" y="133" width="0.0257%" height="15" fill="rgb(227,1,9)" fg:x="14" fg:w="1"/><text x="0.6099%" y="143.50"></text></g><g><title>clock_gettime (1 samples, 0.03%)</title><rect x="0.3599%" y="117" width="0.0257%" height="15" fill="rgb(248,47,43)" fg:x="14" fg:w="1"/><text x="0.6099%" y="127.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.03%)</title><rect x="0.3599%" y="101" width="0.0257%" height="15" fill="rgb(221,10,30)" fg:x="14" fg:w="1"/><text x="0.6099%" y="111.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (2 samples, 0.05%)</title><rect x="0.3856%" y="181" width="0.0514%" height="15" fill="rgb(210,229,1)" fg:x="15" fg:w="2"/><text x="0.6356%" y="191.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (1 samples, 0.03%)</title><rect x="0.4370%" y="117" width="0.0257%" height="15" fill="rgb(222,148,37)" fg:x="17" fg:w="1"/><text x="0.6870%" y="127.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (1 samples, 0.03%)</title><rect x="0.4370%" y="101" width="0.0257%" height="15" fill="rgb(234,67,33)" fg:x="17" fg:w="1"/><text x="0.6870%" y="111.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (1 samples, 0.03%)</title><rect x="0.4370%" y="85" width="0.0257%" height="15" fill="rgb(247,98,35)" fg:x="17" fg:w="1"/><text x="0.6870%" y="95.50"></text></g><g><title>core::sync::atomic::AtomicI32::load (2 samples, 0.05%)</title><rect x="0.4627%" y="53" width="0.0514%" height="15" fill="rgb(247,138,52)" fg:x="18" fg:w="2"/><text x="0.7127%" y="63.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.05%)</title><rect x="0.4627%" y="37" width="0.0514%" height="15" fill="rgb(213,79,30)" fg:x="18" fg:w="2"/><text x="0.7127%" y="47.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (4 samples, 0.10%)</title><rect x="0.4627%" y="69" width="0.1028%" height="15" fill="rgb(246,177,23)" fg:x="18" fg:w="4"/><text x="0.7127%" y="79.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (2 samples, 0.05%)</title><rect x="0.5141%" y="53" width="0.0514%" height="15" fill="rgb(230,62,27)" fg:x="20" fg:w="2"/><text x="0.7641%" y="63.50"></text></g><g><title>syscall (2 samples, 0.05%)</title><rect x="0.5141%" y="37" width="0.0514%" height="15" fill="rgb(216,154,8)" fg:x="20" fg:w="2"/><text x="0.7641%" y="47.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_condvar (6 samples, 0.15%)</title><rect x="0.4370%" y="181" width="0.1542%" height="15" fill="rgb(244,35,45)" fg:x="17" fg:w="6"/><text x="0.6870%" y="191.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (6 samples, 0.15%)</title><rect x="0.4370%" y="165" width="0.1542%" height="15" fill="rgb(251,115,12)" fg:x="17" fg:w="6"/><text x="0.6870%" y="175.50"></text></g><g><title>parking_lot::condvar::Condvar::wait (6 samples, 0.15%)</title><rect x="0.4370%" y="149" width="0.1542%" height="15" fill="rgb(240,54,50)" fg:x="17" fg:w="6"/><text x="0.6870%" y="159.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (6 samples, 0.15%)</title><rect x="0.4370%" y="133" width="0.1542%" height="15" fill="rgb(233,84,52)" fg:x="17" fg:w="6"/><text x="0.6870%" y="143.50"></text></g><g><title>parking_lot_core::parking_lot::park (5 samples, 0.13%)</title><rect x="0.4627%" y="117" width="0.1285%" height="15" fill="rgb(207,117,47)" fg:x="18" fg:w="5"/><text x="0.7127%" y="127.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (5 samples, 0.13%)</title><rect x="0.4627%" y="101" width="0.1285%" height="15" fill="rgb(249,43,39)" fg:x="18" fg:w="5"/><text x="0.7127%" y="111.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (5 samples, 0.13%)</title><rect x="0.4627%" y="85" width="0.1285%" height="15" fill="rgb(209,38,44)" fg:x="18" fg:w="5"/><text x="0.7127%" y="95.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket (1 samples, 0.03%)</title><rect x="0.5656%" y="69" width="0.0257%" height="15" fill="rgb(236,212,23)" fg:x="22" fg:w="1"/><text x="0.8156%" y="79.50"></text></g><g><title>parking_lot_core::parking_lot::hash (1 samples, 0.03%)</title><rect x="0.5656%" y="53" width="0.0257%" height="15" fill="rgb(242,79,21)" fg:x="22" fg:w="1"/><text x="0.8156%" y="63.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (1 samples, 0.03%)</title><rect x="0.5913%" y="165" width="0.0257%" height="15" fill="rgb(211,96,35)" fg:x="23" fg:w="1"/><text x="0.8413%" y="175.50"></text></g><g><title>core::array::_&lt;impl core::default::Default for [T: 32]&gt;::default (1 samples, 0.03%)</title><rect x="0.5913%" y="149" width="0.0257%" height="15" fill="rgb(253,215,40)" fg:x="23" fg:w="1"/><text x="0.8413%" y="159.50"></text></g><g><title>&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="0.6170%" y="133" width="0.0257%" height="15" fill="rgb(211,81,21)" fg:x="24" fg:w="1"/><text x="0.8670%" y="143.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.03%)</title><rect x="0.6170%" y="117" width="0.0257%" height="15" fill="rgb(208,190,38)" fg:x="24" fg:w="1"/><text x="0.8670%" y="127.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.03%)</title><rect x="0.6170%" y="101" width="0.0257%" height="15" fill="rgb(235,213,38)" fg:x="24" fg:w="1"/><text x="0.8670%" y="111.50"></text></g><g><title>mio::poll::Poll::poll (1 samples, 0.03%)</title><rect x="0.6427%" y="133" width="0.0257%" height="15" fill="rgb(237,122,38)" fg:x="25" fg:w="1"/><text x="0.8927%" y="143.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (1 samples, 0.03%)</title><rect x="0.6427%" y="117" width="0.0257%" height="15" fill="rgb(244,218,35)" fg:x="25" fg:w="1"/><text x="0.8927%" y="127.50"></text></g><g><title>epoll_wait (1 samples, 0.03%)</title><rect x="0.6427%" y="101" width="0.0257%" height="15" fill="rgb(240,68,47)" fg:x="25" fg:w="1"/><text x="0.8927%" y="111.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::set_readiness (1 samples, 0.03%)</title><rect x="0.6684%" y="133" width="0.0257%" height="15" fill="rgb(210,16,53)" fg:x="26" fg:w="1"/><text x="0.9184%" y="143.50"></text></g><g><title>tokio::util::bit::Pack::pack (1 samples, 0.03%)</title><rect x="0.6684%" y="117" width="0.0257%" height="15" fill="rgb(235,124,12)" fg:x="26" fg:w="1"/><text x="0.9184%" y="127.50"></text></g><g><title>tokio::runtime::task::core::Header::get_tracing_id (5 samples, 0.13%)</title><rect x="0.6941%" y="69" width="0.1285%" height="15" fill="rgb(224,169,11)" fg:x="27" fg:w="5"/><text x="0.9441%" y="79.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (5 samples, 0.13%)</title><rect x="0.6941%" y="53" width="0.1285%" height="15" fill="rgb(250,166,2)" fg:x="27" fg:w="5"/><text x="0.9441%" y="63.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (18 samples, 0.46%)</title><rect x="0.3856%" y="213" width="0.4627%" height="15" fill="rgb(242,216,29)" fg:x="15" fg:w="18"/><text x="0.6356%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park (18 samples, 0.46%)</title><rect x="0.3856%" y="197" width="0.4627%" height="15" fill="rgb(230,116,27)" fg:x="15" fg:w="18"/><text x="0.6356%" y="207.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_driver (10 samples, 0.26%)</title><rect x="0.5913%" y="181" width="0.2571%" height="15" fill="rgb(228,99,48)" fg:x="23" fg:w="10"/><text x="0.8413%" y="191.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (9 samples, 0.23%)</title><rect x="0.6170%" y="165" width="0.2314%" height="15" fill="rgb(253,11,6)" fg:x="24" fg:w="9"/><text x="0.8670%" y="175.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (9 samples, 0.23%)</title><rect x="0.6170%" y="149" width="0.2314%" height="15" fill="rgb(247,143,39)" fg:x="24" fg:w="9"/><text x="0.8670%" y="159.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (6 samples, 0.15%)</title><rect x="0.6941%" y="133" width="0.1542%" height="15" fill="rgb(236,97,10)" fg:x="27" fg:w="6"/><text x="0.9441%" y="143.50"></text></g><g><title>tokio::util::wake_list::WakeList::wake_all (6 samples, 0.15%)</title><rect x="0.6941%" y="117" width="0.1542%" height="15" fill="rgb(233,208,19)" fg:x="27" fg:w="6"/><text x="0.9441%" y="127.50"></text></g><g><title>core::task::wake::Waker::wake (6 samples, 0.15%)</title><rect x="0.6941%" y="101" width="0.1542%" height="15" fill="rgb(216,164,2)" fg:x="27" fg:w="6"/><text x="0.9441%" y="111.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (6 samples, 0.15%)</title><rect x="0.6941%" y="85" width="0.1542%" height="15" fill="rgb(220,129,5)" fg:x="27" fg:w="6"/><text x="0.9441%" y="95.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (1 samples, 0.03%)</title><rect x="0.8226%" y="69" width="0.0257%" height="15" fill="rgb(242,17,10)" fg:x="32" fg:w="1"/><text x="1.0726%" y="79.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::drop_reference (1 samples, 0.03%)</title><rect x="0.8226%" y="53" width="0.0257%" height="15" fill="rgb(242,107,0)" fg:x="32" fg:w="1"/><text x="1.0726%" y="63.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (1 samples, 0.03%)</title><rect x="0.8226%" y="37" width="0.0257%" height="15" fill="rgb(251,28,31)" fg:x="32" fg:w="1"/><text x="1.0726%" y="47.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (21 samples, 0.54%)</title><rect x="0.3342%" y="229" width="0.5398%" height="15" fill="rgb(233,223,10)" fg:x="13" fg:w="21"/><text x="0.5842%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked_local (1 samples, 0.03%)</title><rect x="0.8483%" y="213" width="0.0257%" height="15" fill="rgb(215,21,27)" fg:x="33" fg:w="1"/><text x="1.0983%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (1 samples, 0.03%)</title><rect x="0.8483%" y="197" width="0.0257%" height="15" fill="rgb(232,23,21)" fg:x="33" fg:w="1"/><text x="1.0983%" y="207.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::notify_should_wakeup (1 samples, 0.03%)</title><rect x="0.8483%" y="181" width="0.0257%" height="15" fill="rgb(244,5,23)" fg:x="33" fg:w="1"/><text x="1.0983%" y="191.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::maintenance (2 samples, 0.05%)</title><rect x="0.8740%" y="229" width="0.0514%" height="15" fill="rgb(226,81,46)" fg:x="34" fg:w="2"/><text x="1.1240%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="0.8997%" y="213" width="0.0257%" height="15" fill="rgb(247,70,30)" fg:x="35" fg:w="1"/><text x="1.1497%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (1 samples, 0.03%)</title><rect x="0.8997%" y="197" width="0.0257%" height="15" fill="rgb(212,68,19)" fg:x="35" fg:w="1"/><text x="1.1497%" y="207.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.03%)</title><rect x="0.8997%" y="181" width="0.0257%" height="15" fill="rgb(240,187,13)" fg:x="35" fg:w="1"/><text x="1.1497%" y="191.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park (24 samples, 0.62%)</title><rect x="0.3342%" y="245" width="0.6170%" height="15" fill="rgb(223,113,26)" fg:x="13" fg:w="24"/><text x="0.5842%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_to_parked (1 samples, 0.03%)</title><rect x="0.9254%" y="229" width="0.0257%" height="15" fill="rgb(206,192,2)" fg:x="36" fg:w="1"/><text x="1.1754%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::transition_worker_to_parked (1 samples, 0.03%)</title><rect x="0.9254%" y="213" width="0.0257%" height="15" fill="rgb(241,108,4)" fg:x="36" fg:w="1"/><text x="1.1754%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (1 samples, 0.03%)</title><rect x="0.9254%" y="197" width="0.0257%" height="15" fill="rgb(247,173,49)" fg:x="36" fg:w="1"/><text x="1.1754%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (1 samples, 0.03%)</title><rect x="0.9254%" y="181" width="0.0257%" height="15" fill="rgb(224,114,35)" fg:x="36" fg:w="1"/><text x="1.1754%" y="191.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="0.9254%" y="165" width="0.0257%" height="15" fill="rgb(245,159,27)" fg:x="36" fg:w="1"/><text x="1.1754%" y="175.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (1 samples, 0.03%)</title><rect x="0.9254%" y="149" width="0.0257%" height="15" fill="rgb(245,172,44)" fg:x="36" fg:w="1"/><text x="1.1754%" y="159.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (1 samples, 0.03%)</title><rect x="0.9254%" y="133" width="0.0257%" height="15" fill="rgb(236,23,11)" fg:x="36" fg:w="1"/><text x="1.1754%" y="143.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::reset_lifo_enabled (1 samples, 0.03%)</title><rect x="0.9512%" y="181" width="0.0257%" height="15" fill="rgb(205,117,38)" fg:x="37" fg:w="1"/><text x="1.2012%" y="191.50"></text></g><g><title>tokio::runtime::coop::budget (3 samples, 0.08%)</title><rect x="0.9512%" y="229" width="0.0771%" height="15" fill="rgb(237,72,25)" fg:x="37" fg:w="3"/><text x="1.2012%" y="239.50"></text></g><g><title>tokio::runtime::coop::with_budget (3 samples, 0.08%)</title><rect x="0.9512%" y="213" width="0.0771%" height="15" fill="rgb(244,70,9)" fg:x="37" fg:w="3"/><text x="1.2012%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::_{{closure}} (3 samples, 0.08%)</title><rect x="0.9512%" y="197" width="0.0771%" height="15" fill="rgb(217,125,39)" fg:x="37" fg:w="3"/><text x="1.2012%" y="207.50"></text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (2 samples, 0.05%)</title><rect x="0.9769%" y="181" width="0.0514%" height="15" fill="rgb(235,36,10)" fg:x="38" fg:w="2"/><text x="1.2269%" y="191.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (2 samples, 0.05%)</title><rect x="0.9769%" y="165" width="0.0514%" height="15" fill="rgb(251,123,47)" fg:x="38" fg:w="2"/><text x="1.2269%" y="175.50"></text></g><g><title>tokio::runtime::task::raw::poll (2 samples, 0.05%)</title><rect x="0.9769%" y="149" width="0.0514%" height="15" fill="rgb(221,13,13)" fg:x="38" fg:w="2"/><text x="1.2269%" y="159.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.03%)</title><rect x="1.0283%" y="197" width="0.0257%" height="15" fill="rgb(238,131,9)" fg:x="40" fg:w="1"/><text x="1.2783%" y="207.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (1 samples, 0.03%)</title><rect x="1.0283%" y="181" width="0.0257%" height="15" fill="rgb(211,50,8)" fg:x="40" fg:w="1"/><text x="1.2783%" y="191.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (5 samples, 0.13%)</title><rect x="0.9512%" y="245" width="0.1285%" height="15" fill="rgb(245,182,24)" fg:x="37" fg:w="5"/><text x="1.2012%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_from_searching (2 samples, 0.05%)</title><rect x="1.0283%" y="229" width="0.0514%" height="15" fill="rgb(242,14,37)" fg:x="40" fg:w="2"/><text x="1.2783%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::transition_worker_from_searching (2 samples, 0.05%)</title><rect x="1.0283%" y="213" width="0.0514%" height="15" fill="rgb(246,228,12)" fg:x="40" fg:w="2"/><text x="1.2783%" y="223.50"></text></g><g><title>syscall (1 samples, 0.03%)</title><rect x="1.0540%" y="197" width="0.0257%" height="15" fill="rgb(213,55,15)" fg:x="41" fg:w="1"/><text x="1.3040%" y="207.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::pack (1 samples, 0.03%)</title><rect x="1.0797%" y="197" width="0.0257%" height="15" fill="rgb(209,9,3)" fg:x="42" fg:w="1"/><text x="1.3297%" y="207.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (2 samples, 0.05%)</title><rect x="1.0797%" y="229" width="0.0514%" height="15" fill="rgb(230,59,30)" fg:x="42" fg:w="2"/><text x="1.3297%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into2 (2 samples, 0.05%)</title><rect x="1.0797%" y="213" width="0.0514%" height="15" fill="rgb(209,121,21)" fg:x="42" fg:w="2"/><text x="1.3297%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::unpack (1 samples, 0.03%)</title><rect x="1.1054%" y="197" width="0.0257%" height="15" fill="rgb(220,109,13)" fg:x="43" fg:w="1"/><text x="1.3554%" y="207.50"></text></g><g><title>[libc.so.6] (41 samples, 1.05%)</title><rect x="0.1028%" y="933" width="1.0540%" height="15" fill="rgb(232,18,1)" fg:x="4" fg:w="41"/><text x="0.3528%" y="943.50"></text></g><g><title>[libc.so.6] (41 samples, 1.05%)</title><rect x="0.1028%" y="917" width="1.0540%" height="15" fill="rgb(215,41,42)" fg:x="4" fg:w="41"/><text x="0.3528%" y="927.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (41 samples, 1.05%)</title><rect x="0.1028%" y="901" width="1.0540%" height="15" fill="rgb(224,123,36)" fg:x="4" fg:w="41"/><text x="0.3528%" y="911.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (41 samples, 1.05%)</title><rect x="0.1028%" y="885" width="1.0540%" height="15" fill="rgb(240,125,3)" fg:x="4" fg:w="41"/><text x="0.3528%" y="895.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (41 samples, 1.05%)</title><rect x="0.1028%" y="869" width="1.0540%" height="15" fill="rgb(205,98,50)" fg:x="4" fg:w="41"/><text x="0.3528%" y="879.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (41 samples, 1.05%)</title><rect x="0.1028%" y="853" width="1.0540%" height="15" fill="rgb(205,185,37)" fg:x="4" fg:w="41"/><text x="0.3528%" y="863.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (41 samples, 1.05%)</title><rect x="0.1028%" y="837" width="1.0540%" height="15" fill="rgb(238,207,15)" fg:x="4" fg:w="41"/><text x="0.3528%" y="847.50"></text></g><g><title>std::panic::catch_unwind (41 samples, 1.05%)</title><rect x="0.1028%" y="821" width="1.0540%" height="15" fill="rgb(213,199,42)" fg:x="4" fg:w="41"/><text x="0.3528%" y="831.50"></text></g><g><title>std::panicking::try (41 samples, 1.05%)</title><rect x="0.1028%" y="805" width="1.0540%" height="15" fill="rgb(235,201,11)" fg:x="4" fg:w="41"/><text x="0.3528%" y="815.50"></text></g><g><title>std::panicking::try::do_call (41 samples, 1.05%)</title><rect x="0.1028%" y="789" width="1.0540%" height="15" fill="rgb(207,46,11)" fg:x="4" fg:w="41"/><text x="0.3528%" y="799.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (41 samples, 1.05%)</title><rect x="0.1028%" y="773" width="1.0540%" height="15" fill="rgb(241,35,35)" fg:x="4" fg:w="41"/><text x="0.3528%" y="783.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (41 samples, 1.05%)</title><rect x="0.1028%" y="757" width="1.0540%" height="15" fill="rgb(243,32,47)" fg:x="4" fg:w="41"/><text x="0.3528%" y="767.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (41 samples, 1.05%)</title><rect x="0.1028%" y="741" width="1.0540%" height="15" fill="rgb(247,202,23)" fg:x="4" fg:w="41"/><text x="0.3528%" y="751.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::_{{closure}} (41 samples, 1.05%)</title><rect x="0.1028%" y="725" width="1.0540%" height="15" fill="rgb(219,102,11)" fg:x="4" fg:w="41"/><text x="0.3528%" y="735.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (41 samples, 1.05%)</title><rect x="0.1028%" y="709" width="1.0540%" height="15" fill="rgb(243,110,44)" fg:x="4" fg:w="41"/><text x="0.3528%" y="719.50"></text></g><g><title>tokio::runtime::blocking::pool::Task::run (41 samples, 1.05%)</title><rect x="0.1028%" y="693" width="1.0540%" height="15" fill="rgb(222,74,54)" fg:x="4" fg:w="41"/><text x="0.3528%" y="703.50"></text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (41 samples, 1.05%)</title><rect x="0.1028%" y="677" width="1.0540%" height="15" fill="rgb(216,99,12)" fg:x="4" fg:w="41"/><text x="0.3528%" y="687.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (41 samples, 1.05%)</title><rect x="0.1028%" y="661" width="1.0540%" height="15" fill="rgb(226,22,26)" fg:x="4" fg:w="41"/><text x="0.3528%" y="671.50"></text></g><g><title>tokio::runtime::task::raw::poll (41 samples, 1.05%)</title><rect x="0.1028%" y="645" width="1.0540%" height="15" fill="rgb(217,163,10)" fg:x="4" fg:w="41"/><text x="0.3528%" y="655.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (41 samples, 1.05%)</title><rect x="0.1028%" y="629" width="1.0540%" height="15" fill="rgb(213,25,53)" fg:x="4" fg:w="41"/><text x="0.3528%" y="639.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (41 samples, 1.05%)</title><rect x="0.1028%" y="613" width="1.0540%" height="15" fill="rgb(252,105,26)" fg:x="4" fg:w="41"/><text x="0.3528%" y="623.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (41 samples, 1.05%)</title><rect x="0.1028%" y="597" width="1.0540%" height="15" fill="rgb(220,39,43)" fg:x="4" fg:w="41"/><text x="0.3528%" y="607.50"></text></g><g><title>std::panic::catch_unwind (41 samples, 1.05%)</title><rect x="0.1028%" y="581" width="1.0540%" height="15" fill="rgb(229,68,48)" fg:x="4" fg:w="41"/><text x="0.3528%" y="591.50"></text></g><g><title>std::panicking::try (41 samples, 1.05%)</title><rect x="0.1028%" y="565" width="1.0540%" height="15" fill="rgb(252,8,32)" fg:x="4" fg:w="41"/><text x="0.3528%" y="575.50"></text></g><g><title>std::panicking::try::do_call (41 samples, 1.05%)</title><rect x="0.1028%" y="549" width="1.0540%" height="15" fill="rgb(223,20,43)" fg:x="4" fg:w="41"/><text x="0.3528%" y="559.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (41 samples, 1.05%)</title><rect x="0.1028%" y="533" width="1.0540%" height="15" fill="rgb(229,81,49)" fg:x="4" fg:w="41"/><text x="0.3528%" y="543.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (41 samples, 1.05%)</title><rect x="0.1028%" y="517" width="1.0540%" height="15" fill="rgb(236,28,36)" fg:x="4" fg:w="41"/><text x="0.3528%" y="527.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (41 samples, 1.05%)</title><rect x="0.1028%" y="501" width="1.0540%" height="15" fill="rgb(249,185,26)" fg:x="4" fg:w="41"/><text x="0.3528%" y="511.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (41 samples, 1.05%)</title><rect x="0.1028%" y="485" width="1.0540%" height="15" fill="rgb(249,174,33)" fg:x="4" fg:w="41"/><text x="0.3528%" y="495.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (41 samples, 1.05%)</title><rect x="0.1028%" y="469" width="1.0540%" height="15" fill="rgb(233,201,37)" fg:x="4" fg:w="41"/><text x="0.3528%" y="479.50"></text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (41 samples, 1.05%)</title><rect x="0.1028%" y="453" width="1.0540%" height="15" fill="rgb(221,78,26)" fg:x="4" fg:w="41"/><text x="0.3528%" y="463.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (41 samples, 1.05%)</title><rect x="0.1028%" y="437" width="1.0540%" height="15" fill="rgb(250,127,30)" fg:x="4" fg:w="41"/><text x="0.3528%" y="447.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::_{{closure}} (41 samples, 1.05%)</title><rect x="0.1028%" y="421" width="1.0540%" height="15" fill="rgb(230,49,44)" fg:x="4" fg:w="41"/><text x="0.3528%" y="431.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (41 samples, 1.05%)</title><rect x="0.1028%" y="405" width="1.0540%" height="15" fill="rgb(229,67,23)" fg:x="4" fg:w="41"/><text x="0.3528%" y="415.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (41 samples, 1.05%)</title><rect x="0.1028%" y="389" width="1.0540%" height="15" fill="rgb(249,83,47)" fg:x="4" fg:w="41"/><text x="0.3528%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}} (41 samples, 1.05%)</title><rect x="0.1028%" y="373" width="1.0540%" height="15" fill="rgb(215,43,3)" fg:x="4" fg:w="41"/><text x="0.3528%" y="383.50"></text></g><g><title>tokio::runtime::context::set_scheduler (41 samples, 1.05%)</title><rect x="0.1028%" y="357" width="1.0540%" height="15" fill="rgb(238,154,13)" fg:x="4" fg:w="41"/><text x="0.3528%" y="367.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (41 samples, 1.05%)</title><rect x="0.1028%" y="341" width="1.0540%" height="15" fill="rgb(219,56,2)" fg:x="4" fg:w="41"/><text x="0.3528%" y="351.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (41 samples, 1.05%)</title><rect x="0.1028%" y="325" width="1.0540%" height="15" fill="rgb(233,0,4)" fg:x="4" fg:w="41"/><text x="0.3528%" y="335.50"></text></g><g><title>tokio::runtime::context::set_scheduler::_{{closure}} (41 samples, 1.05%)</title><rect x="0.1028%" y="309" width="1.0540%" height="15" fill="rgb(235,30,7)" fg:x="4" fg:w="41"/><text x="0.3528%" y="319.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (41 samples, 1.05%)</title><rect x="0.1028%" y="293" width="1.0540%" height="15" fill="rgb(250,79,13)" fg:x="4" fg:w="41"/><text x="0.3528%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}::_{{closure}} (41 samples, 1.05%)</title><rect x="0.1028%" y="277" width="1.0540%" height="15" fill="rgb(211,146,34)" fg:x="4" fg:w="41"/><text x="0.3528%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (41 samples, 1.05%)</title><rect x="0.1028%" y="261" width="1.0540%" height="15" fill="rgb(228,22,38)" fg:x="4" fg:w="41"/><text x="0.3528%" y="271.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::steal_work (3 samples, 0.08%)</title><rect x="1.0797%" y="245" width="0.0771%" height="15" fill="rgb(235,168,5)" fg:x="42" fg:w="3"/><text x="1.3297%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_to_searching (1 samples, 0.03%)</title><rect x="1.1311%" y="229" width="0.0257%" height="15" fill="rgb(221,155,16)" fg:x="44" fg:w="1"/><text x="1.3811%" y="239.50"></text></g><g><title>[libc.so.6] (13 samples, 0.33%)</title><rect x="1.2339%" y="917" width="0.3342%" height="15" fill="rgb(215,215,53)" fg:x="48" fg:w="13"/><text x="1.4839%" y="927.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.05%)</title><rect x="1.8509%" y="901" width="0.0514%" height="15" fill="rgb(223,4,10)" fg:x="72" fg:w="2"/><text x="2.1009%" y="911.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="1.9023%" y="773" width="0.0257%" height="15" fill="rgb(234,103,6)" fg:x="74" fg:w="1"/><text x="2.1523%" y="783.50"></text></g><g><title>&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (2 samples, 0.05%)</title><rect x="1.9023%" y="901" width="0.0514%" height="15" fill="rgb(227,97,0)" fg:x="74" fg:w="2"/><text x="2.1523%" y="911.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 0.05%)</title><rect x="1.9023%" y="885" width="0.0514%" height="15" fill="rgb(234,150,53)" fg:x="74" fg:w="2"/><text x="2.1523%" y="895.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 0.05%)</title><rect x="1.9023%" y="869" width="0.0514%" height="15" fill="rgb(228,201,54)" fg:x="74" fg:w="2"/><text x="2.1523%" y="879.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (2 samples, 0.05%)</title><rect x="1.9023%" y="853" width="0.0514%" height="15" fill="rgb(222,22,37)" fg:x="74" fg:w="2"/><text x="2.1523%" y="863.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (2 samples, 0.05%)</title><rect x="1.9023%" y="837" width="0.0514%" height="15" fill="rgb(237,53,32)" fg:x="74" fg:w="2"/><text x="2.1523%" y="847.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_read_ready (2 samples, 0.05%)</title><rect x="1.9023%" y="821" width="0.0514%" height="15" fill="rgb(233,25,53)" fg:x="74" fg:w="2"/><text x="2.1523%" y="831.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (2 samples, 0.05%)</title><rect x="1.9023%" y="805" width="0.0514%" height="15" fill="rgb(210,40,34)" fg:x="74" fg:w="2"/><text x="2.1523%" y="815.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (2 samples, 0.05%)</title><rect x="1.9023%" y="789" width="0.0514%" height="15" fill="rgb(241,220,44)" fg:x="74" fg:w="2"/><text x="2.1523%" y="799.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (1 samples, 0.03%)</title><rect x="1.9280%" y="773" width="0.0257%" height="15" fill="rgb(235,28,35)" fg:x="75" fg:w="1"/><text x="2.1780%" y="783.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (1 samples, 0.03%)</title><rect x="1.9280%" y="757" width="0.0257%" height="15" fill="rgb(210,56,17)" fg:x="75" fg:w="1"/><text x="2.1780%" y="767.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (1 samples, 0.03%)</title><rect x="1.9280%" y="741" width="0.0257%" height="15" fill="rgb(224,130,29)" fg:x="75" fg:w="1"/><text x="2.1780%" y="751.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (1 samples, 0.03%)</title><rect x="1.9280%" y="725" width="0.0257%" height="15" fill="rgb(235,212,8)" fg:x="75" fg:w="1"/><text x="2.1780%" y="735.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (1 samples, 0.03%)</title><rect x="1.9280%" y="709" width="0.0257%" height="15" fill="rgb(223,33,50)" fg:x="75" fg:w="1"/><text x="2.1780%" y="719.50"></text></g><g><title>[libc.so.6] (149 samples, 3.83%)</title><rect x="1.9537%" y="901" width="3.8303%" height="15" fill="rgb(219,149,13)" fg:x="76" fg:w="149"/><text x="2.2037%" y="911.50">[lib..</text></g><g><title>bytes::bytes_mut::BytesMut::is_empty (1 samples, 0.03%)</title><rect x="5.7841%" y="901" width="0.0257%" height="15" fill="rgb(250,156,29)" fg:x="225" fg:w="1"/><text x="6.0341%" y="911.50"></text></g><g><title>[libc.so.6] (70 samples, 1.80%)</title><rect x="6.1440%" y="885" width="1.7995%" height="15" fill="rgb(216,193,19)" fg:x="239" fg:w="70"/><text x="6.3940%" y="895.50">[..</text></g><g><title>core::ptr::drop_in_place&lt;rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}::{{closure}}&gt; (1 samples, 0.03%)</title><rect x="7.9434%" y="885" width="0.0257%" height="15" fill="rgb(216,135,14)" fg:x="309" fg:w="1"/><text x="8.1934%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::Span&gt; (1 samples, 0.03%)</title><rect x="7.9692%" y="885" width="0.0257%" height="15" fill="rgb(241,47,5)" fg:x="310" fg:w="1"/><text x="8.2192%" y="895.50"></text></g><g><title>&lt;tracing::span::Span as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="7.9692%" y="869" width="0.0257%" height="15" fill="rgb(233,42,35)" fg:x="310" fg:w="1"/><text x="8.2192%" y="879.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="11.7738%" y="853" width="0.0257%" height="15" fill="rgb(231,13,6)" fg:x="458" fg:w="1"/><text x="12.0238%" y="863.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (2 samples, 0.05%)</title><rect x="11.8509%" y="773" width="0.0514%" height="15" fill="rgb(207,181,40)" fg:x="461" fg:w="2"/><text x="12.1009%" y="783.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (2 samples, 0.05%)</title><rect x="11.8509%" y="757" width="0.0514%" height="15" fill="rgb(254,173,49)" fg:x="461" fg:w="2"/><text x="12.1009%" y="767.50"></text></g><g><title>mio::sys::unix::stateless_io_source::IoSourceState::do_io (2 samples, 0.05%)</title><rect x="11.8509%" y="741" width="0.0514%" height="15" fill="rgb(221,1,38)" fg:x="461" fg:w="2"/><text x="12.1009%" y="751.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::_{{closure}} (2 samples, 0.05%)</title><rect x="11.8509%" y="725" width="0.0514%" height="15" fill="rgb(206,124,46)" fg:x="461" fg:w="2"/><text x="12.1009%" y="735.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (2 samples, 0.05%)</title><rect x="11.8509%" y="709" width="0.0514%" height="15" fill="rgb(249,21,11)" fg:x="461" fg:w="2"/><text x="12.1009%" y="719.50"></text></g><g><title>std::sys_common::net::TcpStream::read (2 samples, 0.05%)</title><rect x="11.8509%" y="693" width="0.0514%" height="15" fill="rgb(222,201,40)" fg:x="461" fg:w="2"/><text x="12.1009%" y="703.50"></text></g><g><title>std::sys::pal::unix::net::Socket::read (2 samples, 0.05%)</title><rect x="11.8509%" y="677" width="0.0514%" height="15" fill="rgb(235,61,29)" fg:x="461" fg:w="2"/><text x="12.1009%" y="687.50"></text></g><g><title>std::sys::pal::unix::net::Socket::recv_with_flags (2 samples, 0.05%)</title><rect x="11.8509%" y="661" width="0.0514%" height="15" fill="rgb(219,207,3)" fg:x="461" fg:w="2"/><text x="12.1009%" y="671.50"></text></g><g><title>recv (2 samples, 0.05%)</title><rect x="11.8509%" y="645" width="0.0514%" height="15" fill="rgb(222,56,46)" fg:x="461" fg:w="2"/><text x="12.1009%" y="655.50"></text></g><g><title>tokio::runtime::task::core::Header::get_tracing_id (1 samples, 0.03%)</title><rect x="11.9280%" y="693" width="0.0257%" height="15" fill="rgb(239,76,54)" fg:x="464" fg:w="1"/><text x="12.1780%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.03%)</title><rect x="11.9280%" y="677" width="0.0257%" height="15" fill="rgb(231,124,27)" fg:x="464" fg:w="1"/><text x="12.1780%" y="687.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (2 samples, 0.05%)</title><rect x="11.9280%" y="725" width="0.0514%" height="15" fill="rgb(249,195,6)" fg:x="464" fg:w="2"/><text x="12.1780%" y="735.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (2 samples, 0.05%)</title><rect x="11.9280%" y="709" width="0.0514%" height="15" fill="rgb(237,174,47)" fg:x="464" fg:w="2"/><text x="12.1780%" y="719.50"></text></g><g><title>tokio::runtime::task::state::State::ref_inc (1 samples, 0.03%)</title><rect x="11.9537%" y="693" width="0.0257%" height="15" fill="rgb(206,201,31)" fg:x="465" fg:w="1"/><text x="12.2037%" y="703.50"></text></g><g><title>futures_task::noop_waker::noop (1 samples, 0.03%)</title><rect x="11.9794%" y="725" width="0.0257%" height="15" fill="rgb(231,57,52)" fg:x="466" fg:w="1"/><text x="12.2294%" y="735.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (1 samples, 0.03%)</title><rect x="12.0051%" y="725" width="0.0257%" height="15" fill="rgb(248,177,22)" fg:x="467" fg:w="1"/><text x="12.2551%" y="735.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (1 samples, 0.03%)</title><rect x="12.0051%" y="709" width="0.0257%" height="15" fill="rgb(215,211,37)" fg:x="467" fg:w="1"/><text x="12.2551%" y="719.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (1 samples, 0.03%)</title><rect x="12.0051%" y="693" width="0.0257%" height="15" fill="rgb(241,128,51)" fg:x="467" fg:w="1"/><text x="12.2551%" y="703.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (1 samples, 0.03%)</title><rect x="12.0051%" y="677" width="0.0257%" height="15" fill="rgb(227,165,31)" fg:x="467" fg:w="1"/><text x="12.2551%" y="687.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (1 samples, 0.03%)</title><rect x="12.0051%" y="661" width="0.0257%" height="15" fill="rgb(228,167,24)" fg:x="467" fg:w="1"/><text x="12.2551%" y="671.50"></text></g><g><title>&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (10 samples, 0.26%)</title><rect x="11.7995%" y="853" width="0.2571%" height="15" fill="rgb(228,143,12)" fg:x="459" fg:w="10"/><text x="12.0495%" y="863.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (8 samples, 0.21%)</title><rect x="11.8509%" y="837" width="0.2057%" height="15" fill="rgb(249,149,8)" fg:x="461" fg:w="8"/><text x="12.1009%" y="847.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (8 samples, 0.21%)</title><rect x="11.8509%" y="821" width="0.2057%" height="15" fill="rgb(243,35,44)" fg:x="461" fg:w="8"/><text x="12.1009%" y="831.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (8 samples, 0.21%)</title><rect x="11.8509%" y="805" width="0.2057%" height="15" fill="rgb(246,89,9)" fg:x="461" fg:w="8"/><text x="12.1009%" y="815.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (8 samples, 0.21%)</title><rect x="11.8509%" y="789" width="0.2057%" height="15" fill="rgb(233,213,13)" fg:x="461" fg:w="8"/><text x="12.1009%" y="799.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_read_ready (6 samples, 0.15%)</title><rect x="11.9023%" y="773" width="0.1542%" height="15" fill="rgb(233,141,41)" fg:x="463" fg:w="6"/><text x="12.1523%" y="783.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (6 samples, 0.15%)</title><rect x="11.9023%" y="757" width="0.1542%" height="15" fill="rgb(239,167,4)" fg:x="463" fg:w="6"/><text x="12.1523%" y="767.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (6 samples, 0.15%)</title><rect x="11.9023%" y="741" width="0.1542%" height="15" fill="rgb(209,217,16)" fg:x="463" fg:w="6"/><text x="12.1523%" y="751.50"></text></g><g><title>tokio::runtime::io::driver::Direction::mask (1 samples, 0.03%)</title><rect x="12.0308%" y="725" width="0.0257%" height="15" fill="rgb(219,88,35)" fg:x="468" fg:w="1"/><text x="12.2808%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::{{closure}}::{{closure}}::{{closure}}::_decode_async&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}&gt; (2 samples, 0.05%)</title><rect x="12.0566%" y="853" width="0.0514%" height="15" fill="rgb(220,193,23)" fg:x="469" fg:w="2"/><text x="12.3066%" y="863.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::remaining (1 samples, 0.03%)</title><rect x="19.4602%" y="789" width="0.0257%" height="15" fill="rgb(230,90,52)" fg:x="757" fg:w="1"/><text x="19.7102%" y="799.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::remaining (1 samples, 0.03%)</title><rect x="19.4602%" y="773" width="0.0257%" height="15" fill="rgb(252,106,19)" fg:x="757" fg:w="1"/><text x="19.7102%" y="783.50"></text></g><g><title>bytes::bytes_mut::BytesMut::len (1 samples, 0.03%)</title><rect x="19.4602%" y="757" width="0.0257%" height="15" fill="rgb(206,74,20)" fg:x="757" fg:w="1"/><text x="19.7102%" y="767.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (3 samples, 0.08%)</title><rect x="19.4859%" y="789" width="0.0771%" height="15" fill="rgb(230,138,44)" fg:x="758" fg:w="3"/><text x="19.7359%" y="799.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (3 samples, 0.08%)</title><rect x="19.4859%" y="773" width="0.0771%" height="15" fill="rgb(235,182,43)" fg:x="758" fg:w="3"/><text x="19.7359%" y="783.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (8 samples, 0.21%)</title><rect x="19.4087%" y="805" width="0.2057%" height="15" fill="rgb(242,16,51)" fg:x="755" fg:w="8"/><text x="19.6587%" y="815.50"></text></g><g><title>core::fmt::Arguments::new_v1 (2 samples, 0.05%)</title><rect x="19.5630%" y="789" width="0.0514%" height="15" fill="rgb(248,9,4)" fg:x="761" fg:w="2"/><text x="19.8130%" y="799.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.05%)</title><rect x="19.6144%" y="805" width="0.0514%" height="15" fill="rgb(210,31,22)" fg:x="763" fg:w="2"/><text x="19.8644%" y="815.50"></text></g><g><title>[libc.so.6] (55 samples, 1.41%)</title><rect x="19.6658%" y="805" width="1.4139%" height="15" fill="rgb(239,54,39)" fg:x="765" fg:w="55"/><text x="19.9158%" y="815.50"></text></g><g><title>bytes::bytes::Bytes::with_vtable (18 samples, 0.46%)</title><rect x="21.2082%" y="789" width="0.4627%" height="15" fill="rgb(230,99,41)" fg:x="825" fg:w="18"/><text x="21.4582%" y="799.50"></text></g><g><title>bytes::bytes_mut::BytesMut::freeze (29 samples, 0.75%)</title><rect x="21.0797%" y="805" width="0.7455%" height="15" fill="rgb(253,106,12)" fg:x="820" fg:w="29"/><text x="21.3297%" y="815.50"></text></g><g><title>bytes::bytes_mut::BytesMut::kind (6 samples, 0.15%)</title><rect x="21.6710%" y="789" width="0.1542%" height="15" fill="rgb(213,46,41)" fg:x="843" fg:w="6"/><text x="21.9210%" y="799.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (3 samples, 0.08%)</title><rect x="21.9280%" y="773" width="0.0771%" height="15" fill="rgb(215,133,35)" fg:x="853" fg:w="3"/><text x="22.1780%" y="783.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (6 samples, 0.15%)</title><rect x="21.9023%" y="789" width="0.1542%" height="15" fill="rgb(213,28,5)" fg:x="852" fg:w="6"/><text x="22.1523%" y="799.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.05%)</title><rect x="22.0051%" y="773" width="0.0514%" height="15" fill="rgb(215,77,49)" fg:x="856" fg:w="2"/><text x="22.2551%" y="783.50"></text></g><g><title>bytes::bytes_mut::BytesMut::len (2 samples, 0.05%)</title><rect x="22.0566%" y="789" width="0.0514%" height="15" fill="rgb(248,100,22)" fg:x="858" fg:w="2"/><text x="22.3066%" y="799.50"></text></g><g><title>_mi_page_malloc (3 samples, 0.08%)</title><rect x="22.1337%" y="645" width="0.0771%" height="15" fill="rgb(208,67,9)" fg:x="861" fg:w="3"/><text x="22.3837%" y="655.50"></text></g><g><title>_mi_page_malloc_zero (3 samples, 0.08%)</title><rect x="22.1337%" y="629" width="0.0771%" height="15" fill="rgb(219,133,21)" fg:x="861" fg:w="3"/><text x="22.3837%" y="639.50"></text></g><g><title>bytes::bytes_mut::BytesMut::promote_to_shared (6 samples, 0.15%)</title><rect x="22.1337%" y="773" width="0.1542%" height="15" fill="rgb(246,46,29)" fg:x="861" fg:w="6"/><text x="22.3837%" y="783.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (6 samples, 0.15%)</title><rect x="22.1337%" y="757" width="0.1542%" height="15" fill="rgb(246,185,52)" fg:x="861" fg:w="6"/><text x="22.3837%" y="767.50"></text></g><g><title>alloc::alloc::exchange_malloc (6 samples, 0.15%)</title><rect x="22.1337%" y="741" width="0.1542%" height="15" fill="rgb(252,136,11)" fg:x="861" fg:w="6"/><text x="22.3837%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.15%)</title><rect x="22.1337%" y="725" width="0.1542%" height="15" fill="rgb(219,138,53)" fg:x="861" fg:w="6"/><text x="22.3837%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.15%)</title><rect x="22.1337%" y="709" width="0.1542%" height="15" fill="rgb(211,51,23)" fg:x="861" fg:w="6"/><text x="22.3837%" y="719.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.15%)</title><rect x="22.1337%" y="693" width="0.1542%" height="15" fill="rgb(247,221,28)" fg:x="861" fg:w="6"/><text x="22.3837%" y="703.50"></text></g><g><title>__rust_alloc (6 samples, 0.15%)</title><rect x="22.1337%" y="677" width="0.1542%" height="15" fill="rgb(251,222,45)" fg:x="861" fg:w="6"/><text x="22.3837%" y="687.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (6 samples, 0.15%)</title><rect x="22.1337%" y="661" width="0.1542%" height="15" fill="rgb(217,162,53)" fg:x="861" fg:w="6"/><text x="22.3837%" y="671.50"></text></g><g><title>mi_heap_malloc_aligned_at (3 samples, 0.08%)</title><rect x="22.2108%" y="645" width="0.0771%" height="15" fill="rgb(229,93,14)" fg:x="864" fg:w="3"/><text x="22.4608%" y="655.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at (3 samples, 0.08%)</title><rect x="22.2108%" y="629" width="0.0771%" height="15" fill="rgb(209,67,49)" fg:x="864" fg:w="3"/><text x="22.4608%" y="639.50"></text></g><g><title>bytes::bytes_mut::BytesMut::shallow_clone (72 samples, 1.85%)</title><rect x="22.1080%" y="789" width="1.8509%" height="15" fill="rgb(213,87,29)" fg:x="860" fg:w="72"/><text x="22.3580%" y="799.50">b..</text></g><g><title>bytes::bytes_mut::increment_shared (65 samples, 1.67%)</title><rect x="22.2879%" y="773" width="1.6710%" height="15" fill="rgb(205,151,52)" fg:x="867" fg:w="65"/><text x="22.5379%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.03%)</title><rect x="23.9332%" y="757" width="0.0257%" height="15" fill="rgb(253,215,39)" fg:x="931" fg:w="1"/><text x="24.1832%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.03%)</title><rect x="23.9332%" y="741" width="0.0257%" height="15" fill="rgb(221,220,41)" fg:x="931" fg:w="1"/><text x="24.1832%" y="751.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (87 samples, 2.24%)</title><rect x="21.8252%" y="805" width="2.2365%" height="15" fill="rgb(218,133,21)" fg:x="849" fg:w="87"/><text x="22.0752%" y="815.50">b..</text></g><g><title>core::fmt::Arguments::new_v1 (4 samples, 0.10%)</title><rect x="23.9589%" y="789" width="0.1028%" height="15" fill="rgb(221,193,43)" fg:x="932" fg:w="4"/><text x="24.2089%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::BytesMut&gt; (52 samples, 1.34%)</title><rect x="24.0617%" y="805" width="1.3368%" height="15" fill="rgb(240,128,52)" fg:x="936" fg:w="52"/><text x="24.3117%" y="815.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (48 samples, 1.23%)</title><rect x="24.1645%" y="789" width="1.2339%" height="15" fill="rgb(253,114,12)" fg:x="940" fg:w="48"/><text x="24.4145%" y="799.50"></text></g><g><title>bytes::bytes_mut::release_shared (47 samples, 1.21%)</title><rect x="24.1902%" y="773" width="1.2082%" height="15" fill="rgb(215,223,47)" fg:x="941" fg:w="47"/><text x="24.4402%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_line_async&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}&gt; (1 samples, 0.03%)</title><rect x="25.3985%" y="805" width="0.0257%" height="15" fill="rgb(248,225,23)" fg:x="988" fg:w="1"/><text x="25.6485%" y="815.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (3 samples, 0.08%)</title><rect x="25.4242%" y="805" width="0.0771%" height="15" fill="rgb(250,108,0)" fg:x="989" fg:w="3"/><text x="25.6742%" y="815.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (4 samples, 0.10%)</title><rect x="28.7918%" y="773" width="0.1028%" height="15" fill="rgb(228,208,7)" fg:x="1120" fg:w="4"/><text x="29.0418%" y="783.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (2 samples, 0.05%)</title><rect x="28.8432%" y="757" width="0.0514%" height="15" fill="rgb(244,45,10)" fg:x="1122" fg:w="2"/><text x="29.0932%" y="767.50"></text></g><g><title>bytes::bytes_mut::BytesMut::kind (1 samples, 0.03%)</title><rect x="28.8689%" y="741" width="0.0257%" height="15" fill="rgb(207,125,25)" fg:x="1123" fg:w="1"/><text x="29.1189%" y="751.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (2 samples, 0.05%)</title><rect x="29.1260%" y="741" width="0.0514%" height="15" fill="rgb(210,195,18)" fg:x="1133" fg:w="2"/><text x="29.3760%" y="751.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (7 samples, 0.18%)</title><rect x="29.0488%" y="757" width="0.1799%" height="15" fill="rgb(249,80,12)" fg:x="1130" fg:w="7"/><text x="29.2988%" y="767.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.05%)</title><rect x="29.1774%" y="741" width="0.0514%" height="15" fill="rgb(221,65,9)" fg:x="1135" fg:w="2"/><text x="29.4274%" y="751.50"></text></g><g><title>bytes::bytes_mut::BytesMut::len (3 samples, 0.08%)</title><rect x="29.2288%" y="757" width="0.0771%" height="15" fill="rgb(235,49,36)" fg:x="1137" fg:w="3"/><text x="29.4788%" y="767.50"></text></g><g><title>bytes::bytes_mut::increment_shared (51 samples, 1.31%)</title><rect x="29.3316%" y="741" width="1.3111%" height="15" fill="rgb(225,32,20)" fg:x="1141" fg:w="51"/><text x="29.5816%" y="751.50"></text></g><g><title>bytes::bytes_mut::BytesMut::shallow_clone (54 samples, 1.39%)</title><rect x="29.3059%" y="757" width="1.3882%" height="15" fill="rgb(215,141,46)" fg:x="1140" fg:w="54"/><text x="29.5559%" y="767.50"></text></g><g><title>core::ptr::read (2 samples, 0.05%)</title><rect x="30.6427%" y="741" width="0.0514%" height="15" fill="rgb(250,160,47)" fg:x="1192" fg:w="2"/><text x="30.8927%" y="751.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (72 samples, 1.85%)</title><rect x="28.8946%" y="773" width="1.8509%" height="15" fill="rgb(216,222,40)" fg:x="1124" fg:w="72"/><text x="29.1446%" y="783.50">b..</text></g><g><title>core::fmt::Arguments::new_v1 (2 samples, 0.05%)</title><rect x="30.6941%" y="757" width="0.0514%" height="15" fill="rgb(234,217,39)" fg:x="1194" fg:w="2"/><text x="30.9441%" y="767.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="30.7455%" y="741" width="0.0257%" height="15" fill="rgb(207,178,40)" fg:x="1196" fg:w="1"/><text x="30.9955%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (1 samples, 0.03%)</title><rect x="30.7969%" y="693" width="0.0257%" height="15" fill="rgb(221,136,13)" fg:x="1198" fg:w="1"/><text x="31.0469%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.03%)</title><rect x="30.7969%" y="677" width="0.0257%" height="15" fill="rgb(249,199,10)" fg:x="1198" fg:w="1"/><text x="31.0469%" y="687.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (1 samples, 0.03%)</title><rect x="31.1568%" y="661" width="0.0257%" height="15" fill="rgb(249,222,13)" fg:x="1212" fg:w="1"/><text x="31.4068%" y="671.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (1 samples, 0.03%)</title><rect x="31.1568%" y="645" width="0.0257%" height="15" fill="rgb(244,185,38)" fg:x="1212" fg:w="1"/><text x="31.4068%" y="655.50"></text></g><g><title>&lt;memchr::vector::SensibleMoveMask as memchr::vector::MoveMask&gt;::has_non_zero (1 samples, 0.03%)</title><rect x="31.3625%" y="613" width="0.0257%" height="15" fill="rgb(236,202,9)" fg:x="1220" fg:w="1"/><text x="31.6125%" y="623.50"></text></g><g><title>core::ops::function::Fn::call (1 samples, 0.03%)</title><rect x="31.3882%" y="613" width="0.0257%" height="15" fill="rgb(250,229,37)" fg:x="1221" fg:w="1"/><text x="31.6382%" y="623.50"></text></g><g><title>&lt;memchr::vector::SensibleMoveMask as memchr::vector::MoveMask&gt;::first_offset (1 samples, 0.03%)</title><rect x="31.3882%" y="597" width="0.0257%" height="15" fill="rgb(206,174,23)" fg:x="1221" fg:w="1"/><text x="31.6382%" y="607.50"></text></g><g><title>core::num::&lt;impl u32&gt;::trailing_zeros (1 samples, 0.03%)</title><rect x="31.3882%" y="581" width="0.0257%" height="15" fill="rgb(211,33,43)" fg:x="1221" fg:w="1"/><text x="31.6382%" y="591.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (17 samples, 0.44%)</title><rect x="31.1825%" y="661" width="0.4370%" height="15" fill="rgb(245,58,50)" fg:x="1213" fg:w="17"/><text x="31.4325%" y="671.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (17 samples, 0.44%)</title><rect x="31.1825%" y="645" width="0.4370%" height="15" fill="rgb(244,68,36)" fg:x="1213" fg:w="17"/><text x="31.4325%" y="655.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (12 samples, 0.31%)</title><rect x="31.3111%" y="629" width="0.3085%" height="15" fill="rgb(232,229,15)" fg:x="1218" fg:w="12"/><text x="31.5611%" y="639.50"></text></g><g><title>memchr::vector::x86avx2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m256i&gt;::movemask (8 samples, 0.21%)</title><rect x="31.4139%" y="613" width="0.2057%" height="15" fill="rgb(254,30,23)" fg:x="1222" fg:w="8"/><text x="31.6639%" y="623.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (8 samples, 0.21%)</title><rect x="31.4139%" y="597" width="0.2057%" height="15" fill="rgb(235,160,14)" fg:x="1222" fg:w="8"/><text x="31.6639%" y="607.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (23 samples, 0.59%)</title><rect x="31.0540%" y="677" width="0.5913%" height="15" fill="rgb(212,155,44)" fg:x="1208" fg:w="23"/><text x="31.3040%" y="687.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_sse2 (1 samples, 0.03%)</title><rect x="31.6195%" y="661" width="0.0257%" height="15" fill="rgb(226,2,50)" fg:x="1230" fg:w="1"/><text x="31.8695%" y="671.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (1 samples, 0.03%)</title><rect x="31.6195%" y="645" width="0.0257%" height="15" fill="rgb(234,177,6)" fg:x="1230" fg:w="1"/><text x="31.8695%" y="655.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (1 samples, 0.03%)</title><rect x="31.6195%" y="629" width="0.0257%" height="15" fill="rgb(217,24,9)" fg:x="1230" fg:w="1"/><text x="31.8695%" y="639.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::load_unaligned (1 samples, 0.03%)</title><rect x="31.6195%" y="613" width="0.0257%" height="15" fill="rgb(220,13,46)" fg:x="1230" fg:w="1"/><text x="31.8695%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.03%)</title><rect x="31.6195%" y="597" width="0.0257%" height="15" fill="rgb(239,221,27)" fg:x="1230" fg:w="1"/><text x="31.8695%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="31.6195%" y="581" width="0.0257%" height="15" fill="rgb(222,198,25)" fg:x="1230" fg:w="1"/><text x="31.8695%" y="591.50"></text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_line_async::_{{closure}} (241 samples, 6.20%)</title><rect x="25.5013%" y="805" width="6.1954%" height="15" fill="rgb(211,99,13)" fg:x="992" fg:w="241"/><text x="25.7513%" y="815.50">rutin::f..</text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_line (181 samples, 4.65%)</title><rect x="27.0437%" y="789" width="4.6530%" height="15" fill="rgb(232,111,31)" fg:x="1052" fg:w="181"/><text x="27.2937%" y="799.50">rutin..</text></g><g><title>memchr::memchr::memchr (37 samples, 0.95%)</title><rect x="30.7455%" y="773" width="0.9512%" height="15" fill="rgb(245,82,37)" fg:x="1196" fg:w="37"/><text x="30.9955%" y="783.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (37 samples, 0.95%)</title><rect x="30.7455%" y="757" width="0.9512%" height="15" fill="rgb(227,149,46)" fg:x="1196" fg:w="37"/><text x="30.9955%" y="767.50"></text></g><g><title>memchr::memchr::memchr::_{{closure}} (36 samples, 0.93%)</title><rect x="30.7712%" y="741" width="0.9254%" height="15" fill="rgb(218,36,50)" fg:x="1197" fg:w="36"/><text x="31.0212%" y="751.50"></text></g><g><title>memchr::memchr::memchr_raw (36 samples, 0.93%)</title><rect x="30.7712%" y="725" width="0.9254%" height="15" fill="rgb(226,80,48)" fg:x="1197" fg:w="36"/><text x="31.0212%" y="735.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (36 samples, 0.93%)</title><rect x="30.7712%" y="709" width="0.9254%" height="15" fill="rgb(238,224,15)" fg:x="1197" fg:w="36"/><text x="31.0212%" y="719.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (34 samples, 0.87%)</title><rect x="30.8226%" y="693" width="0.8740%" height="15" fill="rgb(241,136,10)" fg:x="1199" fg:w="34"/><text x="31.0726%" y="703.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::new_unchecked (2 samples, 0.05%)</title><rect x="31.6452%" y="677" width="0.0514%" height="15" fill="rgb(208,32,45)" fg:x="1231" fg:w="2"/><text x="31.8952%" y="687.50"></text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::get_u8 (5 samples, 0.13%)</title><rect x="31.6967%" y="805" width="0.1285%" height="15" fill="rgb(207,135,9)" fg:x="1233" fg:w="5"/><text x="31.9467%" y="815.50"></text></g><g><title>bytes::buf::buf_impl::Buf::get_u8 (5 samples, 0.13%)</title><rect x="31.6967%" y="789" width="0.1285%" height="15" fill="rgb(206,86,44)" fg:x="1233" fg:w="5"/><text x="31.9467%" y="799.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (4 samples, 0.10%)</title><rect x="31.7224%" y="773" width="0.1028%" height="15" fill="rgb(245,177,15)" fg:x="1234" fg:w="4"/><text x="31.9724%" y="783.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (4 samples, 0.10%)</title><rect x="31.7224%" y="757" width="0.1028%" height="15" fill="rgb(206,64,50)" fg:x="1234" fg:w="4"/><text x="31.9724%" y="767.50"></text></g><g><title>bytes::bytes_mut::BytesMut::kind (1 samples, 0.03%)</title><rect x="31.7995%" y="741" width="0.0257%" height="15" fill="rgb(234,36,40)" fg:x="1237" fg:w="1"/><text x="32.0495%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3 samples, 0.08%)</title><rect x="31.9794%" y="709" width="0.0771%" height="15" fill="rgb(213,64,8)" fg:x="1244" fg:w="3"/><text x="32.2294%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.08%)</title><rect x="31.9794%" y="693" width="0.0771%" height="15" fill="rgb(210,75,36)" fg:x="1244" fg:w="3"/><text x="32.2294%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3 samples, 0.08%)</title><rect x="31.9794%" y="677" width="0.0771%" height="15" fill="rgb(229,88,21)" fg:x="1244" fg:w="3"/><text x="32.2294%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.08%)</title><rect x="31.9794%" y="661" width="0.0771%" height="15" fill="rgb(252,204,47)" fg:x="1244" fg:w="3"/><text x="32.2294%" y="671.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="32.0051%" y="645" width="0.0514%" height="15" fill="rgb(208,77,27)" fg:x="1245" fg:w="2"/><text x="32.2551%" y="655.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::chunk_mut (4 samples, 0.10%)</title><rect x="31.9794%" y="773" width="0.1028%" height="15" fill="rgb(221,76,26)" fg:x="1244" fg:w="4"/><text x="32.2294%" y="783.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::chunk_mut (4 samples, 0.10%)</title><rect x="31.9794%" y="757" width="0.1028%" height="15" fill="rgb(225,139,18)" fg:x="1244" fg:w="4"/><text x="32.2294%" y="767.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (4 samples, 0.10%)</title><rect x="31.9794%" y="741" width="0.1028%" height="15" fill="rgb(230,137,11)" fg:x="1244" fg:w="4"/><text x="32.2294%" y="751.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (4 samples, 0.10%)</title><rect x="31.9794%" y="725" width="0.1028%" height="15" fill="rgb(212,28,1)" fg:x="1244" fg:w="4"/><text x="32.2294%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.03%)</title><rect x="32.0566%" y="709" width="0.0257%" height="15" fill="rgb(248,164,17)" fg:x="1247" fg:w="1"/><text x="32.3066%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="32.0566%" y="693" width="0.0257%" height="15" fill="rgb(222,171,42)" fg:x="1247" fg:w="1"/><text x="32.3066%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="32.0566%" y="677" width="0.0257%" height="15" fill="rgb(243,84,45)" fg:x="1247" fg:w="1"/><text x="32.3066%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1 samples, 0.03%)</title><rect x="32.0566%" y="661" width="0.0257%" height="15" fill="rgb(252,49,23)" fg:x="1247" fg:w="1"/><text x="32.3066%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.03%)</title><rect x="32.0566%" y="645" width="0.0257%" height="15" fill="rgb(215,19,7)" fg:x="1247" fg:w="1"/><text x="32.3066%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="32.0566%" y="629" width="0.0257%" height="15" fill="rgb(238,81,41)" fg:x="1247" fg:w="1"/><text x="32.3066%" y="639.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="32.0566%" y="613" width="0.0257%" height="15" fill="rgb(210,199,37)" fg:x="1247" fg:w="1"/><text x="32.3066%" y="623.50"></text></g><g><title>__rust_alloc (1 samples, 0.03%)</title><rect x="32.0566%" y="597" width="0.0257%" height="15" fill="rgb(244,192,49)" fg:x="1247" fg:w="1"/><text x="32.3066%" y="607.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.03%)</title><rect x="32.0566%" y="581" width="0.0257%" height="15" fill="rgb(226,211,11)" fg:x="1247" fg:w="1"/><text x="32.3066%" y="591.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.03%)</title><rect x="32.0566%" y="565" width="0.0257%" height="15" fill="rgb(236,162,54)" fg:x="1247" fg:w="1"/><text x="32.3066%" y="575.50"></text></g><g><title>_mi_page_malloc_zero (1 samples, 0.03%)</title><rect x="32.0566%" y="549" width="0.0257%" height="15" fill="rgb(220,229,9)" fg:x="1247" fg:w="1"/><text x="32.3066%" y="559.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (15 samples, 0.39%)</title><rect x="32.1594%" y="709" width="0.3856%" height="15" fill="rgb(250,87,22)" fg:x="1251" fg:w="15"/><text x="32.4094%" y="719.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (15 samples, 0.39%)</title><rect x="32.1594%" y="693" width="0.3856%" height="15" fill="rgb(239,43,17)" fg:x="1251" fg:w="15"/><text x="32.4094%" y="703.50"></text></g><g><title>mio::sys::unix::stateless_io_source::IoSourceState::do_io (15 samples, 0.39%)</title><rect x="32.1594%" y="677" width="0.3856%" height="15" fill="rgb(231,177,25)" fg:x="1251" fg:w="15"/><text x="32.4094%" y="687.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::_{{closure}} (15 samples, 0.39%)</title><rect x="32.1594%" y="661" width="0.3856%" height="15" fill="rgb(219,179,1)" fg:x="1251" fg:w="15"/><text x="32.4094%" y="671.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (15 samples, 0.39%)</title><rect x="32.1594%" y="645" width="0.3856%" height="15" fill="rgb(238,219,53)" fg:x="1251" fg:w="15"/><text x="32.4094%" y="655.50"></text></g><g><title>std::sys_common::net::TcpStream::read (15 samples, 0.39%)</title><rect x="32.1594%" y="629" width="0.3856%" height="15" fill="rgb(232,167,36)" fg:x="1251" fg:w="15"/><text x="32.4094%" y="639.50"></text></g><g><title>std::sys::pal::unix::net::Socket::read (15 samples, 0.39%)</title><rect x="32.1594%" y="613" width="0.3856%" height="15" fill="rgb(244,19,51)" fg:x="1251" fg:w="15"/><text x="32.4094%" y="623.50"></text></g><g><title>std::sys::pal::unix::net::Socket::recv_with_flags (15 samples, 0.39%)</title><rect x="32.1594%" y="597" width="0.3856%" height="15" fill="rgb(224,6,22)" fg:x="1251" fg:w="15"/><text x="32.4094%" y="607.50"></text></g><g><title>recv (15 samples, 0.39%)</title><rect x="32.1594%" y="581" width="0.3856%" height="15" fill="rgb(224,145,5)" fg:x="1251" fg:w="15"/><text x="32.4094%" y="591.50"></text></g><g><title>[libc.so.6] (4 samples, 0.10%)</title><rect x="32.4422%" y="565" width="0.1028%" height="15" fill="rgb(234,130,49)" fg:x="1262" fg:w="4"/><text x="32.6922%" y="575.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (1 samples, 0.03%)</title><rect x="32.5450%" y="677" width="0.0257%" height="15" fill="rgb(254,6,2)" fg:x="1266" fg:w="1"/><text x="32.7950%" y="687.50"></text></g><g><title>tokio::runtime::context::budget (1 samples, 0.03%)</title><rect x="32.5450%" y="661" width="0.0257%" height="15" fill="rgb(208,96,46)" fg:x="1266" fg:w="1"/><text x="32.7950%" y="671.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.03%)</title><rect x="32.5450%" y="645" width="0.0257%" height="15" fill="rgb(239,3,39)" fg:x="1266" fg:w="1"/><text x="32.7950%" y="655.50"></text></g><g><title>tokio::runtime::context::budget::_{{closure}} (1 samples, 0.03%)</title><rect x="32.5450%" y="629" width="0.0257%" height="15" fill="rgb(233,210,1)" fg:x="1266" fg:w="1"/><text x="32.7950%" y="639.50"></text></g><g><title>tokio::runtime::coop::poll_proceed::_{{closure}} (1 samples, 0.03%)</title><rect x="32.5450%" y="613" width="0.0257%" height="15" fill="rgb(244,137,37)" fg:x="1266" fg:w="1"/><text x="32.7950%" y="623.50"></text></g><g><title>tokio::runtime::coop::Budget::decrement (1 samples, 0.03%)</title><rect x="32.5450%" y="597" width="0.0257%" height="15" fill="rgb(240,136,2)" fg:x="1266" fg:w="1"/><text x="32.7950%" y="607.50"></text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::need_bytes_async::_{{closure}} (30 samples, 0.77%)</title><rect x="31.8252%" y="805" width="0.7712%" height="15" fill="rgb(239,18,37)" fg:x="1238" fg:w="30"/><text x="32.0752%" y="815.50"></text></g><g><title>&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (24 samples, 0.62%)</title><rect x="31.9794%" y="789" width="0.6170%" height="15" fill="rgb(218,185,22)" fg:x="1244" fg:w="24"/><text x="32.2294%" y="799.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (20 samples, 0.51%)</title><rect x="32.0823%" y="773" width="0.5141%" height="15" fill="rgb(225,218,4)" fg:x="1248" fg:w="20"/><text x="32.3323%" y="783.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (20 samples, 0.51%)</title><rect x="32.0823%" y="757" width="0.5141%" height="15" fill="rgb(230,182,32)" fg:x="1248" fg:w="20"/><text x="32.3323%" y="767.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (19 samples, 0.49%)</title><rect x="32.1080%" y="741" width="0.4884%" height="15" fill="rgb(242,56,43)" fg:x="1249" fg:w="19"/><text x="32.3580%" y="751.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (19 samples, 0.49%)</title><rect x="32.1080%" y="725" width="0.4884%" height="15" fill="rgb(233,99,24)" fg:x="1249" fg:w="19"/><text x="32.3580%" y="735.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_read_ready (2 samples, 0.05%)</title><rect x="32.5450%" y="709" width="0.0514%" height="15" fill="rgb(234,209,42)" fg:x="1266" fg:w="2"/><text x="32.7950%" y="719.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (2 samples, 0.05%)</title><rect x="32.5450%" y="693" width="0.0514%" height="15" fill="rgb(227,7,12)" fg:x="1266" fg:w="2"/><text x="32.7950%" y="703.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (1 samples, 0.03%)</title><rect x="32.5707%" y="677" width="0.0257%" height="15" fill="rgb(245,203,43)" fg:x="1267" fg:w="1"/><text x="32.8207%" y="687.50"></text></g><g><title>tokio::runtime::io::driver::Direction::mask (1 samples, 0.03%)</title><rect x="32.5707%" y="661" width="0.0257%" height="15" fill="rgb(238,205,33)" fg:x="1267" fg:w="1"/><text x="32.8207%" y="671.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as snafu::OptionExt&lt;T&gt;&gt;::with_context (2 samples, 0.05%)</title><rect x="32.6992%" y="789" width="0.0514%" height="15" fill="rgb(231,56,7)" fg:x="1272" fg:w="2"/><text x="32.9492%" y="799.50"></text></g><g><title>&lt;usize as core::ops::arith::AddAssign&gt;::add_assign (1 samples, 0.03%)</title><rect x="32.8535%" y="757" width="0.0257%" height="15" fill="rgb(244,186,29)" fg:x="1278" fg:w="1"/><text x="33.1035%" y="767.50"></text></g><g><title>&lt;usize as core::ops::arith::MulAssign&gt;::mul_assign (1 samples, 0.03%)</title><rect x="32.8792%" y="757" width="0.0257%" height="15" fill="rgb(234,111,31)" fg:x="1279" fg:w="1"/><text x="33.1292%" y="767.50"></text></g><g><title>atoi::ascii_to_digit (6 samples, 0.15%)</title><rect x="32.9049%" y="757" width="0.1542%" height="15" fill="rgb(241,149,10)" fg:x="1280" fg:w="6"/><text x="33.1549%" y="767.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (6 samples, 0.15%)</title><rect x="33.0591%" y="757" width="0.1542%" height="15" fill="rgb(249,206,44)" fg:x="1286" fg:w="6"/><text x="33.3091%" y="767.50"></text></g><g><title>&lt;I as atoi::FromRadix10SignedChecked&gt;::from_radix_10_signed_checked::_{{closure}} (6 samples, 0.15%)</title><rect x="33.0591%" y="741" width="0.1542%" height="15" fill="rgb(251,153,30)" fg:x="1286" fg:w="6"/><text x="33.3091%" y="751.50"></text></g><g><title>atoi::Sign::try_from (2 samples, 0.05%)</title><rect x="33.1620%" y="725" width="0.0514%" height="15" fill="rgb(239,152,38)" fg:x="1290" fg:w="2"/><text x="33.4120%" y="735.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (732 samples, 18.82%)</title><rect x="14.4216%" y="837" width="18.8175%" height="15" fill="rgb(249,139,47)" fg:x="561" fg:w="732"/><text x="14.6716%" y="847.50">&lt;core::pin::Pin&lt;P&gt; as core::f..</text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::_{{closure}}::_{{closure}}::_{{closure}}::_decode_async::_{{closure}} (732 samples, 18.82%)</title><rect x="14.4216%" y="821" width="18.8175%" height="15" fill="rgb(244,64,35)" fg:x="561" fg:w="732"/><text x="14.6716%" y="831.50">rutin::frame::Resp3&lt;bytes::by..</text></g><g><title>rutin::util::atoi (25 samples, 0.64%)</title><rect x="32.5964%" y="805" width="0.6427%" height="15" fill="rgb(216,46,15)" fg:x="1268" fg:w="25"/><text x="32.8464%" y="815.50"></text></g><g><title>atoi::atoi (19 samples, 0.49%)</title><rect x="32.7506%" y="789" width="0.4884%" height="15" fill="rgb(250,74,19)" fg:x="1274" fg:w="19"/><text x="33.0006%" y="799.50"></text></g><g><title>&lt;I as atoi::FromRadix10SignedChecked&gt;::from_radix_10_signed_checked (19 samples, 0.49%)</title><rect x="32.7506%" y="773" width="0.4884%" height="15" fill="rgb(249,42,33)" fg:x="1274" fg:w="19"/><text x="33.0006%" y="783.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::first (1 samples, 0.03%)</title><rect x="33.2134%" y="757" width="0.0257%" height="15" fill="rgb(242,149,17)" fg:x="1292" fg:w="1"/><text x="33.4634%" y="767.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.05%)</title><rect x="33.2391%" y="837" width="0.0514%" height="15" fill="rgb(244,29,21)" fg:x="1293" fg:w="2"/><text x="33.4891%" y="847.50"></text></g><g><title>[libc.so.6] (30 samples, 0.77%)</title><rect x="33.2905%" y="837" width="0.7712%" height="15" fill="rgb(220,130,37)" fg:x="1295" fg:w="30"/><text x="33.5405%" y="847.50"></text></g><g><title>_mi_page_malloc (5 samples, 0.13%)</title><rect x="34.2416%" y="709" width="0.1285%" height="15" fill="rgb(211,67,2)" fg:x="1332" fg:w="5"/><text x="34.4916%" y="719.50"></text></g><g><title>_mi_page_malloc_zero (2 samples, 0.05%)</title><rect x="34.3188%" y="693" width="0.0514%" height="15" fill="rgb(235,68,52)" fg:x="1335" fg:w="2"/><text x="34.5688%" y="703.50"></text></g><g><title>mi_heap_malloc_aligned_at (10 samples, 0.26%)</title><rect x="34.3702%" y="709" width="0.2571%" height="15" fill="rgb(246,142,3)" fg:x="1337" fg:w="10"/><text x="34.6202%" y="719.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at (10 samples, 0.26%)</title><rect x="34.3702%" y="693" width="0.2571%" height="15" fill="rgb(241,25,7)" fg:x="1337" fg:w="10"/><text x="34.6202%" y="703.50"></text></g><g><title>_mi_heap_get_free_small_page (1 samples, 0.03%)</title><rect x="34.6015%" y="677" width="0.0257%" height="15" fill="rgb(242,119,39)" fg:x="1346" fg:w="1"/><text x="34.8515%" y="687.50"></text></g><g><title>_mi_deferred_free (7 samples, 0.18%)</title><rect x="34.8072%" y="645" width="0.1799%" height="15" fill="rgb(241,98,45)" fg:x="1354" fg:w="7"/><text x="35.0572%" y="655.50"></text></g><g><title>_mi_heap_delayed_free_partial (8 samples, 0.21%)</title><rect x="34.9871%" y="645" width="0.2057%" height="15" fill="rgb(254,28,30)" fg:x="1361" fg:w="8"/><text x="35.2371%" y="655.50"></text></g><g><title>_mi_free_delayed_block (2 samples, 0.05%)</title><rect x="35.1414%" y="629" width="0.0514%" height="15" fill="rgb(241,142,54)" fg:x="1367" fg:w="2"/><text x="35.3914%" y="639.50"></text></g><g><title>_mi_page_free_collect (2 samples, 0.05%)</title><rect x="35.1414%" y="613" width="0.0514%" height="15" fill="rgb(222,85,15)" fg:x="1367" fg:w="2"/><text x="35.3914%" y="623.50"></text></g><g><title>_mi_page_thread_free_collect (2 samples, 0.05%)</title><rect x="35.1414%" y="597" width="0.0514%" height="15" fill="rgb(210,85,47)" fg:x="1367" fg:w="2"/><text x="35.3914%" y="607.50"></text></g><g><title>mi_block_set_next (1 samples, 0.03%)</title><rect x="35.1671%" y="581" width="0.0257%" height="15" fill="rgb(224,206,25)" fg:x="1368" fg:w="1"/><text x="35.4171%" y="591.50"></text></g><g><title>mi_block_set_nextx (1 samples, 0.03%)</title><rect x="35.1671%" y="565" width="0.0257%" height="15" fill="rgb(243,201,19)" fg:x="1368" fg:w="1"/><text x="35.4171%" y="575.50"></text></g><g><title>_mi_malloc_generic (26 samples, 0.67%)</title><rect x="34.6787%" y="661" width="0.6684%" height="15" fill="rgb(236,59,4)" fg:x="1349" fg:w="26"/><text x="34.9287%" y="671.50"></text></g><g><title>mi_find_page (6 samples, 0.15%)</title><rect x="35.1928%" y="645" width="0.1542%" height="15" fill="rgb(254,179,45)" fg:x="1369" fg:w="6"/><text x="35.4428%" y="655.50"></text></g><g><title>mi_find_free_page (5 samples, 0.13%)</title><rect x="35.2185%" y="629" width="0.1285%" height="15" fill="rgb(226,14,10)" fg:x="1370" fg:w="5"/><text x="35.4685%" y="639.50"></text></g><g><title>_mi_page_free_collect (2 samples, 0.05%)</title><rect x="35.2956%" y="613" width="0.0514%" height="15" fill="rgb(244,27,41)" fg:x="1373" fg:w="2"/><text x="35.5456%" y="623.50"></text></g><g><title>_mi_heap_malloc_zero (30 samples, 0.77%)</title><rect x="34.6787%" y="693" width="0.7712%" height="15" fill="rgb(235,35,32)" fg:x="1349" fg:w="30"/><text x="34.9287%" y="703.50"></text></g><g><title>_mi_heap_malloc_zero_ex (30 samples, 0.77%)</title><rect x="34.6787%" y="677" width="0.7712%" height="15" fill="rgb(218,68,31)" fg:x="1349" fg:w="30"/><text x="34.9287%" y="687.50"></text></g><g><title>mi_heap_malloc_small_zero (4 samples, 0.10%)</title><rect x="35.3470%" y="661" width="0.1028%" height="15" fill="rgb(207,120,37)" fg:x="1375" fg:w="4"/><text x="35.5970%" y="671.50"></text></g><g><title>_mi_page_malloc_zero (4 samples, 0.10%)</title><rect x="35.3470%" y="645" width="0.1028%" height="15" fill="rgb(227,98,0)" fg:x="1375" fg:w="4"/><text x="35.5970%" y="655.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (34 samples, 0.87%)</title><rect x="34.6272%" y="709" width="0.8740%" height="15" fill="rgb(207,7,3)" fg:x="1347" fg:w="34"/><text x="34.8772%" y="719.50"></text></g><g><title>mi_malloc_is_naturally_aligned (2 samples, 0.05%)</title><rect x="35.4499%" y="693" width="0.0514%" height="15" fill="rgb(206,98,19)" fg:x="1379" fg:w="2"/><text x="35.6999%" y="703.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (59 samples, 1.52%)</title><rect x="34.0617%" y="837" width="1.5167%" height="15" fill="rgb(217,5,26)" fg:x="1325" fg:w="59"/><text x="34.3117%" y="847.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (59 samples, 1.52%)</title><rect x="34.0617%" y="821" width="1.5167%" height="15" fill="rgb(235,190,38)" fg:x="1325" fg:w="59"/><text x="34.3117%" y="831.50"></text></g><g><title>alloc::alloc::exchange_malloc (54 samples, 1.39%)</title><rect x="34.1902%" y="805" width="1.3882%" height="15" fill="rgb(247,86,24)" fg:x="1330" fg:w="54"/><text x="34.4402%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (53 samples, 1.36%)</title><rect x="34.2159%" y="789" width="1.3625%" height="15" fill="rgb(205,101,16)" fg:x="1331" fg:w="53"/><text x="34.4659%" y="799.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (53 samples, 1.36%)</title><rect x="34.2159%" y="773" width="1.3625%" height="15" fill="rgb(246,168,33)" fg:x="1331" fg:w="53"/><text x="34.4659%" y="783.50"></text></g><g><title>alloc::alloc::alloc (53 samples, 1.36%)</title><rect x="34.2159%" y="757" width="1.3625%" height="15" fill="rgb(231,114,1)" fg:x="1331" fg:w="53"/><text x="34.4659%" y="767.50"></text></g><g><title>__rust_alloc (53 samples, 1.36%)</title><rect x="34.2159%" y="741" width="1.3625%" height="15" fill="rgb(207,184,53)" fg:x="1331" fg:w="53"/><text x="34.4659%" y="751.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (53 samples, 1.36%)</title><rect x="34.2159%" y="725" width="1.3625%" height="15" fill="rgb(224,95,51)" fg:x="1331" fg:w="53"/><text x="34.4659%" y="735.50"></text></g><g><title>mi_malloc_aligned (3 samples, 0.08%)</title><rect x="35.5013%" y="709" width="0.0771%" height="15" fill="rgb(212,188,45)" fg:x="1381" fg:w="3"/><text x="35.7513%" y="719.50"></text></g><g><title>mi_prim_get_default_heap (1 samples, 0.03%)</title><rect x="35.5527%" y="693" width="0.0257%" height="15" fill="rgb(223,154,38)" fg:x="1383" fg:w="1"/><text x="35.8027%" y="703.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="35.6812%" y="821" width="0.0257%" height="15" fill="rgb(251,22,52)" fg:x="1388" fg:w="1"/><text x="35.9312%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (22 samples, 0.57%)</title><rect x="35.5784%" y="837" width="0.5656%" height="15" fill="rgb(229,209,22)" fg:x="1384" fg:w="22"/><text x="35.8284%" y="847.50"></text></g><g><title>core::ptr::write (17 samples, 0.44%)</title><rect x="35.7069%" y="821" width="0.4370%" height="15" fill="rgb(234,138,34)" fg:x="1389" fg:w="17"/><text x="35.9569%" y="831.50"></text></g><g><title>_mi_page_malloc (11 samples, 0.28%)</title><rect x="36.2982%" y="693" width="0.2828%" height="15" fill="rgb(212,95,11)" fg:x="1412" fg:w="11"/><text x="36.5482%" y="703.50"></text></g><g><title>_mi_page_malloc_zero (11 samples, 0.28%)</title><rect x="36.2982%" y="677" width="0.2828%" height="15" fill="rgb(240,179,47)" fg:x="1412" fg:w="11"/><text x="36.5482%" y="687.50"></text></g><g><title>mi_heap_malloc_aligned_at (4 samples, 0.10%)</title><rect x="36.5810%" y="693" width="0.1028%" height="15" fill="rgb(240,163,11)" fg:x="1423" fg:w="4"/><text x="36.8310%" y="703.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at (4 samples, 0.10%)</title><rect x="36.5810%" y="677" width="0.1028%" height="15" fill="rgb(236,37,12)" fg:x="1423" fg:w="4"/><text x="36.8310%" y="687.50"></text></g><g><title>_mi_is_power_of_two (1 samples, 0.03%)</title><rect x="36.6581%" y="661" width="0.0257%" height="15" fill="rgb(232,164,16)" fg:x="1426" fg:w="1"/><text x="36.9081%" y="671.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.03%)</title><rect x="36.6838%" y="693" width="0.0257%" height="15" fill="rgb(244,205,15)" fg:x="1427" fg:w="1"/><text x="36.9338%" y="703.50"></text></g><g><title>_mi_heap_malloc_zero (1 samples, 0.03%)</title><rect x="36.6838%" y="677" width="0.0257%" height="15" fill="rgb(223,117,47)" fg:x="1427" fg:w="1"/><text x="36.9338%" y="687.50"></text></g><g><title>_mi_heap_malloc_zero_ex (1 samples, 0.03%)</title><rect x="36.6838%" y="661" width="0.0257%" height="15" fill="rgb(244,107,35)" fg:x="1427" fg:w="1"/><text x="36.9338%" y="671.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.03%)</title><rect x="36.6838%" y="645" width="0.0257%" height="15" fill="rgb(205,140,8)" fg:x="1427" fg:w="1"/><text x="36.9338%" y="655.50"></text></g><g><title>mi_find_page (1 samples, 0.03%)</title><rect x="36.6838%" y="629" width="0.0257%" height="15" fill="rgb(228,84,46)" fg:x="1427" fg:w="1"/><text x="36.9338%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (23 samples, 0.59%)</title><rect x="36.1440%" y="837" width="0.5913%" height="15" fill="rgb(254,188,9)" fg:x="1406" fg:w="23"/><text x="36.3940%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (19 samples, 0.49%)</title><rect x="36.2468%" y="821" width="0.4884%" height="15" fill="rgb(206,112,54)" fg:x="1410" fg:w="19"/><text x="36.4968%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (19 samples, 0.49%)</title><rect x="36.2468%" y="805" width="0.4884%" height="15" fill="rgb(216,84,49)" fg:x="1410" fg:w="19"/><text x="36.4968%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (19 samples, 0.49%)</title><rect x="36.2468%" y="789" width="0.4884%" height="15" fill="rgb(214,194,35)" fg:x="1410" fg:w="19"/><text x="36.4968%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.44%)</title><rect x="36.2982%" y="773" width="0.4370%" height="15" fill="rgb(249,28,3)" fg:x="1412" fg:w="17"/><text x="36.5482%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.44%)</title><rect x="36.2982%" y="757" width="0.4370%" height="15" fill="rgb(222,56,52)" fg:x="1412" fg:w="17"/><text x="36.5482%" y="767.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.44%)</title><rect x="36.2982%" y="741" width="0.4370%" height="15" fill="rgb(245,217,50)" fg:x="1412" fg:w="17"/><text x="36.5482%" y="751.50"></text></g><g><title>__rust_alloc (17 samples, 0.44%)</title><rect x="36.2982%" y="725" width="0.4370%" height="15" fill="rgb(213,201,24)" fg:x="1412" fg:w="17"/><text x="36.5482%" y="735.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (17 samples, 0.44%)</title><rect x="36.2982%" y="709" width="0.4370%" height="15" fill="rgb(248,116,28)" fg:x="1412" fg:w="17"/><text x="36.5482%" y="719.50"></text></g><g><title>mi_malloc_aligned (1 samples, 0.03%)</title><rect x="36.7095%" y="693" width="0.0257%" height="15" fill="rgb(219,72,43)" fg:x="1428" fg:w="1"/><text x="36.9595%" y="703.50"></text></g><g><title>mi_prim_get_default_heap (1 samples, 0.03%)</title><rect x="36.7095%" y="677" width="0.0257%" height="15" fill="rgb(209,138,14)" fg:x="1428" fg:w="1"/><text x="36.9595%" y="687.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3 samples, 0.08%)</title><rect x="36.7352%" y="837" width="0.0771%" height="15" fill="rgb(222,18,33)" fg:x="1429" fg:w="3"/><text x="36.9852%" y="847.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3 samples, 0.08%)</title><rect x="36.7352%" y="821" width="0.0771%" height="15" fill="rgb(213,199,7)" fg:x="1429" fg:w="3"/><text x="36.9852%" y="831.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2 samples, 0.05%)</title><rect x="36.7609%" y="805" width="0.0514%" height="15" fill="rgb(250,110,10)" fg:x="1430" fg:w="2"/><text x="37.0109%" y="815.50"></text></g><g><title>mi_heap_page_queue_of (7 samples, 0.18%)</title><rect x="37.0951%" y="693" width="0.1799%" height="15" fill="rgb(248,123,6)" fg:x="1443" fg:w="7"/><text x="37.3451%" y="703.50"></text></g><g><title>mi_bin (1 samples, 0.03%)</title><rect x="37.2494%" y="677" width="0.0257%" height="15" fill="rgb(206,91,31)" fg:x="1449" fg:w="1"/><text x="37.4994%" y="687.50"></text></g><g><title>mi_page_queue_of (9 samples, 0.23%)</title><rect x="37.0951%" y="709" width="0.2314%" height="15" fill="rgb(211,154,13)" fg:x="1443" fg:w="9"/><text x="37.3451%" y="719.50"></text></g><g><title>mi_page_heap (2 samples, 0.05%)</title><rect x="37.2751%" y="693" width="0.0514%" height="15" fill="rgb(225,148,7)" fg:x="1450" fg:w="2"/><text x="37.5251%" y="703.50"></text></g><g><title>_mi_page_retire (20 samples, 0.51%)</title><rect x="36.8638%" y="725" width="0.5141%" height="15" fill="rgb(220,160,43)" fg:x="1434" fg:w="20"/><text x="37.1138%" y="735.50"></text></g><g><title>mi_page_set_has_aligned (2 samples, 0.05%)</title><rect x="37.3265%" y="709" width="0.0514%" height="15" fill="rgb(213,52,39)" fg:x="1452" fg:w="2"/><text x="37.5765%" y="719.50"></text></g><g><title>_mi_prim_thread_id (1 samples, 0.03%)</title><rect x="37.4807%" y="709" width="0.0257%" height="15" fill="rgb(243,137,7)" fg:x="1458" fg:w="1"/><text x="37.7307%" y="719.50"></text></g><g><title>mi_prim_tls_slot (1 samples, 0.03%)</title><rect x="37.4807%" y="693" width="0.0257%" height="15" fill="rgb(230,79,13)" fg:x="1458" fg:w="1"/><text x="37.7307%" y="703.50"></text></g><g><title>_mi_segment_page_of (4 samples, 0.10%)</title><rect x="37.5064%" y="709" width="0.1028%" height="15" fill="rgb(247,105,23)" fg:x="1459" fg:w="4"/><text x="37.7564%" y="719.50"></text></g><g><title>mi_slice_first (4 samples, 0.10%)</title><rect x="37.5064%" y="693" width="0.1028%" height="15" fill="rgb(223,179,41)" fg:x="1459" fg:w="4"/><text x="37.7564%" y="703.50"></text></g><g><title>mi_checked_ptr_segment (5 samples, 0.13%)</title><rect x="37.6093%" y="709" width="0.1285%" height="15" fill="rgb(218,9,34)" fg:x="1463" fg:w="5"/><text x="37.8593%" y="719.50"></text></g><g><title>_mi_ptr_segment (5 samples, 0.13%)</title><rect x="37.6093%" y="693" width="0.1285%" height="15" fill="rgb(222,106,8)" fg:x="1463" fg:w="5"/><text x="37.8593%" y="703.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 1.00%)</title><rect x="36.8123%" y="805" width="1.0026%" height="15" fill="rgb(211,220,0)" fg:x="1432" fg:w="39"/><text x="37.0623%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (39 samples, 1.00%)</title><rect x="36.8123%" y="789" width="1.0026%" height="15" fill="rgb(229,52,16)" fg:x="1432" fg:w="39"/><text x="37.0623%" y="799.50"></text></g><g><title>alloc::alloc::dealloc (39 samples, 1.00%)</title><rect x="36.8123%" y="773" width="1.0026%" height="15" fill="rgb(212,155,18)" fg:x="1432" fg:w="39"/><text x="37.0623%" y="783.50"></text></g><g><title>__rust_dealloc (39 samples, 1.00%)</title><rect x="36.8123%" y="757" width="1.0026%" height="15" fill="rgb(242,21,14)" fg:x="1432" fg:w="39"/><text x="37.0623%" y="767.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (39 samples, 1.00%)</title><rect x="36.8123%" y="741" width="1.0026%" height="15" fill="rgb(222,19,48)" fg:x="1432" fg:w="39"/><text x="37.0623%" y="751.50"></text></g><g><title>mi_free (17 samples, 0.44%)</title><rect x="37.3779%" y="725" width="0.4370%" height="15" fill="rgb(232,45,27)" fg:x="1454" fg:w="17"/><text x="37.6279%" y="735.50"></text></g><g><title>mi_free_block_local (3 samples, 0.08%)</title><rect x="37.7378%" y="709" width="0.0771%" height="15" fill="rgb(249,103,42)" fg:x="1468" fg:w="3"/><text x="37.9878%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::{{closure}}::{{closure}}::{{closure}}::_decode_async&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}&gt;&gt;&gt; (44 samples, 1.13%)</title><rect x="36.8123%" y="837" width="1.1311%" height="15" fill="rgb(246,81,33)" fg:x="1432" fg:w="44"/><text x="37.0623%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::{{closure}}::{{closure}}::{{closure}}::_decode_async&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}&gt;&gt; (44 samples, 1.13%)</title><rect x="36.8123%" y="821" width="1.1311%" height="15" fill="rgb(252,33,42)" fg:x="1432" fg:w="44"/><text x="37.0623%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::{{closure}}::{{closure}}::{{closure}}::_decode_async&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}&gt; (5 samples, 0.13%)</title><rect x="37.8149%" y="805" width="0.1285%" height="15" fill="rgb(209,212,41)" fg:x="1471" fg:w="5"/><text x="38.0649%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_length_async&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}&gt; (1 samples, 0.03%)</title><rect x="37.9434%" y="837" width="0.0257%" height="15" fill="rgb(207,154,6)" fg:x="1476" fg:w="1"/><text x="38.1934%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::BytesMut&gt; (21 samples, 0.54%)</title><rect x="38.6118%" y="821" width="0.5398%" height="15" fill="rgb(223,64,47)" fg:x="1502" fg:w="21"/><text x="38.8618%" y="831.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (21 samples, 0.54%)</title><rect x="38.6118%" y="805" width="0.5398%" height="15" fill="rgb(211,161,38)" fg:x="1502" fg:w="21"/><text x="38.8618%" y="815.50"></text></g><g><title>bytes::bytes_mut::release_shared (20 samples, 0.51%)</title><rect x="38.6375%" y="789" width="0.5141%" height="15" fill="rgb(219,138,40)" fg:x="1503" fg:w="20"/><text x="38.8875%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (20 samples, 0.51%)</title><rect x="38.6375%" y="773" width="0.5141%" height="15" fill="rgb(241,228,46)" fg:x="1503" fg:w="20"/><text x="38.8875%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_sub (20 samples, 0.51%)</title><rect x="38.6375%" y="757" width="0.5141%" height="15" fill="rgb(223,209,38)" fg:x="1503" fg:w="20"/><text x="38.8875%" y="767.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.03%)</title><rect x="39.1517%" y="821" width="0.0257%" height="15" fill="rgb(236,164,45)" fg:x="1523" fg:w="1"/><text x="39.4017%" y="831.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (3 samples, 0.08%)</title><rect x="40.4884%" y="789" width="0.0771%" height="15" fill="rgb(231,15,5)" fg:x="1575" fg:w="3"/><text x="40.7384%" y="799.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (3 samples, 0.08%)</title><rect x="40.4884%" y="773" width="0.0771%" height="15" fill="rgb(252,35,15)" fg:x="1575" fg:w="3"/><text x="40.7384%" y="783.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (2 samples, 0.05%)</title><rect x="40.5141%" y="757" width="0.0514%" height="15" fill="rgb(248,181,18)" fg:x="1576" fg:w="2"/><text x="40.7641%" y="767.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::deref::Deref&gt;::deref (2 samples, 0.05%)</title><rect x="40.5656%" y="789" width="0.0514%" height="15" fill="rgb(233,39,42)" fg:x="1578" fg:w="2"/><text x="40.8156%" y="799.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::convert::AsRef&lt;[u8]&gt;&gt;::as_ref (2 samples, 0.05%)</title><rect x="40.5656%" y="773" width="0.0514%" height="15" fill="rgb(238,110,33)" fg:x="1578" fg:w="2"/><text x="40.8156%" y="783.50"></text></g><g><title>bytes::bytes_mut::BytesMut::as_slice (2 samples, 0.05%)</title><rect x="40.5656%" y="757" width="0.0514%" height="15" fill="rgb(233,195,10)" fg:x="1578" fg:w="2"/><text x="40.8156%" y="767.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (1 samples, 0.03%)</title><rect x="40.6684%" y="757" width="0.0257%" height="15" fill="rgb(254,105,3)" fg:x="1582" fg:w="1"/><text x="40.9184%" y="767.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (4 samples, 0.10%)</title><rect x="40.6427%" y="773" width="0.1028%" height="15" fill="rgb(221,225,9)" fg:x="1581" fg:w="4"/><text x="40.8927%" y="783.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.05%)</title><rect x="40.6941%" y="757" width="0.0514%" height="15" fill="rgb(224,227,45)" fg:x="1583" fg:w="2"/><text x="40.9441%" y="767.50"></text></g><g><title>bytes::bytes_mut::increment_shared (27 samples, 0.69%)</title><rect x="40.7712%" y="757" width="0.6941%" height="15" fill="rgb(229,198,43)" fg:x="1586" fg:w="27"/><text x="41.0212%" y="767.50"></text></g><g><title>bytes::bytes_mut::BytesMut::shallow_clone (29 samples, 0.75%)</title><rect x="40.7455%" y="773" width="0.7455%" height="15" fill="rgb(206,209,35)" fg:x="1585" fg:w="29"/><text x="40.9955%" y="783.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="41.4653%" y="757" width="0.0257%" height="15" fill="rgb(245,195,53)" fg:x="1613" fg:w="1"/><text x="41.7153%" y="767.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (36 samples, 0.93%)</title><rect x="40.6170%" y="789" width="0.9254%" height="15" fill="rgb(240,92,26)" fg:x="1580" fg:w="36"/><text x="40.8670%" y="799.50"></text></g><g><title>core::fmt::Arguments::new_v1 (2 samples, 0.05%)</title><rect x="41.4910%" y="773" width="0.0514%" height="15" fill="rgb(207,40,23)" fg:x="1614" fg:w="2"/><text x="41.7410%" y="783.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.03%)</title><rect x="41.5424%" y="757" width="0.0257%" height="15" fill="rgb(223,111,35)" fg:x="1616" fg:w="1"/><text x="41.7924%" y="767.50"></text></g><g><title>core::ops::function::Fn::call (1 samples, 0.03%)</title><rect x="41.8766%" y="629" width="0.0257%" height="15" fill="rgb(229,147,28)" fg:x="1629" fg:w="1"/><text x="42.1266%" y="639.50"></text></g><g><title>&lt;memchr::vector::SensibleMoveMask as memchr::vector::MoveMask&gt;::first_offset (1 samples, 0.03%)</title><rect x="41.8766%" y="613" width="0.0257%" height="15" fill="rgb(211,29,28)" fg:x="1629" fg:w="1"/><text x="42.1266%" y="623.50"></text></g><g><title>core::num::&lt;impl u32&gt;::trailing_zeros (1 samples, 0.03%)</title><rect x="41.8766%" y="597" width="0.0257%" height="15" fill="rgb(228,72,33)" fg:x="1629" fg:w="1"/><text x="42.1266%" y="607.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (19 samples, 0.49%)</title><rect x="41.6452%" y="693" width="0.4884%" height="15" fill="rgb(205,214,31)" fg:x="1620" fg:w="19"/><text x="41.8952%" y="703.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (18 samples, 0.46%)</title><rect x="41.6710%" y="677" width="0.4627%" height="15" fill="rgb(224,111,15)" fg:x="1621" fg:w="18"/><text x="41.9210%" y="687.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (18 samples, 0.46%)</title><rect x="41.6710%" y="661" width="0.4627%" height="15" fill="rgb(253,21,26)" fg:x="1621" fg:w="18"/><text x="41.9210%" y="671.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (16 samples, 0.41%)</title><rect x="41.7224%" y="645" width="0.4113%" height="15" fill="rgb(245,139,43)" fg:x="1623" fg:w="16"/><text x="41.9724%" y="655.50"></text></g><g><title>memchr::vector::x86avx2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m256i&gt;::movemask (9 samples, 0.23%)</title><rect x="41.9023%" y="629" width="0.2314%" height="15" fill="rgb(252,170,7)" fg:x="1630" fg:w="9"/><text x="42.1523%" y="639.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (9 samples, 0.23%)</title><rect x="41.9023%" y="613" width="0.2314%" height="15" fill="rgb(231,118,14)" fg:x="1630" fg:w="9"/><text x="42.1523%" y="623.50"></text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_line_async::_{{closure}} (117 samples, 3.01%)</title><rect x="39.1774%" y="821" width="3.0077%" height="15" fill="rgb(238,83,0)" fg:x="1524" fg:w="117"/><text x="39.4274%" y="831.50">rut..</text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_line (84 samples, 2.16%)</title><rect x="40.0257%" y="805" width="2.1594%" height="15" fill="rgb(221,39,39)" fg:x="1557" fg:w="84"/><text x="40.2757%" y="815.50">r..</text></g><g><title>memchr::memchr::memchr (25 samples, 0.64%)</title><rect x="41.5424%" y="789" width="0.6427%" height="15" fill="rgb(222,119,46)" fg:x="1616" fg:w="25"/><text x="41.7924%" y="799.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (25 samples, 0.64%)</title><rect x="41.5424%" y="773" width="0.6427%" height="15" fill="rgb(222,165,49)" fg:x="1616" fg:w="25"/><text x="41.7924%" y="783.50"></text></g><g><title>memchr::memchr::memchr::_{{closure}} (24 samples, 0.62%)</title><rect x="41.5681%" y="757" width="0.6170%" height="15" fill="rgb(219,113,52)" fg:x="1617" fg:w="24"/><text x="41.8181%" y="767.50"></text></g><g><title>memchr::memchr::memchr_raw (24 samples, 0.62%)</title><rect x="41.5681%" y="741" width="0.6170%" height="15" fill="rgb(214,7,15)" fg:x="1617" fg:w="24"/><text x="41.8181%" y="751.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (24 samples, 0.62%)</title><rect x="41.5681%" y="725" width="0.6170%" height="15" fill="rgb(235,32,4)" fg:x="1617" fg:w="24"/><text x="41.8181%" y="735.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (23 samples, 0.59%)</title><rect x="41.5938%" y="709" width="0.5913%" height="15" fill="rgb(238,90,54)" fg:x="1618" fg:w="23"/><text x="41.8438%" y="719.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::new_unchecked (2 samples, 0.05%)</title><rect x="42.1337%" y="693" width="0.0514%" height="15" fill="rgb(213,208,19)" fg:x="1639" fg:w="2"/><text x="42.3837%" y="703.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as snafu::OptionExt&lt;T&gt;&gt;::with_context (5 samples, 0.13%)</title><rect x="42.3393%" y="805" width="0.1285%" height="15" fill="rgb(233,156,4)" fg:x="1647" fg:w="5"/><text x="42.5893%" y="815.50"></text></g><g><title>&lt;i128 as core::ops::arith::MulAssign&gt;::mul_assign (5 samples, 0.13%)</title><rect x="42.8535%" y="773" width="0.1285%" height="15" fill="rgb(207,194,5)" fg:x="1667" fg:w="5"/><text x="43.1035%" y="783.50"></text></g><g><title>atoi::ascii_to_digit (2 samples, 0.05%)</title><rect x="42.9820%" y="773" width="0.0514%" height="15" fill="rgb(206,111,30)" fg:x="1672" fg:w="2"/><text x="43.2320%" y="783.50"></text></g><g><title>core::cmp::min (1 samples, 0.03%)</title><rect x="43.0334%" y="773" width="0.0257%" height="15" fill="rgb(243,70,54)" fg:x="1674" fg:w="1"/><text x="43.2834%" y="783.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.03%)</title><rect x="43.0334%" y="757" width="0.0257%" height="15" fill="rgb(242,28,8)" fg:x="1674" fg:w="1"/><text x="43.2834%" y="767.50"></text></g><g><title>core::cmp::min_by (1 samples, 0.03%)</title><rect x="43.0334%" y="741" width="0.0257%" height="15" fill="rgb(219,106,18)" fg:x="1674" fg:w="1"/><text x="43.2834%" y="751.50"></text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_decimal_async::_{{closure}} (201 samples, 5.17%)</title><rect x="37.9692%" y="837" width="5.1671%" height="15" fill="rgb(244,222,10)" fg:x="1477" fg:w="201"/><text x="38.2192%" y="847.50">rutin:..</text></g><g><title>rutin::util::atoi (37 samples, 0.95%)</title><rect x="42.1851%" y="821" width="0.9512%" height="15" fill="rgb(236,179,52)" fg:x="1641" fg:w="37"/><text x="42.4351%" y="831.50"></text></g><g><title>atoi::atoi (26 samples, 0.67%)</title><rect x="42.4679%" y="805" width="0.6684%" height="15" fill="rgb(213,23,39)" fg:x="1652" fg:w="26"/><text x="42.7179%" y="815.50"></text></g><g><title>&lt;I as atoi::FromRadix10SignedChecked&gt;::from_radix_10_signed_checked (26 samples, 0.67%)</title><rect x="42.4679%" y="789" width="0.6684%" height="15" fill="rgb(238,48,10)" fg:x="1652" fg:w="26"/><text x="42.7179%" y="799.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (3 samples, 0.08%)</title><rect x="43.0591%" y="773" width="0.0771%" height="15" fill="rgb(251,196,23)" fg:x="1675" fg:w="3"/><text x="43.3091%" y="783.50"></text></g><g><title>&lt;I as atoi::FromRadix10SignedChecked&gt;::from_radix_10_signed_checked::_{{closure}} (3 samples, 0.08%)</title><rect x="43.0591%" y="757" width="0.0771%" height="15" fill="rgb(250,152,24)" fg:x="1675" fg:w="3"/><text x="43.3091%" y="767.50"></text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::_{{closure}} (1,455 samples, 37.40%)</title><rect x="5.8098%" y="901" width="37.4036%" height="15" fill="rgb(209,150,17)" fg:x="226" fg:w="1455"/><text x="6.0598%" y="911.50">rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async..</text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::_{{closure}}::_{{closure}} (1,370 samples, 35.22%)</title><rect x="7.9949%" y="885" width="35.2185%" height="15" fill="rgb(234,202,34)" fg:x="311" fg:w="1370"/><text x="8.2449%" y="895.50">rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_a..</text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::_{{closure}}::_{{closure}}::_{{closure}} (1,288 samples, 33.11%)</title><rect x="10.1028%" y="869" width="33.1105%" height="15" fill="rgb(253,148,53)" fg:x="393" fg:w="1288"/><text x="10.3528%" y="879.50">rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decod..</text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::decode_async::_{{closure}}::_{{closure}}::_{{closure}}::_decode_async::_{{closure}} (1,210 samples, 31.11%)</title><rect x="12.1080%" y="853" width="31.1054%" height="15" fill="rgb(218,129,16)" fg:x="471" fg:w="1210"/><text x="12.3580%" y="863.50">rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::d..</text></g><g><title>rutin::frame::Resp3&lt;bytes::bytes_mut::BytesMut&gt;::get_u8 (3 samples, 0.08%)</title><rect x="43.1362%" y="837" width="0.0771%" height="15" fill="rgb(216,85,19)" fg:x="1678" fg:w="3"/><text x="43.3862%" y="847.50"></text></g><g><title>bytes::buf::buf_impl::Buf::get_u8 (3 samples, 0.08%)</title><rect x="43.1362%" y="821" width="0.0771%" height="15" fill="rgb(235,228,7)" fg:x="1678" fg:w="3"/><text x="43.3862%" y="831.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (2 samples, 0.05%)</title><rect x="43.1620%" y="805" width="0.0514%" height="15" fill="rgb(245,175,0)" fg:x="1679" fg:w="2"/><text x="43.4120%" y="815.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (2 samples, 0.05%)</title><rect x="43.1620%" y="789" width="0.0514%" height="15" fill="rgb(208,168,36)" fg:x="1679" fg:w="2"/><text x="43.4120%" y="799.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (1 samples, 0.03%)</title><rect x="43.1877%" y="773" width="0.0257%" height="15" fill="rgb(246,171,24)" fg:x="1680" fg:w="1"/><text x="43.4377%" y="783.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="43.2648%" y="885" width="0.0257%" height="15" fill="rgb(215,142,24)" fg:x="1683" fg:w="1"/><text x="43.5148%" y="895.50"></text></g><g><title>core::ptr::write (32 samples, 0.82%)</title><rect x="43.2905%" y="885" width="0.8226%" height="15" fill="rgb(250,187,7)" fg:x="1684" fg:w="32"/><text x="43.5405%" y="895.50"></text></g><g><title>[libc.so.6] (31 samples, 0.80%)</title><rect x="43.3162%" y="869" width="0.7969%" height="15" fill="rgb(228,66,33)" fg:x="1685" fg:w="31"/><text x="43.5662%" y="879.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="44.1131%" y="853" width="0.0257%" height="15" fill="rgb(234,215,21)" fg:x="1716" fg:w="1"/><text x="44.3631%" y="863.50"></text></g><g><title>__rust_alloc (1 samples, 0.03%)</title><rect x="44.1131%" y="837" width="0.0257%" height="15" fill="rgb(222,191,20)" fg:x="1716" fg:w="1"/><text x="44.3631%" y="847.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.03%)</title><rect x="44.1131%" y="821" width="0.0257%" height="15" fill="rgb(245,79,54)" fg:x="1716" fg:w="1"/><text x="44.3631%" y="831.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.03%)</title><rect x="44.1131%" y="805" width="0.0257%" height="15" fill="rgb(240,10,37)" fg:x="1716" fg:w="1"/><text x="44.3631%" y="815.50"></text></g><g><title>_mi_heap_malloc_zero (1 samples, 0.03%)</title><rect x="44.1131%" y="789" width="0.0257%" height="15" fill="rgb(214,192,32)" fg:x="1716" fg:w="1"/><text x="44.3631%" y="799.50"></text></g><g><title>_mi_heap_malloc_zero_ex (1 samples, 0.03%)</title><rect x="44.1131%" y="773" width="0.0257%" height="15" fill="rgb(209,36,54)" fg:x="1716" fg:w="1"/><text x="44.3631%" y="783.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.03%)</title><rect x="44.1131%" y="757" width="0.0257%" height="15" fill="rgb(220,10,11)" fg:x="1716" fg:w="1"/><text x="44.3631%" y="767.50"></text></g><g><title>_mi_page_malloc_zero (1 samples, 0.03%)</title><rect x="44.1131%" y="741" width="0.0257%" height="15" fill="rgb(221,106,17)" fg:x="1716" fg:w="1"/><text x="44.3631%" y="751.50"></text></g><g><title>_mi_memcpy_aligned (46 samples, 1.18%)</title><rect x="44.1388%" y="725" width="1.1825%" height="15" fill="rgb(251,142,44)" fg:x="1717" fg:w="46"/><text x="44.3888%" y="735.50"></text></g><g><title>_mi_memcpy (46 samples, 1.18%)</title><rect x="44.1388%" y="709" width="1.1825%" height="15" fill="rgb(238,13,15)" fg:x="1717" fg:w="46"/><text x="44.3888%" y="719.50"></text></g><g><title>[libc.so.6] (46 samples, 1.18%)</title><rect x="44.1388%" y="693" width="1.1825%" height="15" fill="rgb(208,107,27)" fg:x="1717" fg:w="46"/><text x="44.3888%" y="703.50"></text></g><g><title>_mi_page_malloc_zero (2 samples, 0.05%)</title><rect x="45.3213%" y="661" width="0.0514%" height="15" fill="rgb(205,136,37)" fg:x="1763" fg:w="2"/><text x="45.5713%" y="671.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (4 samples, 0.10%)</title><rect x="45.3213%" y="725" width="0.1028%" height="15" fill="rgb(250,205,27)" fg:x="1763" fg:w="4"/><text x="45.5713%" y="735.50"></text></g><g><title>_mi_heap_malloc_zero (4 samples, 0.10%)</title><rect x="45.3213%" y="709" width="0.1028%" height="15" fill="rgb(210,80,43)" fg:x="1763" fg:w="4"/><text x="45.5713%" y="719.50"></text></g><g><title>_mi_heap_malloc_zero_ex (4 samples, 0.10%)</title><rect x="45.3213%" y="693" width="0.1028%" height="15" fill="rgb(247,160,36)" fg:x="1763" fg:w="4"/><text x="45.5713%" y="703.50"></text></g><g><title>_mi_malloc_generic (4 samples, 0.10%)</title><rect x="45.3213%" y="677" width="0.1028%" height="15" fill="rgb(234,13,49)" fg:x="1763" fg:w="4"/><text x="45.5713%" y="687.50"></text></g><g><title>mi_find_page (2 samples, 0.05%)</title><rect x="45.3728%" y="661" width="0.0514%" height="15" fill="rgb(234,122,0)" fg:x="1765" fg:w="2"/><text x="45.6228%" y="671.50"></text></g><g><title>mi_find_free_page (2 samples, 0.05%)</title><rect x="45.3728%" y="645" width="0.0514%" height="15" fill="rgb(207,146,38)" fg:x="1765" fg:w="2"/><text x="45.6228%" y="655.50"></text></g><g><title>mi_heap_realloc_aligned (51 samples, 1.31%)</title><rect x="44.1388%" y="805" width="1.3111%" height="15" fill="rgb(207,177,25)" fg:x="1717" fg:w="51"/><text x="44.3888%" y="815.50"></text></g><g><title>mi_heap_realloc_zero_aligned (51 samples, 1.31%)</title><rect x="44.1388%" y="789" width="1.3111%" height="15" fill="rgb(211,178,42)" fg:x="1717" fg:w="51"/><text x="44.3888%" y="799.50"></text></g><g><title>mi_heap_realloc_zero_aligned (51 samples, 1.31%)</title><rect x="44.1388%" y="773" width="1.3111%" height="15" fill="rgb(230,69,54)" fg:x="1717" fg:w="51"/><text x="44.3888%" y="783.50"></text></g><g><title>mi_heap_realloc_zero_aligned_at (51 samples, 1.31%)</title><rect x="44.1388%" y="757" width="1.3111%" height="15" fill="rgb(214,135,41)" fg:x="1717" fg:w="51"/><text x="44.3888%" y="767.50"></text></g><g><title>mi_heap_realloc_zero_aligned_at (51 samples, 1.31%)</title><rect x="44.1388%" y="741" width="1.3111%" height="15" fill="rgb(237,67,25)" fg:x="1717" fg:w="51"/><text x="44.3888%" y="751.50"></text></g><g><title>mi_usable_size (1 samples, 0.03%)</title><rect x="45.4242%" y="725" width="0.0257%" height="15" fill="rgb(222,189,50)" fg:x="1767" fg:w="1"/><text x="45.6742%" y="735.50"></text></g><g><title>_mi_usable_size (1 samples, 0.03%)</title><rect x="45.4242%" y="709" width="0.0257%" height="15" fill="rgb(245,148,34)" fg:x="1767" fg:w="1"/><text x="45.6742%" y="719.50"></text></g><g><title>mi_checked_ptr_segment (1 samples, 0.03%)</title><rect x="45.4242%" y="693" width="0.0257%" height="15" fill="rgb(222,29,6)" fg:x="1767" fg:w="1"/><text x="45.6742%" y="703.50"></text></g><g><title>_mi_ptr_segment (1 samples, 0.03%)</title><rect x="45.4242%" y="677" width="0.0257%" height="15" fill="rgb(221,189,43)" fg:x="1767" fg:w="1"/><text x="45.6742%" y="687.50"></text></g><g><title>alloc::alloc::realloc (52 samples, 1.34%)</title><rect x="44.1388%" y="853" width="1.3368%" height="15" fill="rgb(207,36,27)" fg:x="1717" fg:w="52"/><text x="44.3888%" y="863.50"></text></g><g><title>__rust_realloc (52 samples, 1.34%)</title><rect x="44.1388%" y="837" width="1.3368%" height="15" fill="rgb(217,90,24)" fg:x="1717" fg:w="52"/><text x="44.3888%" y="847.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (52 samples, 1.34%)</title><rect x="44.1388%" y="821" width="1.3368%" height="15" fill="rgb(224,66,35)" fg:x="1717" fg:w="52"/><text x="44.3888%" y="831.50"></text></g><g><title>mi_realloc_aligned (1 samples, 0.03%)</title><rect x="45.4499%" y="805" width="0.0257%" height="15" fill="rgb(221,13,50)" fg:x="1768" fg:w="1"/><text x="45.6999%" y="815.50"></text></g><g><title>mi_prim_get_default_heap (1 samples, 0.03%)</title><rect x="45.4499%" y="789" width="0.0257%" height="15" fill="rgb(236,68,49)" fg:x="1768" fg:w="1"/><text x="45.6999%" y="799.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::reserve_one_unchecked (56 samples, 1.44%)</title><rect x="44.1131%" y="885" width="1.4396%" height="15" fill="rgb(229,146,28)" fg:x="1716" fg:w="56"/><text x="44.3631%" y="895.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::try_grow (56 samples, 1.44%)</title><rect x="44.1131%" y="869" width="1.4396%" height="15" fill="rgb(225,31,38)" fg:x="1716" fg:w="56"/><text x="44.3631%" y="879.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.08%)</title><rect x="45.4756%" y="853" width="0.0771%" height="15" fill="rgb(250,208,3)" fg:x="1769" fg:w="3"/><text x="45.7256%" y="863.50"></text></g><g><title>[libc.so.6] (3 samples, 0.08%)</title><rect x="45.4756%" y="837" width="0.0771%" height="15" fill="rgb(246,54,23)" fg:x="1769" fg:w="3"/><text x="45.7256%" y="847.50"></text></g><g><title>rutin::connection::Connection&lt;S&gt;::read_frames::_{{closure}}::_{{closure}} (1,732 samples, 44.52%)</title><rect x="1.1568%" y="933" width="44.5244%" height="15" fill="rgb(243,76,11)" fg:x="45" fg:w="1732"/><text x="1.4068%" y="943.50">rutin::connection::Connection&lt;S&gt;::read_frames::_{{closure}}::_{{closure}}</text></g><g><title>rutin::connection::Connection&lt;S&gt;::read_frames::_{{closure}}::_{{closure}}::_{{closure}} (1,716 samples, 44.11%)</title><rect x="1.5681%" y="917" width="44.1131%" height="15" fill="rgb(245,21,50)" fg:x="61" fg:w="1716"/><text x="1.8181%" y="927.50">rutin::connection::Connection&lt;S&gt;::read_frames::_{{closure}}::_{{closure}..</text></g><g><title>smallvec::SmallVec&lt;A&gt;::push (96 samples, 2.47%)</title><rect x="43.2134%" y="901" width="2.4679%" height="15" fill="rgb(228,9,43)" fg:x="1681" fg:w="96"/><text x="43.4634%" y="911.50">sm..</text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple_mut (5 samples, 0.13%)</title><rect x="45.5527%" y="885" width="0.1285%" height="15" fill="rgb(208,100,47)" fg:x="1772" fg:w="5"/><text x="45.8027%" y="895.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_pin_mut (1 samples, 0.03%)</title><rect x="45.7326%" y="853" width="0.0257%" height="15" fill="rgb(232,26,8)" fg:x="1779" fg:w="1"/><text x="45.9826%" y="863.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (1 samples, 0.03%)</title><rect x="45.7326%" y="837" width="0.0257%" height="15" fill="rgb(216,166,38)" fg:x="1779" fg:w="1"/><text x="45.9826%" y="847.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (46 samples, 1.18%)</title><rect x="46.2211%" y="837" width="1.1825%" height="15" fill="rgb(251,202,51)" fg:x="1798" fg:w="46"/><text x="46.4711%" y="847.50"></text></g><g><title>[libc.so.6] (44 samples, 1.13%)</title><rect x="46.2725%" y="821" width="1.1311%" height="15" fill="rgb(254,216,34)" fg:x="1800" fg:w="44"/><text x="46.5225%" y="831.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (45 samples, 1.16%)</title><rect x="47.4036%" y="837" width="1.1568%" height="15" fill="rgb(251,32,27)" fg:x="1844" fg:w="45"/><text x="47.6536%" y="847.50"></text></g><g><title>[libc.so.6] (40 samples, 1.03%)</title><rect x="47.5321%" y="821" width="1.0283%" height="15" fill="rgb(208,127,28)" fg:x="1849" fg:w="40"/><text x="47.7821%" y="831.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.05%)</title><rect x="48.6118%" y="821" width="0.0514%" height="15" fill="rgb(224,137,22)" fg:x="1891" fg:w="2"/><text x="48.8618%" y="831.50"></text></g><g><title>&lt;smallvec::IntoIter&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.72%)</title><rect x="48.5604%" y="837" width="0.7198%" height="15" fill="rgb(254,70,32)" fg:x="1889" fg:w="28"/><text x="48.8104%" y="847.50"></text></g><g><title>core::ptr::read (24 samples, 0.62%)</title><rect x="48.6632%" y="821" width="0.6170%" height="15" fill="rgb(229,75,37)" fg:x="1893" fg:w="24"/><text x="48.9132%" y="831.50"></text></g><g><title>[libc.so.6] (24 samples, 0.62%)</title><rect x="48.6632%" y="805" width="0.6170%" height="15" fill="rgb(252,64,23)" fg:x="1893" fg:w="24"/><text x="48.9132%" y="815.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (2 samples, 0.05%)</title><rect x="49.2802%" y="789" width="0.0514%" height="15" fill="rgb(232,162,48)" fg:x="1917" fg:w="2"/><text x="49.5302%" y="799.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (2 samples, 0.05%)</title><rect x="49.2802%" y="773" width="0.0514%" height="15" fill="rgb(246,160,12)" fg:x="1917" fg:w="2"/><text x="49.5302%" y="783.50"></text></g><g><title>tokio::runtime::task::core::Header::get_tracing_id (2 samples, 0.05%)</title><rect x="49.2802%" y="757" width="0.0514%" height="15" fill="rgb(247,166,0)" fg:x="1917" fg:w="2"/><text x="49.5302%" y="767.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (2 samples, 0.05%)</title><rect x="49.2802%" y="741" width="0.0514%" height="15" fill="rgb(249,219,21)" fg:x="1917" fg:w="2"/><text x="49.5302%" y="751.50"></text></g><g><title>async_shutdown::waker_list::WakerList::deregister (1 samples, 0.03%)</title><rect x="49.3316%" y="789" width="0.0257%" height="15" fill="rgb(205,209,3)" fg:x="1919" fg:w="1"/><text x="49.5816%" y="799.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.03%)</title><rect x="49.3316%" y="773" width="0.0257%" height="15" fill="rgb(243,44,1)" fg:x="1919" fg:w="1"/><text x="49.5816%" y="783.50"></text></g><g><title>core::mem::replace (1 samples, 0.03%)</title><rect x="49.3316%" y="757" width="0.0257%" height="15" fill="rgb(206,159,16)" fg:x="1919" fg:w="1"/><text x="49.5816%" y="767.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="49.3316%" y="741" width="0.0257%" height="15" fill="rgb(244,77,30)" fg:x="1919" fg:w="1"/><text x="49.5816%" y="751.50"></text></g><g><title>async_shutdown::waker_list::WakerList::register (1 samples, 0.03%)</title><rect x="49.3573%" y="789" width="0.0257%" height="15" fill="rgb(218,69,12)" fg:x="1920" fg:w="1"/><text x="49.6073%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="49.3573%" y="773" width="0.0257%" height="15" fill="rgb(212,87,7)" fg:x="1920" fg:w="1"/><text x="49.6073%" y="783.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.03%)</title><rect x="49.3573%" y="757" width="0.0257%" height="15" fill="rgb(245,114,25)" fg:x="1920" fg:w="1"/><text x="49.6073%" y="767.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="49.3573%" y="741" width="0.0257%" height="15" fill="rgb(210,61,42)" fg:x="1920" fg:w="1"/><text x="49.6073%" y="751.50"></text></g><g><title>&lt;async_shutdown::shutdown_signal::ShutdownSignal&lt;T&gt; as core::future::future::Future&gt;::poll (5 samples, 0.13%)</title><rect x="49.2802%" y="805" width="0.1285%" height="15" fill="rgb(211,52,33)" fg:x="1917" fg:w="5"/><text x="49.5302%" y="815.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.03%)</title><rect x="49.3830%" y="789" width="0.0257%" height="15" fill="rgb(234,58,33)" fg:x="1921" fg:w="1"/><text x="49.6330%" y="799.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (1 samples, 0.03%)</title><rect x="49.3830%" y="773" width="0.0257%" height="15" fill="rgb(220,115,36)" fg:x="1921" fg:w="1"/><text x="49.6330%" y="783.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (1 samples, 0.03%)</title><rect x="49.3830%" y="757" width="0.0257%" height="15" fill="rgb(243,153,54)" fg:x="1921" fg:w="1"/><text x="49.6330%" y="767.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (1 samples, 0.03%)</title><rect x="49.3830%" y="741" width="0.0257%" height="15" fill="rgb(251,47,18)" fg:x="1921" fg:w="1"/><text x="49.6330%" y="751.50"></text></g><g><title>[libc.so.6] (5 samples, 0.13%)</title><rect x="49.4087%" y="805" width="0.1285%" height="15" fill="rgb(242,102,42)" fg:x="1922" fg:w="5"/><text x="49.6587%" y="815.50"></text></g><g><title>rutin::connection::Connection&lt;S&gt;::read_frames::_{{closure}} (11 samples, 0.28%)</title><rect x="49.5373%" y="805" width="0.2828%" height="15" fill="rgb(234,31,38)" fg:x="1927" fg:w="11"/><text x="49.7873%" y="815.50"></text></g><g><title>[libc.so.6] (10 samples, 0.26%)</title><rect x="49.5630%" y="789" width="0.2571%" height="15" fill="rgb(221,117,51)" fg:x="1928" fg:w="10"/><text x="49.8130%" y="799.50"></text></g><g><title>_mi_page_malloc (2 samples, 0.05%)</title><rect x="49.8715%" y="581" width="0.0514%" height="15" fill="rgb(212,20,18)" fg:x="1940" fg:w="2"/><text x="50.1215%" y="591.50"></text></g><g><title>_mi_page_malloc_zero (2 samples, 0.05%)</title><rect x="49.8715%" y="565" width="0.0514%" height="15" fill="rgb(245,133,36)" fg:x="1940" fg:w="2"/><text x="50.1215%" y="575.50"></text></g><g><title>flume::Hook&lt;T,S&gt;::trigger (3 samples, 0.08%)</title><rect x="49.8715%" y="725" width="0.0771%" height="15" fill="rgb(212,6,19)" fg:x="1940" fg:w="3"/><text x="50.1215%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (3 samples, 0.08%)</title><rect x="49.8715%" y="709" width="0.0771%" height="15" fill="rgb(218,1,36)" fg:x="1940" fg:w="3"/><text x="50.1215%" y="719.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (3 samples, 0.08%)</title><rect x="49.8715%" y="693" width="0.0771%" height="15" fill="rgb(246,84,54)" fg:x="1940" fg:w="3"/><text x="50.1215%" y="703.50"></text></g><g><title>alloc::alloc::exchange_malloc (3 samples, 0.08%)</title><rect x="49.8715%" y="677" width="0.0771%" height="15" fill="rgb(242,110,6)" fg:x="1940" fg:w="3"/><text x="50.1215%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.08%)</title><rect x="49.8715%" y="661" width="0.0771%" height="15" fill="rgb(214,47,5)" fg:x="1940" fg:w="3"/><text x="50.1215%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.08%)</title><rect x="49.8715%" y="645" width="0.0771%" height="15" fill="rgb(218,159,25)" fg:x="1940" fg:w="3"/><text x="50.1215%" y="655.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.08%)</title><rect x="49.8715%" y="629" width="0.0771%" height="15" fill="rgb(215,211,28)" fg:x="1940" fg:w="3"/><text x="50.1215%" y="639.50"></text></g><g><title>__rust_alloc (3 samples, 0.08%)</title><rect x="49.8715%" y="613" width="0.0771%" height="15" fill="rgb(238,59,32)" fg:x="1940" fg:w="3"/><text x="50.1215%" y="623.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (3 samples, 0.08%)</title><rect x="49.8715%" y="597" width="0.0771%" height="15" fill="rgb(226,82,3)" fg:x="1940" fg:w="3"/><text x="50.1215%" y="607.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.03%)</title><rect x="49.9229%" y="581" width="0.0257%" height="15" fill="rgb(240,164,32)" fg:x="1942" fg:w="1"/><text x="50.1729%" y="591.50"></text></g><g><title>_mi_heap_malloc_zero (1 samples, 0.03%)</title><rect x="49.9229%" y="565" width="0.0257%" height="15" fill="rgb(232,46,7)" fg:x="1942" fg:w="1"/><text x="50.1729%" y="575.50"></text></g><g><title>_mi_heap_malloc_zero_ex (1 samples, 0.03%)</title><rect x="49.9229%" y="549" width="0.0257%" height="15" fill="rgb(229,129,53)" fg:x="1942" fg:w="1"/><text x="50.1729%" y="559.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.03%)</title><rect x="49.9229%" y="533" width="0.0257%" height="15" fill="rgb(234,188,29)" fg:x="1942" fg:w="1"/><text x="50.1729%" y="543.50"></text></g><g><title>_mi_deferred_free (1 samples, 0.03%)</title><rect x="49.9229%" y="517" width="0.0257%" height="15" fill="rgb(246,141,4)" fg:x="1942" fg:w="1"/><text x="50.1729%" y="527.50"></text></g><g><title>tokio::runtime::task::core::Header::get_tracing_id (1 samples, 0.03%)</title><rect x="49.9486%" y="677" width="0.0257%" height="15" fill="rgb(229,23,39)" fg:x="1943" fg:w="1"/><text x="50.1986%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.03%)</title><rect x="49.9486%" y="661" width="0.0257%" height="15" fill="rgb(206,12,3)" fg:x="1943" fg:w="1"/><text x="50.1986%" y="671.50"></text></g><g><title>flume::Shared&lt;T&gt;::recv (5 samples, 0.13%)</title><rect x="49.8715%" y="757" width="0.1285%" height="15" fill="rgb(252,226,20)" fg:x="1940" fg:w="5"/><text x="50.1215%" y="767.50"></text></g><g><title>flume::async::RecvFut&lt;T&gt;::poll_inner::_{{closure}} (5 samples, 0.13%)</title><rect x="49.8715%" y="741" width="0.1285%" height="15" fill="rgb(216,123,35)" fg:x="1940" fg:w="5"/><text x="50.1215%" y="751.50"></text></g><g><title>flume::async::AsyncSignal::new (2 samples, 0.05%)</title><rect x="49.9486%" y="725" width="0.0514%" height="15" fill="rgb(212,68,40)" fg:x="1943" fg:w="2"/><text x="50.1986%" y="735.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (2 samples, 0.05%)</title><rect x="49.9486%" y="709" width="0.0514%" height="15" fill="rgb(254,125,32)" fg:x="1943" fg:w="2"/><text x="50.1986%" y="719.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (2 samples, 0.05%)</title><rect x="49.9486%" y="693" width="0.0514%" height="15" fill="rgb(253,97,22)" fg:x="1943" fg:w="2"/><text x="50.1986%" y="703.50"></text></g><g><title>tokio::runtime::task::state::State::ref_inc (1 samples, 0.03%)</title><rect x="49.9743%" y="677" width="0.0257%" height="15" fill="rgb(241,101,14)" fg:x="1944" fg:w="1"/><text x="50.2243%" y="687.50"></text></g><g><title>flume::async::&lt;impl flume::Hook&lt;T,flume::async::AsyncSignal&gt;&gt;::update_waker (1 samples, 0.03%)</title><rect x="50.0000%" y="757" width="0.0257%" height="15" fill="rgb(238,103,29)" fg:x="1945" fg:w="1"/><text x="50.2500%" y="767.50"></text></g><g><title>spin::mutex::Mutex&lt;T,R&gt;::lock (1 samples, 0.03%)</title><rect x="50.0000%" y="741" width="0.0257%" height="15" fill="rgb(233,195,47)" fg:x="1945" fg:w="1"/><text x="50.2500%" y="751.50"></text></g><g><title>spin::mutex::spin::SpinMutex&lt;T,R&gt;::lock (1 samples, 0.03%)</title><rect x="50.0000%" y="725" width="0.0257%" height="15" fill="rgb(246,218,30)" fg:x="1945" fg:w="1"/><text x="50.2500%" y="735.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (1 samples, 0.03%)</title><rect x="50.0000%" y="709" width="0.0257%" height="15" fill="rgb(219,145,47)" fg:x="1945" fg:w="1"/><text x="50.2500%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (1 samples, 0.03%)</title><rect x="50.0000%" y="693" width="0.0257%" height="15" fill="rgb(243,12,26)" fg:x="1945" fg:w="1"/><text x="50.2500%" y="703.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (32 samples, 0.82%)</title><rect x="49.2802%" y="837" width="0.8226%" height="15" fill="rgb(214,87,16)" fg:x="1917" fg:w="32"/><text x="49.5302%" y="847.50"></text></g><g><title>rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}}::_{{closure}}::_{{closure}}::_{{closure}}::_{{closure}} (32 samples, 0.82%)</title><rect x="49.2802%" y="821" width="0.8226%" height="15" fill="rgb(208,99,42)" fg:x="1917" fg:w="32"/><text x="49.5302%" y="831.50"></text></g><g><title>rutin::server::bg_task_channel::BgTaskChannel::recv_from_bg_task::_{{closure}} (11 samples, 0.28%)</title><rect x="49.8201%" y="805" width="0.2828%" height="15" fill="rgb(253,99,2)" fg:x="1938" fg:w="11"/><text x="50.0701%" y="815.50"></text></g><g><title>&lt;flume::async::RecvFut&lt;T&gt; as core::future::future::Future&gt;::poll (11 samples, 0.28%)</title><rect x="49.8201%" y="789" width="0.2828%" height="15" fill="rgb(220,168,23)" fg:x="1938" fg:w="11"/><text x="50.0701%" y="799.50"></text></g><g><title>flume::async::RecvFut&lt;T&gt;::poll_inner (11 samples, 0.28%)</title><rect x="49.8201%" y="773" width="0.2828%" height="15" fill="rgb(242,38,24)" fg:x="1938" fg:w="11"/><text x="50.0701%" y="783.50"></text></g><g><title>flume::wait_lock (3 samples, 0.08%)</title><rect x="50.0257%" y="757" width="0.0771%" height="15" fill="rgb(225,182,9)" fg:x="1946" fg:w="3"/><text x="50.2757%" y="767.50"></text></g><g><title>spin::mutex::Mutex&lt;T,R&gt;::try_lock (2 samples, 0.05%)</title><rect x="50.0514%" y="741" width="0.0514%" height="15" fill="rgb(243,178,37)" fg:x="1947" fg:w="2"/><text x="50.3014%" y="751.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.05%)</title><rect x="50.0514%" y="725" width="0.0514%" height="15" fill="rgb(232,139,19)" fg:x="1947" fg:w="2"/><text x="50.3014%" y="735.50"></text></g><g><title>[libc.so.6] (129 samples, 3.32%)</title><rect x="50.1028%" y="837" width="3.3162%" height="15" fill="rgb(225,201,24)" fg:x="1949" fg:w="129"/><text x="50.3528%" y="847.50">[li..</text></g><g><title>async_shutdown::waker_list::WakerList::deregister (1 samples, 0.03%)</title><rect x="53.4190%" y="789" width="0.0257%" height="15" fill="rgb(221,47,46)" fg:x="2078" fg:w="1"/><text x="53.6690%" y="799.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.03%)</title><rect x="53.4190%" y="773" width="0.0257%" height="15" fill="rgb(249,23,13)" fg:x="2078" fg:w="1"/><text x="53.6690%" y="783.50"></text></g><g><title>core::mem::replace (1 samples, 0.03%)</title><rect x="53.4190%" y="757" width="0.0257%" height="15" fill="rgb(219,9,5)" fg:x="2078" fg:w="1"/><text x="53.6690%" y="767.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="53.4190%" y="741" width="0.0257%" height="15" fill="rgb(254,171,16)" fg:x="2078" fg:w="1"/><text x="53.6690%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt; (1 samples, 0.03%)</title><rect x="53.4447%" y="789" width="0.0257%" height="15" fill="rgb(230,171,20)" fg:x="2079" fg:w="1"/><text x="53.6947%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (1 samples, 0.03%)</title><rect x="53.4447%" y="773" width="0.0257%" height="15" fill="rgb(210,71,41)" fg:x="2079" fg:w="1"/><text x="53.6947%" y="783.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="53.4447%" y="757" width="0.0257%" height="15" fill="rgb(206,173,20)" fg:x="2079" fg:w="1"/><text x="53.6947%" y="767.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (1 samples, 0.03%)</title><rect x="53.4447%" y="741" width="0.0257%" height="15" fill="rgb(233,88,34)" fg:x="2079" fg:w="1"/><text x="53.6947%" y="751.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::drop_reference (1 samples, 0.03%)</title><rect x="53.4447%" y="725" width="0.0257%" height="15" fill="rgb(223,209,46)" fg:x="2079" fg:w="1"/><text x="53.6947%" y="735.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (1 samples, 0.03%)</title><rect x="53.4447%" y="709" width="0.0257%" height="15" fill="rgb(250,43,18)" fg:x="2079" fg:w="1"/><text x="53.6947%" y="719.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (1 samples, 0.03%)</title><rect x="53.4704%" y="773" width="0.0257%" height="15" fill="rgb(208,13,10)" fg:x="2080" fg:w="1"/><text x="53.7204%" y="783.50"></text></g><g><title>std::sync::poison::Flag::guard (1 samples, 0.03%)</title><rect x="53.4704%" y="757" width="0.0257%" height="15" fill="rgb(212,200,36)" fg:x="2080" fg:w="1"/><text x="53.7204%" y="767.50"></text></g><g><title>std::thread::panicking (1 samples, 0.03%)</title><rect x="53.4704%" y="741" width="0.0257%" height="15" fill="rgb(225,90,30)" fg:x="2080" fg:w="1"/><text x="53.7204%" y="751.50"></text></g><g><title>std::panicking::panicking (1 samples, 0.03%)</title><rect x="53.4704%" y="725" width="0.0257%" height="15" fill="rgb(236,182,39)" fg:x="2080" fg:w="1"/><text x="53.7204%" y="735.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (1 samples, 0.03%)</title><rect x="53.4704%" y="709" width="0.0257%" height="15" fill="rgb(212,144,35)" fg:x="2080" fg:w="1"/><text x="53.7204%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.03%)</title><rect x="53.4704%" y="693" width="0.0257%" height="15" fill="rgb(228,63,44)" fg:x="2080" fg:w="1"/><text x="53.7204%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.03%)</title><rect x="53.4704%" y="677" width="0.0257%" height="15" fill="rgb(228,109,6)" fg:x="2080" fg:w="1"/><text x="53.7204%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;(async_shutdown::shutdown_signal::ShutdownSignal&lt;()&gt;,rutin::connection::Connection::read_frames::{{closure}},rutin::server::bg_task_channel::BgTaskChannel::recv_from_bg_task::{{closure}})&gt; (4 samples, 0.10%)</title><rect x="53.4190%" y="837" width="0.1028%" height="15" fill="rgb(238,117,24)" fg:x="2078" fg:w="4"/><text x="53.6690%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_shutdown::shutdown_signal::ShutdownSignal&lt;()&gt;&gt; (4 samples, 0.10%)</title><rect x="53.4190%" y="821" width="0.1028%" height="15" fill="rgb(242,26,26)" fg:x="2078" fg:w="4"/><text x="53.6690%" y="831.50"></text></g><g><title>&lt;async_shutdown::shutdown_signal::ShutdownSignal&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.10%)</title><rect x="53.4190%" y="805" width="0.1028%" height="15" fill="rgb(221,92,48)" fg:x="2078" fg:w="4"/><text x="53.6690%" y="815.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (2 samples, 0.05%)</title><rect x="53.4704%" y="789" width="0.0514%" height="15" fill="rgb(209,209,32)" fg:x="2080" fg:w="2"/><text x="53.7204%" y="799.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (1 samples, 0.03%)</title><rect x="53.4961%" y="773" width="0.0257%" height="15" fill="rgb(221,70,22)" fg:x="2081" fg:w="1"/><text x="53.7461%" y="783.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (1 samples, 0.03%)</title><rect x="53.4961%" y="757" width="0.0257%" height="15" fill="rgb(248,145,5)" fg:x="2081" fg:w="1"/><text x="53.7461%" y="767.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (1 samples, 0.03%)</title><rect x="53.4961%" y="741" width="0.0257%" height="15" fill="rgb(226,116,26)" fg:x="2081" fg:w="1"/><text x="53.7461%" y="751.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain::_{{closure}} (2 samples, 0.05%)</title><rect x="53.5476%" y="757" width="0.0514%" height="15" fill="rgb(244,5,17)" fg:x="2083" fg:w="2"/><text x="53.7976%" y="767.50"></text></g><g><title>flume::async::RecvFut&lt;T&gt;::reset_hook::_{{closure}} (2 samples, 0.05%)</title><rect x="53.5476%" y="741" width="0.0514%" height="15" fill="rgb(252,159,33)" fg:x="2083" fg:w="2"/><text x="53.7976%" y="751.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain (3 samples, 0.08%)</title><rect x="53.5476%" y="789" width="0.0771%" height="15" fill="rgb(206,71,0)" fg:x="2083" fg:w="3"/><text x="53.7976%" y="799.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain_mut (3 samples, 0.08%)</title><rect x="53.5476%" y="773" width="0.0771%" height="15" fill="rgb(233,118,54)" fg:x="2083" fg:w="3"/><text x="53.7976%" y="783.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::truncate (1 samples, 0.03%)</title><rect x="53.5990%" y="757" width="0.0257%" height="15" fill="rgb(234,83,48)" fg:x="2085" fg:w="1"/><text x="53.8490%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;flume::async::AsyncSignal&gt; (2 samples, 0.05%)</title><rect x="53.6247%" y="725" width="0.0514%" height="15" fill="rgb(228,3,54)" fg:x="2086" fg:w="2"/><text x="53.8747%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.08%)</title><rect x="53.6247%" y="757" width="0.0771%" height="15" fill="rgb(226,155,13)" fg:x="2086" fg:w="3"/><text x="53.8747%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;flume::Hook&lt;rutin::frame::Resp3,dyn flume::signal::Signal&gt;&gt; (3 samples, 0.08%)</title><rect x="53.6247%" y="741" width="0.0771%" height="15" fill="rgb(241,28,37)" fg:x="2086" fg:w="3"/><text x="53.8747%" y="751.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (1 samples, 0.03%)</title><rect x="53.6761%" y="725" width="0.0257%" height="15" fill="rgb(233,93,10)" fg:x="2088" fg:w="1"/><text x="53.9261%" y="735.50"></text></g><g><title>tokio::runtime::task::core::Header::get_tracing_id (1 samples, 0.03%)</title><rect x="53.6761%" y="709" width="0.0257%" height="15" fill="rgb(225,113,19)" fg:x="2088" fg:w="1"/><text x="53.9261%" y="719.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.03%)</title><rect x="53.6761%" y="693" width="0.0257%" height="15" fill="rgb(241,2,18)" fg:x="2088" fg:w="1"/><text x="53.9261%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;flume::Hook&lt;rutin::frame::Resp3,dyn flume::signal::Signal&gt;&gt;&gt; (5 samples, 0.13%)</title><rect x="53.6247%" y="789" width="0.1285%" height="15" fill="rgb(228,207,21)" fg:x="2086" fg:w="5"/><text x="53.8747%" y="799.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.13%)</title><rect x="53.6247%" y="773" width="0.1285%" height="15" fill="rgb(213,211,35)" fg:x="2086" fg:w="5"/><text x="53.8747%" y="783.50"></text></g><g><title>mi_free (2 samples, 0.05%)</title><rect x="53.7018%" y="757" width="0.0514%" height="15" fill="rgb(209,83,10)" fg:x="2089" fg:w="2"/><text x="53.9518%" y="767.50"></text></g><g><title>_mi_segment_page_of (2 samples, 0.05%)</title><rect x="53.7018%" y="741" width="0.0514%" height="15" fill="rgb(209,164,1)" fg:x="2089" fg:w="2"/><text x="53.9518%" y="751.50"></text></g><g><title>mi_slice_first (2 samples, 0.05%)</title><rect x="53.7018%" y="725" width="0.0514%" height="15" fill="rgb(213,184,43)" fg:x="2089" fg:w="2"/><text x="53.9518%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;flume::async::RecvFut&lt;rutin::frame::Resp3&gt;&gt; (11 samples, 0.28%)</title><rect x="53.5219%" y="837" width="0.2828%" height="15" fill="rgb(231,61,34)" fg:x="2082" fg:w="11"/><text x="53.7719%" y="847.50"></text></g><g><title>&lt;flume::async::RecvFut&lt;T&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.26%)</title><rect x="53.5476%" y="821" width="0.2571%" height="15" fill="rgb(235,75,3)" fg:x="2083" fg:w="10"/><text x="53.7976%" y="831.50"></text></g><g><title>flume::async::RecvFut&lt;T&gt;::reset_hook (10 samples, 0.26%)</title><rect x="53.5476%" y="805" width="0.2571%" height="15" fill="rgb(220,106,47)" fg:x="2083" fg:w="10"/><text x="53.7976%" y="815.50"></text></g><g><title>flume::wait_lock (2 samples, 0.05%)</title><rect x="53.7532%" y="789" width="0.0514%" height="15" fill="rgb(210,196,33)" fg:x="2091" fg:w="2"/><text x="54.0032%" y="799.50"></text></g><g><title>spin::mutex::Mutex&lt;T,R&gt;::try_lock (2 samples, 0.05%)</title><rect x="53.7532%" y="773" width="0.0514%" height="15" fill="rgb(229,154,42)" fg:x="2091" fg:w="2"/><text x="54.0032%" y="783.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.05%)</title><rect x="53.7532%" y="757" width="0.0514%" height="15" fill="rgb(228,114,26)" fg:x="2091" fg:w="2"/><text x="54.0032%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::cmd::dispatch&lt;rutin::connection::FakeStream&gt;::{{closure}}&gt; (2 samples, 0.05%)</title><rect x="53.8046%" y="837" width="0.0514%" height="15" fill="rgb(208,144,1)" fg:x="2093" fg:w="2"/><text x="54.0546%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::connection::Connection::write_frame&lt;bytes::bytes::Bytes,alloc::string::String&gt;::{{closure}}&gt; (8 samples, 0.21%)</title><rect x="53.8560%" y="837" width="0.2057%" height="15" fill="rgb(239,112,37)" fg:x="2095" fg:w="8"/><text x="54.1060%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::frame::Resp3&gt; (6 samples, 0.15%)</title><rect x="54.0617%" y="837" width="0.1542%" height="15" fill="rgb(210,96,50)" fg:x="2103" fg:w="6"/><text x="54.3117%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;smallvec::IntoIter&lt;[rutin::frame::Resp3: 32]&gt;&gt; (1 samples, 0.03%)</title><rect x="54.2159%" y="837" width="0.0257%" height="15" fill="rgb(222,178,2)" fg:x="2109" fg:w="1"/><text x="54.4659%" y="847.50"></text></g><g><title>[libc.so.6] (258 samples, 6.63%)</title><rect x="54.5501%" y="821" width="6.6324%" height="15" fill="rgb(226,74,18)" fg:x="2122" fg:w="258"/><text x="54.8001%" y="831.50">[libc.so...</text></g><g><title>core::ptr::drop_in_place&lt;rutin::cmd::dispatch&lt;tokio::net::tcp::stream::TcpStream&gt;::{{closure}}::{{closure}}&gt; (1 samples, 0.03%)</title><rect x="61.1825%" y="821" width="0.0257%" height="15" fill="rgb(225,67,54)" fg:x="2380" fg:w="1"/><text x="61.4325%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::Span&gt; (3 samples, 0.08%)</title><rect x="61.2082%" y="821" width="0.0771%" height="15" fill="rgb(251,92,32)" fg:x="2381" fg:w="3"/><text x="61.4582%" y="831.50"></text></g><g><title>&lt;tracing::span::Span as core::ops::drop::Drop&gt;::drop (3 samples, 0.08%)</title><rect x="61.2082%" y="805" width="0.0771%" height="15" fill="rgb(228,149,22)" fg:x="2381" fg:w="3"/><text x="61.4582%" y="815.50"></text></g><g><title>[libc.so.6] (63 samples, 1.62%)</title><rect x="63.0848%" y="805" width="1.6195%" height="15" fill="rgb(243,54,13)" fg:x="2454" fg:w="63"/><text x="63.3348%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::cmd::dispatch&lt;rutin::connection::FakeStream&gt;::{{closure}}::{{closure}}::{{closure}}&gt; (4 samples, 0.10%)</title><rect x="64.7044%" y="805" width="0.1028%" height="15" fill="rgb(243,180,28)" fg:x="2517" fg:w="4"/><text x="64.9544%" y="815.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (23 samples, 0.59%)</title><rect x="65.9897%" y="789" width="0.5913%" height="15" fill="rgb(208,167,24)" fg:x="2567" fg:w="23"/><text x="66.2397%" y="799.50"></text></g><g><title>&lt;rutin::cmd::CmdUnparsed as core::convert::TryFrom&lt;rutin::frame::Resp3&gt;&gt;::try_from (23 samples, 0.59%)</title><rect x="65.9897%" y="773" width="0.5913%" height="15" fill="rgb(245,73,45)" fg:x="2567" fg:w="23"/><text x="66.2397%" y="783.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (31 samples, 0.80%)</title><rect x="66.5810%" y="789" width="0.7969%" height="15" fill="rgb(237,203,48)" fg:x="2590" fg:w="31"/><text x="66.8310%" y="799.50"></text></g><g><title>bytes::bytes::Bytes::with_vtable (4 samples, 0.10%)</title><rect x="68.0206%" y="741" width="0.1028%" height="15" fill="rgb(211,197,16)" fg:x="2646" fg:w="4"/><text x="68.2706%" y="751.50"></text></g><g><title>bytes::bytes_mut::increment_shared (21 samples, 0.54%)</title><rect x="68.1234%" y="741" width="0.5398%" height="15" fill="rgb(243,99,51)" fg:x="2650" fg:w="21"/><text x="68.3734%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (4 samples, 0.10%)</title><rect x="68.5604%" y="725" width="0.1028%" height="15" fill="rgb(215,123,29)" fg:x="2667" fg:w="4"/><text x="68.8104%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_add (4 samples, 0.10%)</title><rect x="68.5604%" y="709" width="0.1028%" height="15" fill="rgb(239,186,37)" fg:x="2667" fg:w="4"/><text x="68.8104%" y="719.50"></text></g><g><title>&lt;rutin::cmd::CmdUnparsed as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 1.39%)</title><rect x="67.3779%" y="789" width="1.3882%" height="15" fill="rgb(252,136,39)" fg:x="2621" fg:w="54"/><text x="67.6279%" y="799.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (33 samples, 0.85%)</title><rect x="67.9177%" y="773" width="0.8483%" height="15" fill="rgb(223,213,32)" fg:x="2642" fg:w="33"/><text x="68.1677%" y="783.50"></text></g><g><title>bytes::bytes_mut::shared_v_clone (29 samples, 0.75%)</title><rect x="68.0206%" y="757" width="0.7455%" height="15" fill="rgb(233,115,5)" fg:x="2646" fg:w="29"/><text x="68.2706%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (4 samples, 0.10%)</title><rect x="68.6632%" y="741" width="0.1028%" height="15" fill="rgb(207,226,44)" fg:x="2671" fg:w="4"/><text x="68.9132%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_load (4 samples, 0.10%)</title><rect x="68.6632%" y="725" width="0.1028%" height="15" fill="rgb(208,126,0)" fg:x="2671" fg:w="4"/><text x="68.9132%" y="735.50"></text></g><g><title>&lt;rutin::error::RutinError as core::convert::TryInto&lt;rutin::frame::Resp3&gt;&gt;::try_into (5 samples, 0.13%)</title><rect x="68.7661%" y="789" width="0.1285%" height="15" fill="rgb(244,66,21)" fg:x="2675" fg:w="5"/><text x="69.0161%" y="799.50"></text></g><g><title>[libc.so.6] (26 samples, 0.67%)</title><rect x="68.8946%" y="789" width="0.6684%" height="15" fill="rgb(222,97,12)" fg:x="2680" fg:w="26"/><text x="69.1446%" y="799.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or_else (21 samples, 0.54%)</title><rect x="69.5630%" y="789" width="0.5398%" height="15" fill="rgb(219,213,19)" fg:x="2706" fg:w="21"/><text x="69.8130%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;rutin::cmd::commands::str::Get as rutin::cmd::CmdExecutor&gt;::apply&lt;rutin::connection::FakeStream&gt;::{{closure}}&gt; (4 samples, 0.10%)</title><rect x="70.1028%" y="789" width="0.1028%" height="15" fill="rgb(252,169,30)" fg:x="2727" fg:w="4"/><text x="70.3528%" y="799.50"></text></g><g><title>mi_free (1 samples, 0.03%)</title><rect x="70.8483%" y="533" width="0.0257%" height="15" fill="rgb(206,32,51)" fg:x="2756" fg:w="1"/><text x="71.0983%" y="543.50"></text></g><g><title>mi_free_block_local (1 samples, 0.03%)</title><rect x="70.8483%" y="517" width="0.0257%" height="15" fill="rgb(250,172,42)" fg:x="2756" fg:w="1"/><text x="71.0983%" y="527.50"></text></g><g><title>mi_block_set_next (1 samples, 0.03%)</title><rect x="70.8483%" y="501" width="0.0257%" height="15" fill="rgb(209,34,43)" fg:x="2756" fg:w="1"/><text x="71.0983%" y="511.50"></text></g><g><title>mi_block_set_nextx (1 samples, 0.03%)</title><rect x="70.8483%" y="485" width="0.0257%" height="15" fill="rgb(223,11,35)" fg:x="2756" fg:w="1"/><text x="71.0983%" y="495.50"></text></g><g><title>mi_free_block_delayed_mt (1 samples, 0.03%)</title><rect x="70.8740%" y="533" width="0.0257%" height="15" fill="rgb(251,219,26)" fg:x="2757" fg:w="1"/><text x="71.1240%" y="543.50"></text></g><g><title>core::mem::drop (4 samples, 0.10%)</title><rect x="70.8483%" y="693" width="0.1028%" height="15" fill="rgb(231,119,3)" fg:x="2756" fg:w="4"/><text x="71.0983%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;bytes::bytes_mut::Shared&gt;&gt; (4 samples, 0.10%)</title><rect x="70.8483%" y="677" width="0.1028%" height="15" fill="rgb(216,97,11)" fg:x="2756" fg:w="4"/><text x="71.0983%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::Shared&gt; (4 samples, 0.10%)</title><rect x="70.8483%" y="661" width="0.1028%" height="15" fill="rgb(223,59,9)" fg:x="2756" fg:w="4"/><text x="71.0983%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4 samples, 0.10%)</title><rect x="70.8483%" y="645" width="0.1028%" height="15" fill="rgb(233,93,31)" fg:x="2756" fg:w="4"/><text x="71.0983%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4 samples, 0.10%)</title><rect x="70.8483%" y="629" width="0.1028%" height="15" fill="rgb(239,81,33)" fg:x="2756" fg:w="4"/><text x="71.0983%" y="639.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.10%)</title><rect x="70.8483%" y="613" width="0.1028%" height="15" fill="rgb(213,120,34)" fg:x="2756" fg:w="4"/><text x="71.0983%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.10%)</title><rect x="70.8483%" y="597" width="0.1028%" height="15" fill="rgb(243,49,53)" fg:x="2756" fg:w="4"/><text x="71.0983%" y="607.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.10%)</title><rect x="70.8483%" y="581" width="0.1028%" height="15" fill="rgb(247,216,33)" fg:x="2756" fg:w="4"/><text x="71.0983%" y="591.50"></text></g><g><title>__rust_dealloc (4 samples, 0.10%)</title><rect x="70.8483%" y="565" width="0.1028%" height="15" fill="rgb(226,26,14)" fg:x="2756" fg:w="4"/><text x="71.0983%" y="575.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (4 samples, 0.10%)</title><rect x="70.8483%" y="549" width="0.1028%" height="15" fill="rgb(215,49,53)" fg:x="2756" fg:w="4"/><text x="71.0983%" y="559.50"></text></g><g><title>mi_free_generic_mt (2 samples, 0.05%)</title><rect x="70.8997%" y="533" width="0.0514%" height="15" fill="rgb(245,162,40)" fg:x="2758" fg:w="2"/><text x="71.1497%" y="543.50"></text></g><g><title>_mi_page_ptr_unalign (1 samples, 0.03%)</title><rect x="70.9254%" y="517" width="0.0257%" height="15" fill="rgb(229,68,17)" fg:x="2759" fg:w="1"/><text x="71.1754%" y="527.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (30 samples, 0.77%)</title><rect x="70.2057%" y="757" width="0.7712%" height="15" fill="rgb(213,182,10)" fg:x="2731" fg:w="30"/><text x="70.4557%" y="767.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (30 samples, 0.77%)</title><rect x="70.2057%" y="741" width="0.7712%" height="15" fill="rgb(245,125,30)" fg:x="2731" fg:w="30"/><text x="70.4557%" y="751.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop::_{{closure}} (30 samples, 0.77%)</title><rect x="70.2057%" y="725" width="0.7712%" height="15" fill="rgb(232,202,2)" fg:x="2731" fg:w="30"/><text x="70.4557%" y="735.50"></text></g><g><title>bytes::bytes_mut::release_shared (29 samples, 0.75%)</title><rect x="70.2314%" y="709" width="0.7455%" height="15" fill="rgb(237,140,51)" fg:x="2732" fg:w="29"/><text x="70.4814%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.03%)</title><rect x="70.9512%" y="693" width="0.0257%" height="15" fill="rgb(236,157,25)" fg:x="2760" fg:w="1"/><text x="71.2012%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.03%)</title><rect x="70.9512%" y="677" width="0.0257%" height="15" fill="rgb(219,209,0)" fg:x="2760" fg:w="1"/><text x="71.2012%" y="687.50"></text></g><g><title>mi_free (1 samples, 0.03%)</title><rect x="70.9769%" y="757" width="0.0257%" height="15" fill="rgb(240,116,54)" fg:x="2761" fg:w="1"/><text x="71.2269%" y="767.50"></text></g><g><title>mi_free_block_local (1 samples, 0.03%)</title><rect x="70.9769%" y="741" width="0.0257%" height="15" fill="rgb(216,10,36)" fg:x="2761" fg:w="1"/><text x="71.2269%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (32 samples, 0.82%)</title><rect x="70.2057%" y="789" width="0.8226%" height="15" fill="rgb(222,72,44)" fg:x="2731" fg:w="32"/><text x="70.4557%" y="799.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (32 samples, 0.82%)</title><rect x="70.2057%" y="773" width="0.8226%" height="15" fill="rgb(232,159,9)" fg:x="2731" fg:w="32"/><text x="70.4557%" y="783.50"></text></g><g><title>mi_free_block_delayed_mt (1 samples, 0.03%)</title><rect x="71.0026%" y="757" width="0.0257%" height="15" fill="rgb(210,39,32)" fg:x="2762" fg:w="1"/><text x="71.2526%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::error::RutinError&gt; (2 samples, 0.05%)</title><rect x="71.0283%" y="789" width="0.0514%" height="15" fill="rgb(216,194,45)" fg:x="2763" fg:w="2"/><text x="71.2783%" y="799.50"></text></g><g><title>core::str::converts::from_utf8 (12 samples, 0.31%)</title><rect x="71.0797%" y="789" width="0.3085%" height="15" fill="rgb(218,18,35)" fg:x="2765" fg:w="12"/><text x="71.3297%" y="799.50"></text></g><g><title>core::str::validations::run_utf8_validation (7 samples, 0.18%)</title><rect x="71.2082%" y="773" width="0.1799%" height="15" fill="rgb(207,83,51)" fg:x="2770" fg:w="7"/><text x="71.4582%" y="783.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.03%)</title><rect x="71.3625%" y="757" width="0.0257%" height="15" fill="rgb(225,63,43)" fg:x="2776" fg:w="1"/><text x="71.6125%" y="767.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (7 samples, 0.18%)</title><rect x="71.3882%" y="789" width="0.1799%" height="15" fill="rgb(207,57,36)" fg:x="2777" fg:w="7"/><text x="71.6382%" y="799.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (7 samples, 0.18%)</title><rect x="71.3882%" y="773" width="0.1799%" height="15" fill="rgb(216,99,33)" fg:x="2777" fg:w="7"/><text x="71.6382%" y="783.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (7 samples, 0.18%)</title><rect x="71.3882%" y="757" width="0.1799%" height="15" fill="rgb(225,42,16)" fg:x="2777" fg:w="7"/><text x="71.6382%" y="767.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (7 samples, 0.18%)</title><rect x="71.3882%" y="741" width="0.1799%" height="15" fill="rgb(220,201,45)" fg:x="2777" fg:w="7"/><text x="71.6382%" y="751.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="72.2365%" y="773" width="0.0257%" height="15" fill="rgb(225,33,4)" fg:x="2810" fg:w="1"/><text x="72.4865%" y="783.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.05%)</title><rect x="75.0386%" y="725" width="0.0514%" height="15" fill="rgb(224,33,50)" fg:x="2919" fg:w="2"/><text x="75.2886%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::cmd::commands::str::Get&gt; (32 samples, 0.82%)</title><rect x="75.0900%" y="725" width="0.8226%" height="15" fill="rgb(246,198,51)" fg:x="2921" fg:w="32"/><text x="75.3400%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::shared::db::object::str::Str&gt; (32 samples, 0.82%)</title><rect x="75.0900%" y="709" width="0.8226%" height="15" fill="rgb(205,22,4)" fg:x="2921" fg:w="32"/><text x="75.3400%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (31 samples, 0.80%)</title><rect x="75.1157%" y="693" width="0.7969%" height="15" fill="rgb(206,3,8)" fg:x="2922" fg:w="31"/><text x="75.3657%" y="703.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (31 samples, 0.80%)</title><rect x="75.1157%" y="677" width="0.7969%" height="15" fill="rgb(251,23,15)" fg:x="2922" fg:w="31"/><text x="75.3657%" y="687.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (29 samples, 0.75%)</title><rect x="75.1671%" y="661" width="0.7455%" height="15" fill="rgb(252,88,28)" fg:x="2924" fg:w="29"/><text x="75.4171%" y="671.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (27 samples, 0.69%)</title><rect x="75.2185%" y="645" width="0.6941%" height="15" fill="rgb(212,127,14)" fg:x="2926" fg:w="27"/><text x="75.4685%" y="655.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop::_{{closure}} (27 samples, 0.69%)</title><rect x="75.2185%" y="629" width="0.6941%" height="15" fill="rgb(247,145,37)" fg:x="2926" fg:w="27"/><text x="75.4685%" y="639.50"></text></g><g><title>bytes::bytes_mut::release_shared (23 samples, 0.59%)</title><rect x="75.3213%" y="613" width="0.5913%" height="15" fill="rgb(209,117,53)" fg:x="2930" fg:w="23"/><text x="75.5713%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::shared::db::Db::visit_object&lt;&lt;rutin::cmd::commands::key::Ttl as rutin::cmd::CmdExecutor&gt;::execute&lt;rutin::connection::FakeStream&gt;::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;::{{closure}}&gt; (12 samples, 0.31%)</title><rect x="75.9126%" y="725" width="0.3085%" height="15" fill="rgb(212,90,42)" fg:x="2953" fg:w="12"/><text x="76.1626%" y="735.50"></text></g><g><title>[libc.so.6] (64 samples, 1.65%)</title><rect x="76.9152%" y="709" width="1.6452%" height="15" fill="rgb(218,164,37)" fg:x="2992" fg:w="64"/><text x="77.1652%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::shared::db::Db::visit_object&lt;&lt;rutin::cmd::commands::key::Ttl as rutin::cmd::CmdExecutor&gt;::execute&lt;rutin::connection::FakeStream&gt;::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;::{{closure}}::{{closure}}&gt; (1 samples, 0.03%)</title><rect x="78.5604%" y="709" width="0.0257%" height="15" fill="rgb(246,65,34)" fg:x="3056" fg:w="1"/><text x="78.8104%" y="719.50"></text></g><g><title>[libc.so.6] (29 samples, 0.75%)</title><rect x="80.9769%" y="677" width="0.7455%" height="15" fill="rgb(231,100,33)" fg:x="3150" fg:w="29"/><text x="81.2269%" y="687.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_read_shard (164 samples, 4.22%)</title><rect x="82.3393%" y="629" width="4.2159%" height="15" fill="rgb(228,126,14)" fg:x="3203" fg:w="164"/><text x="82.5893%" y="639.50">&lt;dash..</text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::read (160 samples, 4.11%)</title><rect x="82.4422%" y="613" width="4.1131%" height="15" fill="rgb(215,173,21)" fg:x="3207" fg:w="160"/><text x="82.6922%" y="623.50">lock..</text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_shared (160 samples, 4.11%)</title><rect x="82.4422%" y="597" width="4.1131%" height="15" fill="rgb(210,6,40)" fg:x="3207" fg:w="160"/><text x="82.6922%" y="607.50">&lt;das..</text></g><g><title>dashmap::lock::RawRwLock::try_lock_shared_fast (107 samples, 2.75%)</title><rect x="83.8046%" y="581" width="2.7506%" height="15" fill="rgb(212,48,18)" fg:x="3260" fg:w="107"/><text x="84.0546%" y="591.50">da..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (107 samples, 2.75%)</title><rect x="83.8046%" y="565" width="2.7506%" height="15" fill="rgb(230,214,11)" fg:x="3260" fg:w="107"/><text x="84.0546%" y="575.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::raw::inner::RawTable&lt;(rutin::shared::db::object::str::Str,dashmap::util::SharedValue&lt;rutin::shared::db::object::Object&gt;)&gt;&gt;&gt; (16 samples, 0.41%)</title><rect x="86.5553%" y="629" width="0.4113%" height="15" fill="rgb(254,105,39)" fg:x="3367" fg:w="16"/><text x="86.8053%" y="639.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockReadGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.41%)</title><rect x="86.5553%" y="613" width="0.4113%" height="15" fill="rgb(245,158,5)" fg:x="3367" fg:w="16"/><text x="86.8053%" y="623.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_shared (16 samples, 0.41%)</title><rect x="86.5553%" y="597" width="0.4113%" height="15" fill="rgb(249,208,11)" fg:x="3367" fg:w="16"/><text x="86.8053%" y="607.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::determine_shard (6 samples, 0.15%)</title><rect x="86.9666%" y="629" width="0.1542%" height="15" fill="rgb(210,39,28)" fg:x="3383" fg:w="6"/><text x="87.2166%" y="639.50"></text></g><g><title>ahash::operations::folded_multiply (1 samples, 0.03%)</title><rect x="87.1208%" y="597" width="0.0257%" height="15" fill="rgb(211,56,53)" fg:x="3389" fg:w="1"/><text x="87.3708%" y="607.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (3 samples, 0.08%)</title><rect x="87.1208%" y="613" width="0.0771%" height="15" fill="rgb(226,201,30)" fg:x="3389" fg:w="3"/><text x="87.3708%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.05%)</title><rect x="87.1465%" y="597" width="0.0514%" height="15" fill="rgb(239,101,34)" fg:x="3390" fg:w="2"/><text x="87.3965%" y="607.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.03%)</title><rect x="87.1979%" y="613" width="0.0257%" height="15" fill="rgb(226,209,5)" fg:x="3392" fg:w="1"/><text x="87.4479%" y="623.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (1 samples, 0.03%)</title><rect x="87.1979%" y="597" width="0.0257%" height="15" fill="rgb(250,105,47)" fg:x="3392" fg:w="1"/><text x="87.4479%" y="607.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.05%)</title><rect x="87.4036%" y="549" width="0.0514%" height="15" fill="rgb(230,72,3)" fg:x="3400" fg:w="2"/><text x="87.6536%" y="559.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (2 samples, 0.05%)</title><rect x="87.4036%" y="533" width="0.0514%" height="15" fill="rgb(232,218,39)" fg:x="3400" fg:w="2"/><text x="87.6536%" y="543.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (2 samples, 0.05%)</title><rect x="87.4036%" y="517" width="0.0514%" height="15" fill="rgb(248,166,6)" fg:x="3400" fg:w="2"/><text x="87.6536%" y="527.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (2 samples, 0.05%)</title><rect x="87.4036%" y="501" width="0.0514%" height="15" fill="rgb(247,89,20)" fg:x="3400" fg:w="2"/><text x="87.6536%" y="511.50"></text></g><g><title>ahash::operations::folded_multiply (2 samples, 0.05%)</title><rect x="87.4036%" y="485" width="0.0514%" height="15" fill="rgb(248,130,54)" fg:x="3400" fg:w="2"/><text x="87.6536%" y="495.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (2 samples, 0.05%)</title><rect x="87.4036%" y="469" width="0.0514%" height="15" fill="rgb(234,196,4)" fg:x="3400" fg:w="2"/><text x="87.6536%" y="479.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (1 samples, 0.03%)</title><rect x="87.5064%" y="517" width="0.0257%" height="15" fill="rgb(250,143,31)" fg:x="3404" fg:w="1"/><text x="87.7564%" y="527.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::hash::Hash&gt;::hash (6 samples, 0.15%)</title><rect x="87.4036%" y="581" width="0.1542%" height="15" fill="rgb(211,110,34)" fg:x="3400" fg:w="6"/><text x="87.6536%" y="591.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (6 samples, 0.15%)</title><rect x="87.4036%" y="565" width="0.1542%" height="15" fill="rgb(215,124,48)" fg:x="3400" fg:w="6"/><text x="87.6536%" y="575.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (4 samples, 0.10%)</title><rect x="87.4550%" y="549" width="0.1028%" height="15" fill="rgb(216,46,13)" fg:x="3402" fg:w="4"/><text x="87.7050%" y="559.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (4 samples, 0.10%)</title><rect x="87.4550%" y="533" width="0.1028%" height="15" fill="rgb(205,184,25)" fg:x="3402" fg:w="4"/><text x="87.7050%" y="543.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (1 samples, 0.03%)</title><rect x="87.5321%" y="517" width="0.0257%" height="15" fill="rgb(228,1,10)" fg:x="3405" fg:w="1"/><text x="87.7821%" y="527.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_u64 (20 samples, 0.51%)</title><rect x="87.1208%" y="629" width="0.5141%" height="15" fill="rgb(213,116,27)" fg:x="3389" fg:w="20"/><text x="87.3708%" y="639.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (16 samples, 0.41%)</title><rect x="87.2237%" y="613" width="0.4113%" height="15" fill="rgb(241,95,50)" fg:x="3393" fg:w="16"/><text x="87.4737%" y="623.50"></text></g><g><title>&lt;rutin::shared::db::object::str::Str as core::hash::Hash&gt;::hash (16 samples, 0.41%)</title><rect x="87.2237%" y="597" width="0.4113%" height="15" fill="rgb(238,48,32)" fg:x="3393" fg:w="16"/><text x="87.4737%" y="607.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (3 samples, 0.08%)</title><rect x="87.5578%" y="581" width="0.0771%" height="15" fill="rgb(235,113,49)" fg:x="3406" fg:w="3"/><text x="87.8078%" y="591.50"></text></g><g><title>core::hash::Hasher::write_isize (3 samples, 0.08%)</title><rect x="87.5578%" y="565" width="0.0771%" height="15" fill="rgb(205,127,43)" fg:x="3406" fg:w="3"/><text x="87.8078%" y="575.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (3 samples, 0.08%)</title><rect x="87.5578%" y="549" width="0.0771%" height="15" fill="rgb(250,162,2)" fg:x="3406" fg:w="3"/><text x="87.8078%" y="559.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (3 samples, 0.08%)</title><rect x="87.5578%" y="533" width="0.0771%" height="15" fill="rgb(220,13,41)" fg:x="3406" fg:w="3"/><text x="87.8078%" y="543.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (3 samples, 0.08%)</title><rect x="87.5578%" y="517" width="0.0771%" height="15" fill="rgb(249,221,25)" fg:x="3406" fg:w="3"/><text x="87.8078%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.08%)</title><rect x="87.7121%" y="597" width="0.0771%" height="15" fill="rgb(215,208,19)" fg:x="3412" fg:w="3"/><text x="87.9621%" y="607.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (3 samples, 0.08%)</title><rect x="87.7121%" y="581" width="0.0771%" height="15" fill="rgb(236,175,2)" fg:x="3412" fg:w="3"/><text x="87.9621%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::probe_seq (1 samples, 0.03%)</title><rect x="87.7892%" y="597" width="0.0257%" height="15" fill="rgb(241,52,2)" fg:x="3415" fg:w="1"/><text x="88.0392%" y="607.50"></text></g><g><title>hashbrown::raw::inner::h2 (2 samples, 0.05%)</title><rect x="87.8149%" y="597" width="0.0514%" height="15" fill="rgb(248,140,14)" fg:x="3416" fg:w="2"/><text x="88.0649%" y="607.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (21 samples, 0.54%)</title><rect x="87.8663%" y="597" width="0.5398%" height="15" fill="rgb(253,22,42)" fg:x="3418" fg:w="21"/><text x="88.1163%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (21 samples, 0.54%)</title><rect x="87.8663%" y="581" width="0.5398%" height="15" fill="rgb(234,61,47)" fg:x="3418" fg:w="21"/><text x="88.1163%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (21 samples, 0.54%)</title><rect x="87.8663%" y="565" width="0.5398%" height="15" fill="rgb(208,226,15)" fg:x="3418" fg:w="21"/><text x="88.1163%" y="575.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (2 samples, 0.05%)</title><rect x="88.4062%" y="597" width="0.0514%" height="15" fill="rgb(217,221,4)" fg:x="3439" fg:w="2"/><text x="88.6562%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.05%)</title><rect x="88.4062%" y="581" width="0.0514%" height="15" fill="rgb(212,174,34)" fg:x="3439" fg:w="2"/><text x="88.6562%" y="591.50"></text></g><g><title>rutin::shared::db::Db::get::_{{closure}}::_{{closure}} (267 samples, 6.86%)</title><rect x="81.7224%" y="677" width="6.8638%" height="15" fill="rgb(253,83,4)" fg:x="3179" fg:w="267"/><text x="81.9724%" y="687.50">rutin::sh..</text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (252 samples, 6.48%)</title><rect x="82.1080%" y="661" width="6.4781%" height="15" fill="rgb(250,195,49)" fg:x="3194" fg:w="252"/><text x="82.3580%" y="671.50">dashmap:..</text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (245 samples, 6.30%)</title><rect x="82.2879%" y="645" width="6.2982%" height="15" fill="rgb(241,192,25)" fg:x="3201" fg:w="245"/><text x="82.5379%" y="655.50">&lt;dashmap..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (37 samples, 0.95%)</title><rect x="87.6350%" y="629" width="0.9512%" height="15" fill="rgb(208,124,10)" fg:x="3409" fg:w="37"/><text x="87.8850%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_inner (37 samples, 0.95%)</title><rect x="87.6350%" y="613" width="0.9512%" height="15" fill="rgb(222,33,0)" fg:x="3409" fg:w="37"/><text x="87.8850%" y="623.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (5 samples, 0.13%)</title><rect x="88.4576%" y="597" width="0.1285%" height="15" fill="rgb(234,209,28)" fg:x="3441" fg:w="5"/><text x="88.7076%" y="607.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (5 samples, 0.13%)</title><rect x="88.4576%" y="581" width="0.1285%" height="15" fill="rgb(224,11,23)" fg:x="3441" fg:w="5"/><text x="88.7076%" y="591.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (5 samples, 0.13%)</title><rect x="88.4576%" y="565" width="0.1285%" height="15" fill="rgb(232,99,1)" fg:x="3441" fg:w="5"/><text x="88.7076%" y="575.50"></text></g><g><title>&lt;rutin::cmd::commands::str::Get as rutin::cmd::CmdExecutor&gt;::execute::_{{closure}}::_{{closure}}::_{{closure}} (536 samples, 13.78%)</title><rect x="74.8329%" y="741" width="13.7789%" height="15" fill="rgb(237,95,45)" fg:x="2911" fg:w="536"/><text x="75.0829%" y="751.50">&lt;rutin::cmd::commands..</text></g><g><title>rutin::shared::db::Db::visit_object::_{{closure}} (482 samples, 12.39%)</title><rect x="76.2211%" y="725" width="12.3907%" height="15" fill="rgb(208,109,11)" fg:x="2965" fg:w="482"/><text x="76.4711%" y="735.50">rutin::shared::db::..</text></g><g><title>rutin::shared::db::Db::visit_object::_{{closure}}::_{{closure}} (390 samples, 10.03%)</title><rect x="78.5861%" y="709" width="10.0257%" height="15" fill="rgb(216,190,48)" fg:x="3057" fg:w="390"/><text x="78.8361%" y="719.50">rutin::shared:..</text></g><g><title>rutin::shared::db::Db::get::_{{closure}} (348 samples, 8.95%)</title><rect x="79.6658%" y="693" width="8.9460%" height="15" fill="rgb(251,171,36)" fg:x="3099" fg:w="348"/><text x="79.9158%" y="703.50">rutin::shared..</text></g><g><title>tracing_core::metadata::LevelFilter::current (1 samples, 0.03%)</title><rect x="88.5861%" y="677" width="0.0257%" height="15" fill="rgb(230,62,22)" fg:x="3446" fg:w="1"/><text x="88.8361%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.03%)</title><rect x="88.5861%" y="661" width="0.0257%" height="15" fill="rgb(225,114,35)" fg:x="3446" fg:w="1"/><text x="88.8361%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.03%)</title><rect x="88.5861%" y="645" width="0.0257%" height="15" fill="rgb(215,118,42)" fg:x="3446" fg:w="1"/><text x="88.8361%" y="655.50"></text></g><g><title>&lt;rutin::cmd::commands::str::Get as rutin::cmd::CmdExecutor&gt;::execute::_{{closure}}::_{{closure}} (670 samples, 17.22%)</title><rect x="73.1620%" y="757" width="17.2237%" height="15" fill="rgb(243,119,21)" fg:x="2846" fg:w="670"/><text x="73.4120%" y="767.50">&lt;rutin::cmd::commands::str:..</text></g><g><title>[libc.so.6] (69 samples, 1.77%)</title><rect x="88.6118%" y="741" width="1.7738%" height="15" fill="rgb(252,177,53)" fg:x="3447" fg:w="69"/><text x="88.8618%" y="751.50">[..</text></g><g><title>[libc.so.6] (66 samples, 1.70%)</title><rect x="90.3856%" y="757" width="1.6967%" height="15" fill="rgb(237,209,29)" fg:x="3516" fg:w="66"/><text x="90.6356%" y="767.50"></text></g><g><title>&lt;rutin::cmd::commands::str::Get as rutin::cmd::CmdExecutor&gt;::execute::_{{closure}} (772 samples, 19.85%)</title><rect x="72.2622%" y="773" width="19.8458%" height="15" fill="rgb(212,65,23)" fg:x="2811" fg:w="772"/><text x="72.5122%" y="783.50">&lt;rutin::cmd::commands::str::Get..</text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::Span&gt; (1 samples, 0.03%)</title><rect x="92.0823%" y="757" width="0.0257%" height="15" fill="rgb(230,222,46)" fg:x="3582" fg:w="1"/><text x="92.3323%" y="767.50"></text></g><g><title>&lt;tracing::span::Span as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="92.0823%" y="741" width="0.0257%" height="15" fill="rgb(215,135,32)" fg:x="3582" fg:w="1"/><text x="92.3323%" y="751.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::deref::Deref&gt;::deref (3 samples, 0.08%)</title><rect x="92.3136%" y="725" width="0.0771%" height="15" fill="rgb(246,101,22)" fg:x="3591" fg:w="3"/><text x="92.5636%" y="735.50"></text></g><g><title>bytes::bytes::Bytes::as_slice (3 samples, 0.08%)</title><rect x="92.3136%" y="709" width="0.0771%" height="15" fill="rgb(206,107,13)" fg:x="3591" fg:w="3"/><text x="92.5636%" y="719.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (5 samples, 0.13%)</title><rect x="92.7249%" y="693" width="0.1285%" height="15" fill="rgb(250,100,44)" fg:x="3607" fg:w="5"/><text x="92.9749%" y="703.50"></text></g><g><title>&lt;I as atoi::FromRadix10SignedChecked&gt;::from_radix_10_signed_checked::_{{closure}} (5 samples, 0.13%)</title><rect x="92.7249%" y="677" width="0.1285%" height="15" fill="rgb(231,147,38)" fg:x="3607" fg:w="5"/><text x="92.9749%" y="687.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (25 samples, 0.64%)</title><rect x="92.2879%" y="757" width="0.6427%" height="15" fill="rgb(229,8,40)" fg:x="3590" fg:w="25"/><text x="92.5379%" y="767.50"></text></g><g><title>&lt;rutin::shared::db::object::str::Str as core::convert::From&lt;bytes::bytes::Bytes&gt;&gt;::from (25 samples, 0.64%)</title><rect x="92.2879%" y="741" width="0.6427%" height="15" fill="rgb(221,135,30)" fg:x="3590" fg:w="25"/><text x="92.5379%" y="751.50"></text></g><g><title>atoi::atoi (21 samples, 0.54%)</title><rect x="92.3907%" y="725" width="0.5398%" height="15" fill="rgb(249,193,18)" fg:x="3594" fg:w="21"/><text x="92.6407%" y="735.50"></text></g><g><title>&lt;I as atoi::FromRadix10SignedChecked&gt;::from_radix_10_signed_checked (15 samples, 0.39%)</title><rect x="92.5450%" y="709" width="0.3856%" height="15" fill="rgb(209,133,39)" fg:x="3600" fg:w="15"/><text x="92.7950%" y="719.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::first (3 samples, 0.08%)</title><rect x="92.8535%" y="693" width="0.0771%" height="15" fill="rgb(232,100,14)" fg:x="3612" fg:w="3"/><text x="93.1035%" y="703.50"></text></g><g><title>bytes::bytes::Bytes::with_vtable (1 samples, 0.03%)</title><rect x="93.1105%" y="709" width="0.0257%" height="15" fill="rgb(224,185,1)" fg:x="3622" fg:w="1"/><text x="93.3605%" y="719.50"></text></g><g><title>bytes::bytes_mut::increment_shared (23 samples, 0.59%)</title><rect x="93.1362%" y="709" width="0.5913%" height="15" fill="rgb(223,139,8)" fg:x="3623" fg:w="23"/><text x="93.3862%" y="719.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (29 samples, 0.75%)</title><rect x="93.0334%" y="741" width="0.7455%" height="15" fill="rgb(232,213,38)" fg:x="3619" fg:w="29"/><text x="93.2834%" y="751.50"></text></g><g><title>bytes::bytes_mut::shared_v_clone (26 samples, 0.67%)</title><rect x="93.1105%" y="725" width="0.6684%" height="15" fill="rgb(207,94,22)" fg:x="3622" fg:w="26"/><text x="93.3605%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (2 samples, 0.05%)</title><rect x="93.7275%" y="709" width="0.0514%" height="15" fill="rgb(219,183,54)" fg:x="3646" fg:w="2"/><text x="93.9775%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.05%)</title><rect x="93.7275%" y="693" width="0.0514%" height="15" fill="rgb(216,185,54)" fg:x="3646" fg:w="2"/><text x="93.9775%" y="703.50"></text></g><g><title>&lt;rutin::cmd::CmdUnparsed as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.95%)</title><rect x="92.9306%" y="757" width="0.9512%" height="15" fill="rgb(254,217,39)" fg:x="3615" fg:w="37"/><text x="93.1806%" y="767.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (4 samples, 0.10%)</title><rect x="93.7789%" y="741" width="0.1028%" height="15" fill="rgb(240,178,23)" fg:x="3648" fg:w="4"/><text x="94.0289%" y="751.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (4 samples, 0.10%)</title><rect x="93.7789%" y="725" width="0.1028%" height="15" fill="rgb(218,11,47)" fg:x="3648" fg:w="4"/><text x="94.0289%" y="735.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (15 samples, 0.39%)</title><rect x="93.8817%" y="757" width="0.3856%" height="15" fill="rgb(218,51,51)" fg:x="3652" fg:w="15"/><text x="94.1317%" y="767.50"></text></g><g><title>&lt;rutin::cmd::commands::str::Get as rutin::cmd::CmdExecutor&gt;::parse (87 samples, 2.24%)</title><rect x="92.1080%" y="773" width="2.2365%" height="15" fill="rgb(238,126,27)" fg:x="3583" fg:w="87"/><text x="92.3580%" y="783.50">&lt;..</text></g><g><title>rutin::conf::security::AccessControl::is_forbidden_key (3 samples, 0.08%)</title><rect x="94.2674%" y="757" width="0.0771%" height="15" fill="rgb(249,202,22)" fg:x="3667" fg:w="3"/><text x="94.5174%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;rutin::cmd::commands::str::Get as rutin::cmd::CmdExecutor&gt;::execute&lt;rutin::connection::FakeStream&gt;::{{closure}}&gt; (7 samples, 0.18%)</title><rect x="94.3445%" y="773" width="0.1799%" height="15" fill="rgb(254,195,49)" fg:x="3670" fg:w="7"/><text x="94.5945%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (54 samples, 1.39%)</title><rect x="94.9871%" y="693" width="1.3882%" height="15" fill="rgb(208,123,14)" fg:x="3695" fg:w="54"/><text x="95.2371%" y="703.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (54 samples, 1.39%)</title><rect x="94.9871%" y="677" width="1.3882%" height="15" fill="rgb(224,200,8)" fg:x="3695" fg:w="54"/><text x="95.2371%" y="687.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (47 samples, 1.21%)</title><rect x="95.1671%" y="661" width="1.2082%" height="15" fill="rgb(217,61,36)" fg:x="3702" fg:w="47"/><text x="95.4171%" y="671.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (42 samples, 1.08%)</title><rect x="95.2956%" y="645" width="1.0797%" height="15" fill="rgb(206,35,45)" fg:x="3707" fg:w="42"/><text x="95.5456%" y="655.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop::_{{closure}} (42 samples, 1.08%)</title><rect x="95.2956%" y="629" width="1.0797%" height="15" fill="rgb(217,65,33)" fg:x="3707" fg:w="42"/><text x="95.5456%" y="639.50"></text></g><g><title>bytes::bytes_mut::release_shared (40 samples, 1.03%)</title><rect x="95.3470%" y="613" width="1.0283%" height="15" fill="rgb(222,158,48)" fg:x="3709" fg:w="40"/><text x="95.5970%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (75 samples, 1.93%)</title><rect x="94.5244%" y="741" width="1.9280%" height="15" fill="rgb(254,2,54)" fg:x="3677" fg:w="75"/><text x="94.7744%" y="751.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;[rutin::frame::Resp3]&gt; (75 samples, 1.93%)</title><rect x="94.5244%" y="725" width="1.9280%" height="15" fill="rgb(250,143,38)" fg:x="3677" fg:w="75"/><text x="94.7744%" y="735.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;rutin::frame::Resp3&gt; (70 samples, 1.80%)</title><rect x="94.6530%" y="709" width="1.7995%" height="15" fill="rgb(248,25,0)" fg:x="3682" fg:w="70"/><text x="94.9030%" y="719.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;ahash::hash_map::AHashMap&lt;rutin::frame::Resp3,rutin::frame::Resp3&gt;&gt;&gt; (3 samples, 0.08%)</title><rect x="96.3753%" y="693" width="0.0771%" height="15" fill="rgb(206,152,27)" fg:x="3749" fg:w="3"/><text x="96.6253%" y="703.50"></text></g><g><title>_mi_page_retire (1 samples, 0.03%)</title><rect x="96.4524%" y="645" width="0.0257%" height="15" fill="rgb(240,77,30)" fg:x="3752" fg:w="1"/><text x="96.7024%" y="655.50"></text></g><g><title>_mi_segment_page_of (5 samples, 0.13%)</title><rect x="96.5810%" y="629" width="0.1285%" height="15" fill="rgb(231,5,3)" fg:x="3757" fg:w="5"/><text x="96.8310%" y="639.50"></text></g><g><title>mi_slice_first (3 samples, 0.08%)</title><rect x="96.6324%" y="613" width="0.0771%" height="15" fill="rgb(207,226,32)" fg:x="3759" fg:w="3"/><text x="96.8824%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;rutin::cmd::CmdUnparsed&gt; (88 samples, 2.26%)</title><rect x="94.5244%" y="773" width="2.2622%" height="15" fill="rgb(222,207,47)" fg:x="3677" fg:w="88"/><text x="94.7744%" y="783.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;rutin::frame::Resp3&gt;&gt; (88 samples, 2.26%)</title><rect x="94.5244%" y="757" width="2.2622%" height="15" fill="rgb(229,115,45)" fg:x="3677" fg:w="88"/><text x="94.7744%" y="767.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;rutin::frame::Resp3&gt;&gt; (13 samples, 0.33%)</title><rect x="96.4524%" y="741" width="0.3342%" height="15" fill="rgb(224,191,6)" fg:x="3752" fg:w="13"/><text x="96.7024%" y="751.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.33%)</title><rect x="96.4524%" y="725" width="0.3342%" height="15" fill="rgb(230,227,24)" fg:x="3752" fg:w="13"/><text x="96.7024%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.33%)</title><rect x="96.4524%" y="709" width="0.3342%" height="15" fill="rgb(228,80,19)" fg:x="3752" fg:w="13"/><text x="96.7024%" y="719.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.33%)</title><rect x="96.4524%" y="693" width="0.3342%" height="15" fill="rgb(247,229,0)" fg:x="3752" fg:w="13"/><text x="96.7024%" y="703.50"></text></g><g><title>__rust_dealloc (13 samples, 0.33%)</title><rect x="96.4524%" y="677" width="0.3342%" height="15" fill="rgb(237,194,15)" fg:x="3752" fg:w="13"/><text x="96.7024%" y="687.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (13 samples, 0.33%)</title><rect x="96.4524%" y="661" width="0.3342%" height="15" fill="rgb(219,203,20)" fg:x="3752" fg:w="13"/><text x="96.7024%" y="671.50"></text></g><g><title>mi_free (12 samples, 0.31%)</title><rect x="96.4781%" y="645" width="0.3085%" height="15" fill="rgb(234,128,8)" fg:x="3753" fg:w="12"/><text x="96.7281%" y="655.50"></text></g><g><title>mi_checked_ptr_segment (3 samples, 0.08%)</title><rect x="96.7095%" y="629" width="0.0771%" height="15" fill="rgb(248,202,8)" fg:x="3762" fg:w="3"/><text x="96.9595%" y="639.50"></text></g><g><title>_mi_ptr_segment (3 samples, 0.08%)</title><rect x="96.7095%" y="613" width="0.0771%" height="15" fill="rgb(206,104,37)" fg:x="3762" fg:w="3"/><text x="96.9595%" y="623.50"></text></g><g><title>rutin::cmd::CmdExecutor::apply::_{{closure}} (984 samples, 25.30%)</title><rect x="71.5681%" y="789" width="25.2956%" height="15" fill="rgb(223,8,27)" fg:x="2784" fg:w="984"/><text x="71.8181%" y="799.50">rutin::cmd::CmdExecutor::apply::_{{closu..</text></g><g><title>rutin::conf::security::AccessControl::is_forbidden_cmd (3 samples, 0.08%)</title><rect x="96.7866%" y="773" width="0.0771%" height="15" fill="rgb(216,217,28)" fg:x="3765" fg:w="3"/><text x="97.0366%" y="783.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (9 samples, 0.23%)</title><rect x="96.9152%" y="773" width="0.2314%" height="15" fill="rgb(249,199,1)" fg:x="3770" fg:w="9"/><text x="97.1652%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.23%)</title><rect x="96.9152%" y="757" width="0.2314%" height="15" fill="rgb(240,85,17)" fg:x="3770" fg:w="9"/><text x="97.1652%" y="767.50"></text></g><g><title>[libc.so.6] (8 samples, 0.21%)</title><rect x="96.9409%" y="741" width="0.2057%" height="15" fill="rgb(206,108,45)" fg:x="3771" fg:w="8"/><text x="97.1909%" y="751.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.08%)</title><rect x="97.1465%" y="757" width="0.0771%" height="15" fill="rgb(245,210,41)" fg:x="3779" fg:w="3"/><text x="97.3965%" y="767.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (2 samples, 0.05%)</title><rect x="97.1722%" y="741" width="0.0514%" height="15" fill="rgb(206,13,37)" fg:x="3780" fg:w="2"/><text x="97.4222%" y="751.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (2 samples, 0.05%)</title><rect x="97.1722%" y="725" width="0.0514%" height="15" fill="rgb(250,61,18)" fg:x="3780" fg:w="2"/><text x="97.4222%" y="735.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (2 samples, 0.05%)</title><rect x="97.1722%" y="709" width="0.0514%" height="15" fill="rgb(235,172,48)" fg:x="3780" fg:w="2"/><text x="97.4222%" y="719.50"></text></g><g><title>rutin::cmd::dispatch::_{{closure}}::_{{closure}}::_{{closure}} (1,275 samples, 32.78%)</title><rect x="64.8072%" y="805" width="32.7763%" height="15" fill="rgb(249,201,17)" fg:x="2521" fg:w="1275"/><text x="65.0572%" y="815.50">rutin::cmd::dispatch::_{{closure}}::_{{closure}}::_{{..</text></g><g><title>rutin::util::uppercase (28 samples, 0.72%)</title><rect x="96.8638%" y="789" width="0.7198%" height="15" fill="rgb(219,208,6)" fg:x="3768" fg:w="28"/><text x="97.1138%" y="799.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::make_ascii_uppercase (17 samples, 0.44%)</title><rect x="97.1465%" y="773" width="0.4370%" height="15" fill="rgb(248,31,23)" fg:x="3779" fg:w="17"/><text x="97.3965%" y="783.50"></text></g><g><title>core::num::&lt;impl u8&gt;::make_ascii_uppercase (14 samples, 0.36%)</title><rect x="97.2237%" y="757" width="0.3599%" height="15" fill="rgb(245,15,42)" fg:x="3782" fg:w="14"/><text x="97.4737%" y="767.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_uppercase (11 samples, 0.28%)</title><rect x="97.3008%" y="741" width="0.2828%" height="15" fill="rgb(222,217,39)" fg:x="3785" fg:w="11"/><text x="97.5508%" y="751.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_lowercase (6 samples, 0.15%)</title><rect x="97.4293%" y="725" width="0.1542%" height="15" fill="rgb(210,219,27)" fg:x="3790" fg:w="6"/><text x="97.6793%" y="735.50"></text></g><g><title>rutin::cmd::dispatch::_{{closure}} (1,687 samples, 43.37%)</title><rect x="54.2416%" y="837" width="43.3676%" height="15" fill="rgb(252,166,36)" fg:x="2110" fg:w="1687"/><text x="54.4916%" y="847.50">rutin::cmd::dispatch::_{{closure}}</text></g><g><title>rutin::cmd::dispatch::_{{closure}}::_{{closure}} (1,413 samples, 36.32%)</title><rect x="61.2853%" y="821" width="36.3239%" height="15" fill="rgb(245,132,34)" fg:x="2384" fg:w="1413"/><text x="61.5353%" y="831.50">rutin::cmd::dispatch::_{{closure}}::_{{closure}}</text></g><g><title>tracing_core::metadata::LevelFilter::current (1 samples, 0.03%)</title><rect x="97.5835%" y="805" width="0.0257%" height="15" fill="rgb(236,54,3)" fg:x="3796" fg:w="1"/><text x="97.8335%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.03%)</title><rect x="97.5835%" y="789" width="0.0257%" height="15" fill="rgb(241,173,43)" fg:x="3796" fg:w="1"/><text x="97.8335%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.03%)</title><rect x="97.5835%" y="773" width="0.0257%" height="15" fill="rgb(215,190,9)" fg:x="3796" fg:w="1"/><text x="97.8335%" y="783.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::advance (1 samples, 0.03%)</title><rect x="98.8432%" y="773" width="0.0257%" height="15" fill="rgb(242,101,16)" fg:x="3845" fg:w="1"/><text x="99.0932%" y="783.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (1 samples, 0.03%)</title><rect x="98.8432%" y="757" width="0.0257%" height="15" fill="rgb(223,190,21)" fg:x="3845" fg:w="1"/><text x="99.0932%" y="767.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (1 samples, 0.03%)</title><rect x="98.8432%" y="741" width="0.0257%" height="15" fill="rgb(215,228,25)" fg:x="3845" fg:w="1"/><text x="99.0932%" y="751.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (3 samples, 0.08%)</title><rect x="98.8689%" y="709" width="0.0771%" height="15" fill="rgb(225,36,22)" fg:x="3846" fg:w="3"/><text x="99.1189%" y="719.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (3 samples, 0.08%)</title><rect x="98.8689%" y="693" width="0.0771%" height="15" fill="rgb(251,106,46)" fg:x="3846" fg:w="3"/><text x="99.1189%" y="703.50"></text></g><g><title>mio::sys::unix::stateless_io_source::IoSourceState::do_io (3 samples, 0.08%)</title><rect x="98.8689%" y="677" width="0.0771%" height="15" fill="rgb(208,90,1)" fg:x="3846" fg:w="3"/><text x="99.1189%" y="687.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write::_{{closure}} (3 samples, 0.08%)</title><rect x="98.8689%" y="661" width="0.0771%" height="15" fill="rgb(243,10,4)" fg:x="3846" fg:w="3"/><text x="99.1189%" y="671.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (3 samples, 0.08%)</title><rect x="98.8689%" y="645" width="0.0771%" height="15" fill="rgb(212,137,27)" fg:x="3846" fg:w="3"/><text x="99.1189%" y="655.50"></text></g><g><title>std::sys_common::net::TcpStream::write (3 samples, 0.08%)</title><rect x="98.8689%" y="629" width="0.0771%" height="15" fill="rgb(231,220,49)" fg:x="3846" fg:w="3"/><text x="99.1189%" y="639.50"></text></g><g><title>__send (3 samples, 0.08%)</title><rect x="98.8689%" y="613" width="0.0771%" height="15" fill="rgb(237,96,20)" fg:x="3846" fg:w="3"/><text x="99.1189%" y="623.50"></text></g><g><title>&lt;tokio::io::util::write_buf::WriteBuf&lt;W,B&gt; as core::future::future::Future&gt;::poll (5 samples, 0.13%)</title><rect x="98.8432%" y="789" width="0.1285%" height="15" fill="rgb(239,229,30)" fg:x="3845" fg:w="5"/><text x="99.0932%" y="799.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (4 samples, 0.10%)</title><rect x="98.8689%" y="773" width="0.1028%" height="15" fill="rgb(219,65,33)" fg:x="3846" fg:w="4"/><text x="99.1189%" y="783.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (4 samples, 0.10%)</title><rect x="98.8689%" y="757" width="0.1028%" height="15" fill="rgb(243,134,7)" fg:x="3846" fg:w="4"/><text x="99.1189%" y="767.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (4 samples, 0.10%)</title><rect x="98.8689%" y="741" width="0.1028%" height="15" fill="rgb(216,177,54)" fg:x="3846" fg:w="4"/><text x="99.1189%" y="751.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (4 samples, 0.10%)</title><rect x="98.8689%" y="725" width="0.1028%" height="15" fill="rgb(211,160,20)" fg:x="3846" fg:w="4"/><text x="99.1189%" y="735.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_write_ready (1 samples, 0.03%)</title><rect x="98.9460%" y="709" width="0.0257%" height="15" fill="rgb(239,85,39)" fg:x="3849" fg:w="1"/><text x="99.1960%" y="719.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.03%)</title><rect x="98.9460%" y="693" width="0.0257%" height="15" fill="rgb(232,125,22)" fg:x="3849" fg:w="1"/><text x="99.1960%" y="703.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (1 samples, 0.03%)</title><rect x="98.9460%" y="677" width="0.0257%" height="15" fill="rgb(244,57,34)" fg:x="3849" fg:w="1"/><text x="99.1960%" y="687.50"></text></g><g><title>tokio::runtime::io::driver::Direction::mask (1 samples, 0.03%)</title><rect x="98.9460%" y="661" width="0.0257%" height="15" fill="rgb(214,203,32)" fg:x="3849" fg:w="1"/><text x="99.1960%" y="671.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::advance_mut (2 samples, 0.05%)</title><rect x="99.1774%" y="741" width="0.0514%" height="15" fill="rgb(207,58,43)" fg:x="3858" fg:w="2"/><text x="99.4274%" y="751.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (10 samples, 0.26%)</title><rect x="99.2288%" y="741" width="0.2571%" height="15" fill="rgb(215,193,15)" fg:x="3860" fg:w="10"/><text x="99.4788%" y="751.50"></text></g><g><title>bytes::bytes_mut::BytesMut::capacity (9 samples, 0.23%)</title><rect x="99.2545%" y="725" width="0.2314%" height="15" fill="rgb(232,15,44)" fg:x="3861" fg:w="9"/><text x="99.5045%" y="735.50"></text></g><g><title>&lt;tokio::task::task_local::TaskLocalFuture&lt;T,F&gt; as core::future::future::Future&gt;::poll::_{{closure}} (2,104 samples, 54.09%)</title><rect x="45.7326%" y="869" width="54.0874%" height="15" fill="rgb(212,3,48)" fg:x="1779" fg:w="2104"/><text x="45.9826%" y="879.50">&lt;tokio::task::task_local::TaskLocalFuture&lt;T,F&gt; as core::future::future::Future&gt;::poll::_{..</text></g><g><title>rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}}::_{{closure}}::_{{closure}}::_{{closure}} (2,103 samples, 54.06%)</title><rect x="45.7584%" y="853" width="54.0617%" height="15" fill="rgb(218,128,7)" fg:x="1780" fg:w="2103"/><text x="46.0084%" y="863.50">rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}}::_{{closure}}::_{{closure}}::_{{clo..</text></g><g><title>rutin::connection::Connection&lt;S&gt;::write_frame::_{{closure}} (86 samples, 2.21%)</title><rect x="97.6093%" y="837" width="2.2108%" height="15" fill="rgb(226,216,39)" fg:x="3797" fg:w="86"/><text x="97.8593%" y="847.50">r..</text></g><g><title>rutin::connection::Connection&lt;S&gt;::write_frame::_{{closure}}::_{{closure}} (70 samples, 1.80%)</title><rect x="98.0206%" y="821" width="1.7995%" height="15" fill="rgb(243,47,51)" fg:x="3813" fg:w="70"/><text x="98.2706%" y="831.50">r..</text></g><g><title>rutin::connection::Connection&lt;S&gt;::write_frame::_{{closure}}::_{{closure}}::_{{closure}} (44 samples, 1.13%)</title><rect x="98.6889%" y="805" width="1.1311%" height="15" fill="rgb(241,183,40)" fg:x="3839" fg:w="44"/><text x="98.9389%" y="815.50"></text></g><g><title>rutin::frame::Resp3&lt;B,S&gt;::encode_buf (33 samples, 0.85%)</title><rect x="98.9717%" y="789" width="0.8483%" height="15" fill="rgb(231,217,32)" fg:x="3850" fg:w="33"/><text x="99.2217%" y="799.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (25 samples, 0.64%)</title><rect x="99.1774%" y="773" width="0.6427%" height="15" fill="rgb(229,61,38)" fg:x="3858" fg:w="25"/><text x="99.4274%" y="783.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (25 samples, 0.64%)</title><rect x="99.1774%" y="757" width="0.6427%" height="15" fill="rgb(225,210,5)" fg:x="3858" fg:w="25"/><text x="99.4274%" y="767.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.33%)</title><rect x="99.4859%" y="741" width="0.3342%" height="15" fill="rgb(231,79,45)" fg:x="3870" fg:w="13"/><text x="99.7359%" y="751.50"></text></g><g><title>core::mem::drop (1 samples, 0.03%)</title><rect x="99.8201%" y="869" width="0.0257%" height="15" fill="rgb(224,100,7)" fg:x="3883" fg:w="1"/><text x="100.0701%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::task::task_local::LocalKey&lt;T&gt;::scope_inner::Guard&lt;u64&gt;&gt; (1 samples, 0.03%)</title><rect x="99.8201%" y="853" width="0.0257%" height="15" fill="rgb(241,198,18)" fg:x="3883" fg:w="1"/><text x="100.0701%" y="863.50"></text></g><g><title>&lt;tokio::task::task_local::LocalKey&lt;T&gt;::scope_inner::Guard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="99.8201%" y="837" width="0.0257%" height="15" fill="rgb(252,97,53)" fg:x="3883" fg:w="1"/><text x="100.0701%" y="847.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.03%)</title><rect x="99.8201%" y="821" width="0.0257%" height="15" fill="rgb(220,88,7)" fg:x="3883" fg:w="1"/><text x="100.0701%" y="831.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.03%)</title><rect x="99.8201%" y="805" width="0.0257%" height="15" fill="rgb(213,176,14)" fg:x="3883" fg:w="1"/><text x="100.0701%" y="815.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.03%)</title><rect x="99.8201%" y="789" width="0.0257%" height="15" fill="rgb(246,73,7)" fg:x="3883" fg:w="1"/><text x="100.0701%" y="799.50"></text></g><g><title>rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}}::_{{closure}} (2,109 samples, 54.22%)</title><rect x="45.6812%" y="933" width="54.2159%" height="15" fill="rgb(245,64,36)" fg:x="1777" fg:w="2109"/><text x="45.9312%" y="943.50">rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}}::_{{closure}}</text></g><g><title>rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}}::_{{closure}}::_{{closure}} (2,107 samples, 54.16%)</title><rect x="45.7326%" y="917" width="54.1645%" height="15" fill="rgb(245,80,10)" fg:x="1779" fg:w="2107"/><text x="45.9826%" y="927.50">rutin::server::handler::Handler&lt;S&gt;::run::_{{closure}}::_{{closure}}::_{{closure}}</text></g><g><title>&lt;tokio::task::task_local::TaskLocalFuture&lt;T,F&gt; as core::future::future::Future&gt;::poll (2,107 samples, 54.16%)</title><rect x="45.7326%" y="901" width="54.1645%" height="15" fill="rgb(232,107,50)" fg:x="1779" fg:w="2107"/><text x="45.9826%" y="911.50">&lt;tokio::task::task_local::TaskLocalFuture&lt;T,F&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::task::task_local::LocalKey&lt;T&gt;::scope_inner (2,107 samples, 54.16%)</title><rect x="45.7326%" y="885" width="54.1645%" height="15" fill="rgb(253,3,0)" fg:x="1779" fg:w="2107"/><text x="45.9826%" y="895.50">tokio::task::task_local::LocalKey&lt;T&gt;::scope_inner</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.05%)</title><rect x="99.8458%" y="869" width="0.0514%" height="15" fill="rgb(212,99,53)" fg:x="3884" fg:w="2"/><text x="100.0958%" y="879.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.05%)</title><rect x="99.8458%" y="853" width="0.0514%" height="15" fill="rgb(249,111,54)" fg:x="3884" fg:w="2"/><text x="100.0958%" y="863.50"></text></g><g><title>all (3,890 samples, 100%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(249,55,30)" fg:x="0" fg:w="3890"/><text x="0.2500%" y="975.50"></text></g><g><title>tokio-runtime-w (3,889 samples, 99.97%)</title><rect x="0.0257%" y="949" width="99.9743%" height="15" fill="rgb(237,47,42)" fg:x="1" fg:w="3889"/><text x="0.2757%" y="959.50">tokio-runtime-w</text></g><g><title>tokio::runtime::task::raw::poll (4 samples, 0.10%)</title><rect x="99.8972%" y="933" width="0.1028%" height="15" fill="rgb(211,20,18)" fg:x="3886" fg:w="4"/><text x="100.1472%" y="943.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (4 samples, 0.10%)</title><rect x="99.8972%" y="917" width="0.1028%" height="15" fill="rgb(231,203,46)" fg:x="3886" fg:w="4"/><text x="100.1472%" y="927.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (4 samples, 0.10%)</title><rect x="99.8972%" y="901" width="0.1028%" height="15" fill="rgb(237,142,3)" fg:x="3886" fg:w="4"/><text x="100.1472%" y="911.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (4 samples, 0.10%)</title><rect x="99.8972%" y="885" width="0.1028%" height="15" fill="rgb(241,107,1)" fg:x="3886" fg:w="4"/><text x="100.1472%" y="895.50"></text></g><g><title>std::panic::catch_unwind (4 samples, 0.10%)</title><rect x="99.8972%" y="869" width="0.1028%" height="15" fill="rgb(229,83,13)" fg:x="3886" fg:w="4"/><text x="100.1472%" y="879.50"></text></g><g><title>std::panicking::try (4 samples, 0.10%)</title><rect x="99.8972%" y="853" width="0.1028%" height="15" fill="rgb(241,91,40)" fg:x="3886" fg:w="4"/><text x="100.1472%" y="863.50"></text></g><g><title>std::panicking::try::do_call (4 samples, 0.10%)</title><rect x="99.8972%" y="837" width="0.1028%" height="15" fill="rgb(225,3,45)" fg:x="3886" fg:w="4"/><text x="100.1472%" y="847.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (4 samples, 0.10%)</title><rect x="99.8972%" y="821" width="0.1028%" height="15" fill="rgb(244,223,14)" fg:x="3886" fg:w="4"/><text x="100.1472%" y="831.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (4 samples, 0.10%)</title><rect x="99.8972%" y="805" width="0.1028%" height="15" fill="rgb(224,124,37)" fg:x="3886" fg:w="4"/><text x="100.1472%" y="815.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (4 samples, 0.10%)</title><rect x="99.8972%" y="789" width="0.1028%" height="15" fill="rgb(251,171,30)" fg:x="3886" fg:w="4"/><text x="100.1472%" y="799.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (4 samples, 0.10%)</title><rect x="99.8972%" y="773" width="0.1028%" height="15" fill="rgb(236,46,54)" fg:x="3886" fg:w="4"/><text x="100.1472%" y="783.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (4 samples, 0.10%)</title><rect x="99.8972%" y="757" width="0.1028%" height="15" fill="rgb(245,213,5)" fg:x="3886" fg:w="4"/><text x="100.1472%" y="767.50"></text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.03%)</title><rect x="99.9743%" y="741" width="0.0257%" height="15" fill="rgb(230,144,27)" fg:x="3889" fg:w="1"/><text x="100.2243%" y="751.50"></text></g></svg></svg>